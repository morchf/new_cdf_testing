import pyarrow as pa

# See https://github.com/google/transit/blob/master/gtfs/spec/en/reference.md
GTFS_DATA_MODEL = {
    "agency": {
        "agency_id": pa.string(),
        "agency_name": pa.string(),
        "agency_url": pa.string(),
        "agency_timezone": pa.string(),
        "agency_lang": pa.string(),
        "agency_phone": pa.string(),
        "agency_fare_url": pa.string(),
        "agency_email": pa.string(),
    },
    "calendar": {
        "service_id": pa.string(),
        "monday": pa.int64(),
        "tuesday": pa.int64(),
        "wednesday": pa.int64(),
        "thursday": pa.int64(),
        "friday": pa.int64(),
        "saturday": pa.int64(),
        "sunday": pa.int64(),
        "start_date": pa.string(),
        "end_date": pa.string(),
    },
    "calendar_dates": {
        "service_id": pa.string(),
        "date": pa.string(),
        "exception_type": pa.int64(),
    },
    "routes": {
        "route_id": pa.string(),
        "agency_id": pa.string(),
        "route_short_name": pa.string(),
        "route_long_name": pa.string(),
        "route_desc": pa.string(),
        "route_type": pa.int64(),
        "route_url": pa.string(),
        "route_color": pa.string(),
        "route_text_color": pa.string(),
        "route_sort_order": pa.int64(),
        "continuous_pickup": pa.int64(),
        "continuous_drop_off": pa.int64(),
    },
    "stops": {
        "stop_id": pa.string(),
        "stop_code": pa.string(),
        "stop_name": pa.string(),
        "stop_desc": pa.string(),
        "stop_lat": pa.float64(),
        "stop_lon": pa.float64(),
        "zone_id": pa.string(),
        "stop_url": pa.string(),
        "location_type": pa.int64(),
        "parent_station": pa.string(),
        "stop_timezone": pa.string(),
        "wheelchair_boarding": pa.int64(),
        "level_id": pa.string(),
        "platform_code": pa.string(),
    },
    "stop_times": {
        "trip_id": pa.string(),
        "arrival_time": pa.string(),
        "departure_time": pa.string(),
        "stop_id": pa.string(),
        "stop_sequence": pa.int64(),
        "stop_headsign": pa.string(),
        "pickup_type": pa.int64(),
        "drop_off_type": pa.int64(),
        "continuous_pickup": pa.int64(),
        "continuous_drop_off": pa.int64(),
        "shape_dist_traveled": pa.float64(),
        "timepoint": pa.int64(),
    },
    "trips": {
        "route_id": pa.string(),
        "service_id": pa.string(),
        "trip_id": pa.string(),
        "trip_headsign": pa.string(),
        "trip_short_name": pa.string(),
        "direction_id": pa.int64(),
        "block_id": pa.string(),
        "shape_id": pa.string(),
        "wheelchair_accessible": pa.int64(),
        "bikes_allowed": pa.int64(),
        "trip_type": pa.string(),
    },
    "fare_attributes": {
        "fare_id": pa.string(),
        "price": pa.float64(),
        "currency_type": pa.string(),
        "payment_method": pa.int64(),
        "transfers": pa.int64(),
        "agency_id": pa.string(),
        "transfer_duration": pa.int64(),
    },
    "fare_rules": {
        "fare_id": pa.string(),
        "route_id": pa.string(),
        "origin_id": pa.string(),
        "destination_id": pa.string(),
        "contains_id": pa.string(),
    },
    "shapes": {
        "shape_id": pa.string(),
        "shape_pt_lat": pa.float64(),
        "shape_pt_lon": pa.float64(),
        "shape_pt_sequence": pa.int64(),
        "shape_dist_traveled": pa.float64(),
    },
    "frequencies": {
        "trip_id": pa.string(),
        "start_time": pa.string(),
        "end_time": pa.string(),
        "headway_secs": pa.string(),
        "exact_times": pa.string(),
    },
    "transfers": {
        "from_stop_id": pa.string(),
        "to_stop_id": pa.string(),
        "transfer_type": pa.string(),
        "min_transfer_time": pa.string(),
    },
    "pathways": {
        "pathway_id": pa.string(),
        "from_stop_id": pa.string(),
        "to_stop_id": pa.string(),
        "pathway_mode": pa.string(),
        "is_bidirectional": pa.string(),
        "length": pa.string(),
        "traversal_time": pa.string(),
        "stair_count": pa.string(),
        "max_slope": pa.string(),
        "min_width": pa.string(),
        "signposted_as": pa.string(),
        "reversed_signposted_as": pa.string(),
    },
    "levels": {
        "level_id": pa.string(),
        "level_index": pa.string(),
        "level_name": pa.string(),
    },
    "feed_info": {
        "feed_publisher_name": pa.string(),
        "feed_publisher_url": pa.string(),
        "feed_lang": pa.string(),
        "default_lang": pa.string(),
        "feed_start_date": pa.string(),
        "feed_end_date": pa.string(),
        "feed_version": pa.string(),
        "feed_contact_email": pa.string(),
        "feed_contact_url": pa.string(),
    },
}

# https://github.com/apache/arrow/blob/630d85c4fa9af234fe148e881bf5f9b003563767/cpp/src/arrow/csv/options.cc#L41-L43
NULL_STATIC_GTFS_VALUES = {" "} | {
    "",
    "#N/A",
    "#N/A N/A",
    "#NA",
    "-1.#IND",
    "-1.#QNAN",
    "-NaN",
    "-nan",
    "1.#IND",
    "1.#QNAN",
    "N/A",
    "NA",
    "NULL",
    "NaN",
    "n/a",
    "nan",
    "null",
}


STATIC_GTFS_TABLES = list(GTFS_DATA_MODEL.keys())


FEATURE_NAME = "tsp-asm"
