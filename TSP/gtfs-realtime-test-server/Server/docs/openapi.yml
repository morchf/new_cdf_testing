openapi: '3.0.3'
info:
  title: GTFS Realtime Test Server
  version: '0.1'
servers:
  - url: http://localhost:8080
  - url: http://gtfs-realtime-test-server.developgtt.com
paths:
  /gtfs-rt/{agency-id}/vehiclepositions:
    get:
      operationId: GetFeedMessage
      description: Returns GTFS Realtime Protobuf, or GTFS Realtime JSON if 
        'Content-Type' request header is set to 'application/json'. Typically
        called by gtfs_realtime_api_poller, not by the tester, except maybe
        to peek at the current state in JSON format.
      externalDocs:
        url: https://developers.google.com/transit/gtfs-realtime/reference
      responses:
        '200':
          description: OK
          content:
            application/protobuf:
              schema:
                type: string
                format: binary
            application/json:
              schema:
                $ref: "#/components/schemas/FeedMessage"
        '500':
          description: Unexpected Internal Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StatusMessage"

    put:
      operationId: SetFeedMessage
      description: Sets GTFS Realtime resource from JSON request body. The schema
        of the request body is the same as a GTFS Realtime FeedMessage, in 
        JSON format.
      externalDocs:
        url: https://developers.google.com/transit/gtfs-realtime/reference
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FeedMessage"
      responses:
        '200':
          description: Successfully set GTFS Realtime resource
          content: 
            application/json:
              schema:
                $ref: "#/components/schemas/StatusMessage"
        '400':
          description: Invalid JSON input
          content: 
            application/json:
              schema:
                $ref: "#/components/schemas/StatusMessage"

    patch:
      operationId: UpdateFeedMessage
      description: Updates part of GTFS Realtime resource from JSON request body.
        The schema of the request body is any SUBSET of a GTFS Realtime FeedMessage,
        in JSON format.
      externalDocs:
        url: https://developers.google.com/transit/gtfs-realtime/reference
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FeedMessage"
      responses:
        '200':
          description: Sucessfully updated GTFS Realtime resource
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StatusMessage"
        '400':
          description: Invalid JSON Input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StatusMessage"

  /gtfs-rt/{agency-id}/vehiclepositions/entities:
    post:
      operationId: CreateFeedEntity
      description: Creates a FeedEntity
      externalDocs:
        url: https://developers.google.com/transit/gtfs-realtime/reference
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FeedEntity"
      responses:
        '200':
          description: Successfully created FeedEntity
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StatusMessage"
        '400':
          description: Invalid FeedEntity JSON
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StatusMessage"
        '403':
          description: Entity already exists
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StatusMessage"

  /gtfs-rt/{agency-id}/vehiclepositions/entities/{id}:
    get:
      operationId: GetFeedEntity
      description: Retrieves a FeedEntity
      externalDocs:
        url: https://developers.google.com/transit/gtfs-realtime/reference
      parameters:
        - name: id
          in: path
          required: true
          schema: {type: "string"}
      responses:
        '200':
          description: Successfully returned FeedEntity
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FeedEntity"
        '404':
          description: FeedEntity not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StatusMessage"

    put:
      operationId: SetFeedEntity
      description: Updates an entire FeedEntity
      externalDocs:
        url: https://developers.google.com/transit/gtfs-realtime/reference
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FeedEntity"
      parameters:
        - name: id
          in: path
          required: true
          schema: {type: "string"}
      responses:
        '200':
          description: Successfully updated FeedEntity
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StatusMessage"
        '400':
          description: Invalid FeedEntity JSON
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StatusMessage"
        '404':
          description: FeedEntity not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StatusMessage"

    patch:
      operationId: UpdateFeedEntity
      description: Updates part of a FeedEntity
      externalDocs:
        url: https://developers.google.com/transit/gtfs-realtime/reference
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FeedEntity"
      parameters:
        - name: id
          in: path
          required: true
          schema: {type: "string"}
      responses:
        '200':
          description: Successfully updated FeedEntity
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StatusMessage"
        '400':
          description: Invalid FeedEntity JSON
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StatusMessage"
        '404':
          description: FeedEntity not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StatusMessage"

    delete:
      operationId: DeleteFeedEntity
      description: Removes a FeedEntity
      externalDocs:
        url: https://developers.google.com/transit/gtfs-realtime/reference
      parameters:
        - name: id
          in: path
          required: true
          schema: {type: "string"}
      responses:
        '200':
          description: Successfully removed FeedEntity
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StatusMessage"
        '404':
          description: FeedEntity not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StatusMessage"

  /subscribe:
    post:
      operationId: SubscribeToTopic
      description: Subscribes the test server to the given topic filter
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                topic:
                  type: string
      responses:
        '200':
          description: Successfully subscribed to topic
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StatusMessage"
        '500':
          description: Some error in subscribing
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StatusMessage"

  /mqtt:
    get:
      operationId: GetMQTTMessages
      description: Returns a map of <topic> -> MQTTMessage, filtered
        by the given age and topics
      responses:
        '200':
          description: Successfully returned MQTT Messages
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MQTTMessages"
    post:
      operationId: HandleMQTTMessage
      description: Called by IoT Core Rule. Do not call directly unless mocking
        IoT Core. Accepts a 'raw' MQTT Message and stores it
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                vehicleId: {type: "string"}
                latLon: {type: "string"}
                payload: {type: "string"}
      responses:
        '200':
          description: Successfully handled MQTT Message
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StatusMessage"
        '400':
          description: Invalid MQTT Message JSON
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StatusMessage"

components:
  schemas:
    StatusMessage:
      type: object
      properties:
        type:
          type: string
          enum:
            - error
            - success
        message:
          type: string
    MQTTMessages:
      type: object
      items:
        $ref: "#/components/schemas/MQTTMessage"
    MQTTMessage:
      type: object
      properties:
        topic:
          type: string
        payload:
          type: object
          properties:
            vehSN:
              type: integer
            vehRSSI:
              type: integer
            padding1:
              type: integer
            vehGPSLat_ddmmmmmm:
              type: integer
            vehGPSLon_dddmmmmmm:
              type: integer
            vehGPSVel_mpsd5:
              type: integer
            vehGPSHdg_deg2:
              type: integer
            vehGPSCStat:
              type: integer
            vehGPSSatellites:
              type: integer
            vehVehID:
              type: integer
            vehCityID:
              type: integer
            vehModeOpTurn:
              type: integer
            vehClass:
              type: integer
            conditionalPriority:
              type: integer
            padding2:
              type: integer
            vehDiagValue:
              type: integer

    "FeedMessage": {
      "required": ["header"],
      "properties": {
        "header": {
          "$ref": "#/components/schemas/FeedHeader",
          "additionalProperties": false,
          "description": "Metadata about this feed and feed message."
        },
        "entity": {
          "items": { "$ref": "#/components/schemas/FeedEntity" },
          "type": "array",
          "description": "Contents of the feed."
        }
      },
      "additionalProperties": true,
      "type": "object",
      "title": "Feed Message",
      "description": "The contents of a feed message. A feed is a continuous stream of feed messages. Each message in the stream is obtained as a response to an appropriate HTTP GET request. A realtime feed is always defined with relation to an existing GTFS feed. All the entity ids are resolved with respect to the GTFS feed. Note that \"required\" and \"optional\" as stated in this file refer to Protocol Buffer cardinality, not semantic cardinality.  See reference.md at https://github.com/google/transit/tree/master/gtfs-realtime for field semantic cardinality."
    }
    "Alert": {
      "properties": {
        "active_period": {
          "items": { "$ref": "#/components/schemas/TimeRange" },
          "type": "array",
          "description": "Time when the alert should be shown to the user. If missing, the alert will be shown as long as it appears in the feed. If multiple ranges are given, the alert will be shown during all of them."
        },
        "informed_entity": {
          "items": { "$ref": "#/components/schemas/EntitySelector" },
          "type": "array",
          "description": "Entities whose users we should notify of this alert."
        },
        "cause": {
          "enum": [
            "UNKNOWN_CAUSE",
            1,
            "OTHER_CAUSE",
            2,
            "TECHNICAL_PROBLEM",
            3,
            "STRIKE",
            4,
            "DEMONSTRATION",
            5,
            "ACCIDENT",
            6,
            "HOLIDAY",
            7,
            "WEATHER",
            8,
            "MAINTENANCE",
            9,
            "CONSTRUCTION",
            10,
            "POLICE_ACTIVITY",
            11,
            "MEDICAL_EMERGENCY",
            12
          ],
          "oneOf": [{ "type": "string" }, { "type": "integer" }],
          "title": "Cause",
          "description": "Cause of this alert."
        },
        "effect": {
          "enum": [
            "NO_SERVICE",
            1,
            "REDUCED_SERVICE",
            2,
            "SIGNIFICANT_DELAYS",
            3,
            "DETOUR",
            4,
            "ADDITIONAL_SERVICE",
            5,
            "MODIFIED_SERVICE",
            6,
            "OTHER_EFFECT",
            7,
            "UNKNOWN_EFFECT",
            8,
            "STOP_MOVED",
            9
          ],
          "oneOf": [{ "type": "string" }, { "type": "integer" }],
          "title": "Effect",
          "description": "What is the effect of this problem on the affected entity."
        },
        "url": {
          "$ref": "#/components/schemas/TranslatedString",
          "additionalProperties": true,
          "description": "The URL which provides additional information about the alert."
        },
        "header_text": {
          "$ref": "#/components/schemas/TranslatedString",
          "additionalProperties": true,
          "description": "Alert header. Contains a short summary of the alert text as plain-text."
        },
        "description_text": {
          "$ref": "#/components/schemas/TranslatedString",
          "additionalProperties": true,
          "description": "Full description for the alert as plain-text. The information in the description should add to the information of the header."
        }
      },
      "additionalProperties": true,
      "type": "object",
      "title": "Alert",
      "description": "An alert, indicating some sort of incident in the public transit network."
    }
    "EntitySelector": {
      "properties": {
        "agency_id": {
          "type": "string",
          "description": "The values of the fields should correspond to the appropriate fields in the GTFS feed. At least one specifier must be given. If several are given, then the matching has to apply to all the given specifiers."
        },
        "route_id": { "type": "string" },
        "route_type": {
          "type": "integer",
          "description": "corresponds to route_type in GTFS."
        },
        "trip": {
          "$ref": "#/components/schemas/TripDescriptor",
          "additionalProperties": true
        },
        "stop_id": { "type": "string" }
      },
      "additionalProperties": true,
      "type": "object",
      "title": "Entity Selector",
      "description": "A selector for an entity in a GTFS feed."
    }
    "FeedEntity": {
      "required": ["id"],
      "properties": {
        "id": {
          "type": "string",
          "description": "The ids are used only to provide incrementality support. The id should be unique within a FeedMessage. Consequent FeedMessages may contain FeedEntities with the same id. In case of a DIFFERENTIAL update the new FeedEntity with some id will replace the old FeedEntity with the same id (or delete it - see is_deleted below). The actual GTFS entities (e.g. stations, routes, trips) referenced by the feed must be specified by explicit selectors (see EntitySelector below for more info)."
        },
        "is_deleted": {
          "type": "boolean",
          "description": "Whether this entity is to be deleted. Relevant only for incremental fetches."
        },
        "trip_update": {
          "$ref": "#/components/schemas/TripUpdate",
          "additionalProperties": true,
          "description": "Data about the entity itself. Exactly one of the following fields must be present (unless the entity is being deleted)."
        },
        "vehicle": {
          "$ref": "#/components/schemas/VehiclePosition",
          "additionalProperties": true
        },
        "alert": {
          "$ref": "#/components/schemas/Alert",
          "additionalProperties": true
        }
      },
      "additionalProperties": true,
      "type": "object",
      "title": "Feed Entity",
      "description": "A definition (or update) of an entity in the transit feed."
    }
    "FeedHeader": {
      "required": ["gtfs_realtime_version"],
      "properties": {
        "gtfs_realtime_version": {
          "type": "string",
          "description": "Version of the feed specification. The current version is 2.0."
        },
        "incrementality": {
          "enum": ["FULL_DATASET", 0, "DIFFERENTIAL", 1],
          "oneOf": [{ "type": "string" }, { "type": "integer" }],
          "title": "Incrementality",
          "description": "Determines whether the current fetch is incremental.  Currently, DIFFERENTIAL mode is unsupported and behavior is unspecified for feeds that use this mode.  There are discussions on the GTFS Realtime mailing list around fully specifying the behavior of DIFFERENTIAL mode and the documentation will be updated when those discussions are finalized."
        },
        "timestamp": {
          "type": "string",
          "description": "This timestamp identifies the moment when the content of this feed has been created (in server time). In POSIX time (i.e., number of seconds since January 1st 1970 00:00:00 UTC)."
        }
      },
      "additionalProperties": true,
      "type": "object",
      "title": "Feed Header",
      "description": "Metadata about a feed, included in feed messages."
    }
    "Position": {
      "required": ["latitude", "longitude"],
      "properties": {
        "latitude": {
          "type": "number",
          "description": "Degrees North, in the WGS-84 coordinate system."
        },
        "longitude": {
          "type": "number",
          "description": "Degrees East, in the WGS-84 coordinate system."
        },
        "bearing": {
          "type": "number",
          "description": "Bearing, in degrees, clockwise from North, i.e., 0 is North and 90 is East. This can be the compass bearing, or the direction towards the next stop or intermediate location. This should not be direction deduced from the sequence of previous positions, which can be computed from previous data."
        },
        "odometer": {
          "type": "number",
          "description": "Odometer value, in meters."
        },
        "speed": {
          "type": "number",
          "description": "Momentary speed measured by the vehicle, in meters per second."
        }
      },
      "additionalProperties": true,
      "type": "object",
      "title": "Position",
      "description": "A position."
    }
    "TimeRange": {
      "properties": {
        "start": {
          "type": "string",
          "description": "Start time, in POSIX time (i.e., number of seconds since January 1st 1970 00:00:00 UTC). If missing, the interval starts at minus infinity."
        },
        "end": {
          "type": "string",
          "description": "End time, in POSIX time (i.e., number of seconds since January 1st 1970 00:00:00 UTC). If missing, the interval ends at plus infinity."
        }
      },
      "additionalProperties": true,
      "type": "object",
      "title": "Low level data structures used above.",
      "description": "Low level data structures used above.  A time interval. The interval is considered active at time 't' if 't' is greater than or equal to the start time and less than the end time."
    }
    "TranslatedString": {
      "properties": {
        "translation": {
          "items": {
            "$ref": "#/components/schemas/TranslatedString.Translation"
          },
          "type": "array",
          "description": "At least one translation must be provided."
        }
      },
      "additionalProperties": true,
      "type": "object",
      "title": "Translated String",
      "description": "An internationalized message containing per-language versions of a snippet of text or a URL. One of the strings from a message will be picked up. The resolution proceeds as follows: 1. If the UI language matches the language code of a translation,    the first matching translation is picked. 2. If a default UI language (e.g., English) matches the language code of a    translation, the first matching translation is picked. 3. If some translation has an unspecified language code, that translation is    picked."
    }
    "TranslatedString.Translation": {
      "required": ["text"],
      "properties": {
        "text": {
          "type": "string",
          "description": "A UTF-8 string containing the message."
        },
        "language": {
          "type": "string",
          "description": "BCP-47 language code. Can be omitted if the language is unknown or if no i18n is done at all for the feed. At most one translation is allowed to have an unspecified language tag."
        }
      },
      "additionalProperties": true,
      "type": "object",
      "title": "Translation"
    }
    "TripDescriptor": {
      "properties": {
        "trip_id": {
          "type": "string",
          "description": "The trip_id from the GTFS feed that this selector refers to. For non frequency-based trips, this field is enough to uniquely identify the trip. For frequency-based trip, start_time and start_date might also be necessary."
        },
        "route_id": {
          "type": "string",
          "description": "The route_id from the GTFS that this selector refers to."
        },
        "direction_id": {
          "type": "integer",
          "description": "The direction_id from the GTFS feed trips.txt file, indicating the direction of travel for trips this selector refers to. This field is still experimental, and subject to change. It may be formally adopted in the future."
        },
        "start_time": {
          "type": "string",
          "description": "The initially scheduled start time of this trip instance. When the trip_id corresponds to a non-frequency-based trip, this field should either be omitted or be equal to the value in the GTFS feed. When the trip_id corresponds to a frequency-based trip, the start_time must be specified for trip updates and vehicle positions. If the trip corresponds to exact_times=1 GTFS record, then start_time must be some multiple (including zero) of headway_secs later than frequencies.txt start_time for the corresponding time period. If the trip corresponds to exact_times=0, then its start_time may be arbitrary, and is initially expected to be the first departure of the trip. Once established, the start_time of this frequency-based trip should be considered immutable, even if the first departure time changes -- that time change may instead be reflected in a StopTimeUpdate. Format and semantics of the field is same as that of GTFS/frequencies.txt/start_time, e.g., 11:15:35 or 25:15:35."
        },
        "start_date": {
          "type": "string",
          "description": "The scheduled start date of this trip instance. Must be provided to disambiguate trips that are so late as to collide with a scheduled trip on a next day. For example, for a train that departs 8:00 and 20:00 every day, and is 12 hours late, there would be two distinct trips on the same time. This field can be provided but is not mandatory for schedules in which such collisions are impossible - for example, a service running on hourly schedule where a vehicle that is one hour late is not considered to be related to schedule anymore. In YYYYMMDD format."
        },
        "schedule_relationship": {
          "enum": ["SCHEDULED", 0, "ADDED", 1, "UNSCHEDULED", 2, "CANCELED", 3],
          "oneOf": [{ "type": "string" }, { "type": "integer" }],
          "title": "Schedule Relationship",
          "description": "The relation between this trip and the static schedule. If a trip is done in accordance with temporary schedule, not reflected in GTFS, then it shouldn't be marked as SCHEDULED, but likely as ADDED."
        }
      },
      "additionalProperties": true,
      "type": "object",
      "title": "Trip Descriptor",
      "description": "A descriptor that identifies an instance of a GTFS trip, or all instances of a trip along a route. - To specify a single trip instance, the trip_id (and if necessary,   start_time) is set. If route_id is also set, then it should be same as one   that the given trip corresponds to. - To specify all the trips along a given route, only the route_id should be   set. Note that if the trip_id is not known, then stop sequence ids in   TripUpdate are not sufficient, and stop_ids must be provided as well. In   addition, absolute arrival/departure times must be provided."
    }
    "TripUpdate": {
      "required": ["trip"],
      "properties": {
        "trip": {
          "$ref": "#/components/schemas/TripDescriptor",
          "additionalProperties": false,
          "description": "The Trip that this message applies to. There can be at most one TripUpdate entity for each actual trip instance. If there is none, that means there is no prediction information available. It does *not* mean that the trip is progressing according to schedule."
        },
        "vehicle": {
          "$ref": "#/components/schemas/VehicleDescriptor",
          "additionalProperties": true,
          "description": "Additional information on the vehicle that is serving this trip."
        },
        "stop_time_update": {
          "items": {
            "$ref": "#/components/schemas/TripUpdate.StopTimeUpdate"
          },
          "type": "array",
          "description": "Updates to StopTimes for the trip (both future, i.e., predictions, and in some cases, past ones, i.e., those that already happened). The updates must be sorted by stop_sequence, and apply for all the following stops of the trip up to the next specified one. Example 1: For a trip with 20 stops, a StopTimeUpdate with arrival delay and departure delay of 0 for stop_sequence of the current stop means that the trip is exactly on time. Example 2: For the same trip instance, 3 StopTimeUpdates are provided: - delay of 5 min for stop_sequence 3 - delay of 1 min for stop_sequence 8 - delay of unspecified duration for stop_sequence 10 This will be interpreted as: - stop_sequences 3,4,5,6,7 have delay of 5 min. - stop_sequences 8,9 have delay of 1 min. - stop_sequences 10,... have unknown delay."
        },
        "timestamp": {
          "type": "string",
          "description": "Moment at which the vehicle's real-time progress was measured. In POSIX time (i.e., the number of seconds since January 1st 1970 00:00:00 UTC)."
        },
        "delay": {
          "type": "integer",
          "description": "The current schedule deviation for the trip.  Delay should only be specified when the prediction is given relative to some existing schedule in GTFS. Delay (in seconds) can be positive (meaning that the vehicle is late) or negative (meaning that the vehicle is ahead of schedule). Delay of 0 means that the vehicle is exactly on time. Delay information in StopTimeUpdates take precedent of trip-level delay information, such that trip-level delay is only propagated until the next stop along the trip with a StopTimeUpdate delay value specified. Feed providers are strongly encouraged to provide a TripUpdate.timestamp value indicating when the delay value was last updated, in order to evaluate the freshness of the data. NOTE: This field is still experimental, and subject to change. It may be formally adopted in the future."
        }
      },
      "additionalProperties": true,
      "type": "object",
      "title": "Entities used in the feed.",
      "description": "Entities used in the feed.  Realtime update of the progress of a vehicle along a trip. Depending on the value of ScheduleRelationship, a TripUpdate can specify: - A trip that proceeds along the schedule. - A trip that proceeds along a route but has no fixed schedule. - A trip that have been added or removed with regard to schedule. The updates can be for future, predicted arrival/departure events, or for past events that already occurred. Normally, updates should get more precise and more certain (see uncertainty below) as the events gets closer to current time. Even if that is not possible, the information for past events should be precise and certain. In particular, if an update points to time in the past but its update's uncertainty is not 0, the client should conclude that the update is a (wrong) prediction and that the trip has not completed yet. Note that the update can describe a trip that is already completed. To this end, it is enough to provide an update for the last stop of the trip. If the time of that is in the past, the client will conclude from that that the whole trip is in the past (it is possible, although inconsequential, to also provide updates for preceding stops). This option is most relevant for a trip that has completed ahead of schedule, but according to the schedule, the trip is still proceeding at the current time. Removing the updates for this trip could make the client assume that the trip is still proceeding. Note that the feed provider is allowed, but not required, to purge past updates - this is one case where this would be practically useful."
    }
    "TripUpdate.StopTimeEvent": {
      "properties": {
        "delay": {
          "type": "integer",
          "description": "Delay (in seconds) can be positive (meaning that the vehicle is late) or negative (meaning that the vehicle is ahead of schedule). Delay of 0 means that the vehicle is exactly on time."
        },
        "time": {
          "type": "string",
          "description": "Event as absolute time. In Unix time (i.e., number of seconds since January 1st 1970 00:00:00 UTC)."
        },
        "uncertainty": {
          "type": "integer",
          "description": "If uncertainty is omitted, it is interpreted as unknown. If the prediction is unknown or too uncertain, the delay (or time) field should be empty. In such case, the uncertainty field is ignored. To specify a completely certain prediction, set its uncertainty to 0."
        }
      },
      "additionalProperties": true,
      "type": "object",
      "title": "Stop Time Event",
      "description": "Timing information for a single predicted event (either arrival or departure). Timing consists of delay and/or estimated time, and uncertainty. - delay should be used when the prediction is given relative to some   existing schedule in GTFS. - time should be given whether there is a predicted schedule or not. If   both time and delay are specified, time will take precedence   (although normally, time, if given for a scheduled trip, should be   equal to scheduled time in GTFS + delay). Uncertainty applies equally to both time and delay. The uncertainty roughly specifies the expected error in true delay (but note, we don't yet define its precise statistical meaning). It's possible for the uncertainty to be 0, for example for trains that are driven under computer timing control."
    }
    "TripUpdate.StopTimeUpdate": {
      "properties": {
        "stop_sequence": {
          "type": "integer",
          "description": "Must be the same as in stop_times.txt in the corresponding GTFS feed."
        },
        "stop_id": {
          "type": "string",
          "description": "Must be the same as in stops.txt in the corresponding GTFS feed."
        },
        "arrival": {
          "$ref": "#/components/schemas/TripUpdate.StopTimeEvent",
          "additionalProperties": true
        },
        "departure": {
          "$ref": "#/components/schemas/TripUpdate.StopTimeEvent",
          "additionalProperties": true
        },
        "schedule_relationship": {
          "enum": ["SCHEDULED", 0, "SKIPPED", 1, "NO_DATA", 2],
          "oneOf": [{ "type": "string" }, { "type": "integer" }],
          "title": "Schedule Relationship",
          "description": "The relation between this StopTime and the static schedule."
        }
      },
      "additionalProperties": true,
      "type": "object",
      "title": "Stop Time Update",
      "description": "Realtime update for arrival and/or departure events for a given stop on a trip. Updates can be supplied for both past and future events. The producer is allowed, although not required, to drop past events.  The update is linked to a specific stop either through stop_sequence or stop_id, so one of the fields below must necessarily be set. See the documentation in TripDescriptor for more information."
    }
    "VehicleDescriptor": {
      "properties": {
        "id": {
          "type": "string",
          "description": "Internal system identification of the vehicle. Should be unique per vehicle, and can be used for tracking the vehicle as it proceeds through the system."
        },
        "label": {
          "type": "string",
          "description": "User visible label, i.e., something that must be shown to the passenger to help identify the correct vehicle."
        },
        "license_plate": {
          "type": "string",
          "description": "The license plate of the vehicle."
        }
      },
      "additionalProperties": true,
      "type": "object",
      "title": "Vehicle Descriptor",
      "description": "Identification information for the vehicle performing the trip."
    }
    "VehiclePosition": {
      "properties": {
        "trip": {
          "$ref": "#/components/schemas/TripDescriptor",
          "additionalProperties": true,
          "description": "The Trip that this vehicle is serving. Can be empty or partial if the vehicle can not be identified with a given trip instance."
        },
        "vehicle": {
          "$ref": "#/components/schemas/VehicleDescriptor",
          "additionalProperties": true,
          "description": "Additional information on the vehicle that is serving this trip."
        },
        "position": {
          "$ref": "#/components/schemas/Position",
          "additionalProperties": true,
          "description": "Current position of this vehicle."
        },
        "current_stop_sequence": {
          "type": "integer",
          "description": "The stop sequence index of the current stop. The meaning of current_stop_sequence (i.e., the stop that it refers to) is determined by current_status. If current_status is missing IN_TRANSIT_TO is assumed."
        },
        "stop_id": {
          "type": "string",
          "description": "Identifies the current stop. The value must be the same as in stops.txt in the corresponding GTFS feed."
        },
        "current_status": {
          "enum": ["INCOMING_AT", 0, "STOPPED_AT", 1, "IN_TRANSIT_TO", 2],
          "oneOf": [{ "type": "string" }, { "type": "integer" }],
          "title": "Vehicle Stop Status"
        },
        "timestamp": {
          "type": "string",
          "description": "Moment at which the vehicle's position was measured. In POSIX time (i.e., number of seconds since January 1st 1970 00:00:00 UTC)."
        },
        "congestion_level": {
          "enum": [
            "UNKNOWN_CONGESTION_LEVEL",
            0,
            "RUNNING_SMOOTHLY",
            1,
            "STOP_AND_GO",
            2,
            "CONGESTION",
            3,
            "SEVERE_CONGESTION",
            4
          ],
          "oneOf": [{ "type": "string" }, { "type": "integer" }],
          "title": "Congestion Level",
          "description": "Congestion level that is affecting this vehicle."
        },
        "occupancy_status": {
          "enum": [
            "EMPTY",
            0,
            "MANY_SEATS_AVAILABLE",
            1,
            "FEW_SEATS_AVAILABLE",
            2,
            "STANDING_ROOM_ONLY",
            3,
            "CRUSHED_STANDING_ROOM_ONLY",
            4,
            "FULL",
            5,
            "NOT_ACCEPTING_PASSENGERS",
            6
          ],
          "oneOf": [{ "type": "string" }, { "type": "integer" }],
          "title": "Occupancy Status",
          "description": "The degree of passenger occupancy of the vehicle. This field is still experimental, and subject to change. It may be formally adopted in the future."
        }
      },
      "additionalProperties": true,
      "type": "object",
      "title": "Vehicle Position",
      "description": "Realtime positioning information for a given vehicle."
    }
