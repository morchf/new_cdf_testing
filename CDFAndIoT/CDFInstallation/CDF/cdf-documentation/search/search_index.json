{
    "docs": [
        {
            "location": "/", 
            "text": "CONNECTED DEVICE FRAMEWORK (CDF)\n\n\nThis documentation is split into multiple tracks... \nBeginner\n, \nIntermediate\n, and \nAdvanced\n.\n\n\nIf you are a user wanting to use or review the CDF platform, follow the \nBeginner\n topics.\n\n\nIf you are a developer who wishes to dive a little deeper into how CDF is built, follow the \nIntermediate\n topics.\n\n\nIf you are a developer who is interested in making changes and contributing back to the CDF platform, follow the \nAdvanced\n topics.\n\n\nWhere to from here?\n\n\nFirst, read the \nCDF overview\n, then follow one of the tracks described below:\n\n\n\n\n\n\n\n\nTrack\n\n\nTopic\n\n\n\n\n\n\n\n\n\n\nBeginner\n\n\nStart here\n\n\n\n\n\n\nIntermediate\n\n\nStart here\n\n\n\n\n\n\nAdvanced\n\n\nStart here", 
            "title": "CONNECTED DEVICE FRAMEWORK (CDF)"
        }, 
        {
            "location": "/#connected-device-framework-cdf", 
            "text": "This documentation is split into multiple tracks...  Beginner ,  Intermediate , and  Advanced .  If you are a user wanting to use or review the CDF platform, follow the  Beginner  topics.  If you are a developer who wishes to dive a little deeper into how CDF is built, follow the  Intermediate  topics.  If you are a developer who is interested in making changes and contributing back to the CDF platform, follow the  Advanced  topics.", 
            "title": "CONNECTED DEVICE FRAMEWORK (CDF)"
        }, 
        {
            "location": "/#where-to-from-here", 
            "text": "First, read the  CDF overview , then follow one of the tracks described below:     Track  Topic      Beginner  Start here    Intermediate  Start here    Advanced  Start here", 
            "title": "Where to from here?"
        }, 
        {
            "location": "/advanced/cicd/", 
            "text": "CI/CD\n\n\nIntroduction\n\n\nThe CDF core services are compiled, tested, and deployed, via a single CodePipeline CI/CD pipeline.\n\n\nDeployment of Pipeline\n\n\nThe pipeline is deployed using the \n{cdf-core}/cicd/deploy-cicd-pipeline.bash\n script.  Run the script with no arguments to view the help on the possible arguments:\n\n\ncdf-core\n cicd/deploy-cicd-pipeline.bash\n\nNAME\n    deploy-cicd-pipeline.bash\n\nDESCRIPTION\n    Deploys the CICD pipeline.\n\nMANDATORY ARGUMENTS:\n  -b \n(\nstring\n)\n   The name of the S3 bucket to deploy CloudFormation templates to.\n  -d \n(\nstring\n)\n   The name of the S3 bucket to deploy cdf core documentation to.\n  -I \n(\nstring\n)\n   Name of repo of cdf-infrastructure-* project\n  -e \n(\nstring\n)\n   Name of environment.\n\nOPTIONAL ARGUMENTS\n  -r \n(\nstring\n)\n   Name of CodeCommit repo \n(\ndefaults to cdf-core\n)\n.\n  -g \n(\nstring\n)\n   Name of git branch \n(\ndefaults to master\n)\n.\n  -h \n(\nstring\n)\n   Name of cdf-infrastructure-* git branch \n(\ndefaults to master\n)\n.\n\n  -N \n(\nflag\n)\n     Use an existing VPC instead of creating a new one\n  -m \n(\nstring\n)\n   Asset library mode - \nfull\n or \nlite\n.  Defaults to \nfull\n\n  -v \n(\nstring\n)\n   Id of VPC where Neptune resides \n(\nif\n running Asset Library in \nfull\n mode\n)\n\n  -s \n(\nstring\n)\n   Id of security group with access to Neptune \n(\nif\n running Asset Library in \nfull\n mode\n)\n\n  -n \n(\nstring\n)\n   Id of private subnets where Neptune resides \n(\nif\n running Asset Library in \nfull\n mode\n)\n\n  -t \n(\nstring\n)\n   Id of private route table ids where Neptune resides \n(\nif\n running Asset Library in \nfull\n mode\n)\n\n\n  -p \n(\nstring\n)\n   The name of the key pair to use to deploy the Bastion EC2 host.\n  -o \n(\nstring\n)\n   ID of public subnets \n(\ncomma delimited\n)\n to deploy the Bastion into \n(\nrequired \nif\n -N set, and Asset Library \nfull\n mode\n)\n\n  -i \n(\nstring\n)\n   The remote access CIDR to configure Bastion SSH access \n(\ne.g. \n1\n.2.3.4/32\n)\n.\n  -k \n(\nstring\n)\n   The KMS Key id that the provisoning service will use to decrypt sensitive information.  If not provided, a new KMS key with the \nalias\n \ncdf\n is created.\n\n  -a \n(\nstring\n)\n   Name of custom auth cloudformation stack \n(\nif\n running with custom auth enabled\n)\n\n\n  -R \n(\nstring\n)\n   AWS region.\n  -P \n(\nstring\n)\n   AWS profile.\n\n\n\n\nAs the CI/CD pipeline deploys the entire CDF core services, it needs the same parameters as what is used to deploy the core CDF services into an account.\n\n\nImplementation\n\n\nThe CodePipeline in constructed of a number of stages (CodeBuild projects), with each stage having a number of steps (CodeBuild phases).  Each of these steps executes a script as follows:\n\n\nsource\n stage\n\n\nClones the main \ncdf-core\n monorepo along with an \ninfrastructure\n project as specified by the \n-I\n parameter of the deployment script.\n\n\nfilter-commits stage\n\n\ninstall step:  \ncicd/filterproject_install.bash\n\n\nWhen CodePipeline uses CodeCommit as its source, it provides a snapshot of the latest version of the codebase instead of providing the git repository itself.  As we need tag the git repository downstream in the pipeline, this script configures the cdf-core source as a git repository by replacing the source with a cloned version of the real git repository.\n\n\npre_build step:  \ncicd/filterproject_prebuild.bash\n\n\nWe do not want the CI/CD codepipline to process all commits.  One such example being when the pipeline itself commits an update to a version number we need to ignore it as as we don't end up in a loop.  This step retrieves the latest git commit message, and ignores the build by failing the build if the message contains the text \n[skip ci]'\n.\n\n\nbuild stage\n\n\ninstall step:  \ncicd/buildproject_install.bash\n\n\nInstalls the \n[pnpm](https://pnpm.js.org)\n package manager.\n\n\npre_build step:  \ncicd/buildproject_prebuild.bash\n\n\nInstalls project dependencies.\n\n\nbuild step:  \ncicd/buildproject_build.bash\n\n\nBuilds all projects, followed by running all unit tests.\n\n\npost_build step:  \ncicd/buildproject_postbuild.bash\n\n\nIf unit tests were successful, a semantic release of all changed projects is performed by analyzing all the git commit messages since the last install.  Any updated version numbers are committed back to the git code repo.  All services are then bundled ready for deploy.\n\n\ndeploy_staging stage\n\n\ninstall step:  \ncicd/deployproject_install.bash\n\n\nDownloads and installs \n[jq](https://stedolan.github.io/jq/)\n, \n[mkdocs](https://www.mkdocs.org)\n and any related mkdoc plugins.\n\n\nbuild step:  \ncicd/deployproject_build.bash\n\n\nBuilds and executes the main \ninfrastructure/deploy-core.bash\n script to deploy all updated services to the staging environment.\n\n\npost_build step:  \ncicd/deployproject_postbuild.bash\n\n\nTags the staging release.\n\n\nintegration-tests stage\n\n\ninstall step:  \ncicd/integrationtestsproject_install.bash\n\n\nInstalls \n[jq](https://stedolan.github.io/jq/)\n and \n[pnpm](https://pnpm.js.org)\n.\n\n\npre_build step:  \ncicd/integrationtestsproject_prebuild.bash\n\n\nInstalls project dependencies.\n\n\nbuild step:  \ncicd/integrationtestsproject_build.bash\n\n\nRuns the integration tests against the deployed staging environment.\n\n\ndeploy_live stage\n\n\ninstall step:  \ncicd/deployproject_install.bash\n\n\nDownloads and installs \n[jq](https://stedolan.github.io/jq/)\n, \n[mkdocs](https://www.mkdocs.org)\n and any related mkdoc plugins.\n\n\nbuild step:  \ncicd/deployproject_build.bash\n\n\nBuilds and executes the main \ninfrastructure/deploy-core.bash\n script to deploy all updated services to the live environment.\n\n\npost_build step:  \ncicd/deployproject_postbuild.bash\n\n\nTags the live release, as well as publishing all artifacts to S3.", 
            "title": "CI/CD"
        }, 
        {
            "location": "/advanced/cicd/#cicd", 
            "text": "", 
            "title": "CI/CD"
        }, 
        {
            "location": "/advanced/cicd/#introduction", 
            "text": "The CDF core services are compiled, tested, and deployed, via a single CodePipeline CI/CD pipeline.", 
            "title": "Introduction"
        }, 
        {
            "location": "/advanced/cicd/#deployment-of-pipeline", 
            "text": "The pipeline is deployed using the  {cdf-core}/cicd/deploy-cicd-pipeline.bash  script.  Run the script with no arguments to view the help on the possible arguments:  cdf-core  cicd/deploy-cicd-pipeline.bash\n\nNAME\n    deploy-cicd-pipeline.bash\n\nDESCRIPTION\n    Deploys the CICD pipeline.\n\nMANDATORY ARGUMENTS:\n  -b  ( string )    The name of the S3 bucket to deploy CloudFormation templates to.\n  -d  ( string )    The name of the S3 bucket to deploy cdf core documentation to.\n  -I  ( string )    Name of repo of cdf-infrastructure-* project\n  -e  ( string )    Name of environment.\n\nOPTIONAL ARGUMENTS\n  -r  ( string )    Name of CodeCommit repo  ( defaults to cdf-core ) .\n  -g  ( string )    Name of git branch  ( defaults to master ) .\n  -h  ( string )    Name of cdf-infrastructure-* git branch  ( defaults to master ) .\n\n  -N  ( flag )      Use an existing VPC instead of creating a new one\n  -m  ( string )    Asset library mode -  full  or  lite .  Defaults to  full \n  -v  ( string )    Id of VPC where Neptune resides  ( if  running Asset Library in  full  mode ) \n  -s  ( string )    Id of security group with access to Neptune  ( if  running Asset Library in  full  mode ) \n  -n  ( string )    Id of private subnets where Neptune resides  ( if  running Asset Library in  full  mode ) \n  -t  ( string )    Id of private route table ids where Neptune resides  ( if  running Asset Library in  full  mode ) \n\n  -p  ( string )    The name of the key pair to use to deploy the Bastion EC2 host.\n  -o  ( string )    ID of public subnets  ( comma delimited )  to deploy the Bastion into  ( required  if  -N set, and Asset Library  full  mode ) \n  -i  ( string )    The remote access CIDR to configure Bastion SSH access  ( e.g.  1 .2.3.4/32 ) .\n  -k  ( string )    The KMS Key id that the provisoning service will use to decrypt sensitive information.  If not provided, a new KMS key with the  alias   cdf  is created.\n\n  -a  ( string )    Name of custom auth cloudformation stack  ( if  running with custom auth enabled ) \n\n  -R  ( string )    AWS region.\n  -P  ( string )    AWS profile.  As the CI/CD pipeline deploys the entire CDF core services, it needs the same parameters as what is used to deploy the core CDF services into an account.", 
            "title": "Deployment of Pipeline"
        }, 
        {
            "location": "/advanced/cicd/#implementation", 
            "text": "The CodePipeline in constructed of a number of stages (CodeBuild projects), with each stage having a number of steps (CodeBuild phases).  Each of these steps executes a script as follows:", 
            "title": "Implementation"
        }, 
        {
            "location": "/advanced/cicd/#source-stage", 
            "text": "Clones the main  cdf-core  monorepo along with an  infrastructure  project as specified by the  -I  parameter of the deployment script.", 
            "title": "source stage"
        }, 
        {
            "location": "/advanced/cicd/#filter-commits-stage", 
            "text": "", 
            "title": "filter-commits stage"
        }, 
        {
            "location": "/advanced/cicd/#install-step-cicdfilterproject_installbash", 
            "text": "When CodePipeline uses CodeCommit as its source, it provides a snapshot of the latest version of the codebase instead of providing the git repository itself.  As we need tag the git repository downstream in the pipeline, this script configures the cdf-core source as a git repository by replacing the source with a cloned version of the real git repository.", 
            "title": "install step:  cicd/filterproject_install.bash"
        }, 
        {
            "location": "/advanced/cicd/#pre_build-step-cicdfilterproject_prebuildbash", 
            "text": "We do not want the CI/CD codepipline to process all commits.  One such example being when the pipeline itself commits an update to a version number we need to ignore it as as we don't end up in a loop.  This step retrieves the latest git commit message, and ignores the build by failing the build if the message contains the text  [skip ci]' .", 
            "title": "pre_build step:  cicd/filterproject_prebuild.bash"
        }, 
        {
            "location": "/advanced/cicd/#build-stage", 
            "text": "", 
            "title": "build stage"
        }, 
        {
            "location": "/advanced/cicd/#install-step-cicdbuildproject_installbash", 
            "text": "Installs the  [pnpm](https://pnpm.js.org)  package manager.", 
            "title": "install step:  cicd/buildproject_install.bash"
        }, 
        {
            "location": "/advanced/cicd/#pre_build-step-cicdbuildproject_prebuildbash", 
            "text": "Installs project dependencies.", 
            "title": "pre_build step:  cicd/buildproject_prebuild.bash"
        }, 
        {
            "location": "/advanced/cicd/#build-step-cicdbuildproject_buildbash", 
            "text": "Builds all projects, followed by running all unit tests.", 
            "title": "build step:  cicd/buildproject_build.bash"
        }, 
        {
            "location": "/advanced/cicd/#post_build-step-cicdbuildproject_postbuildbash", 
            "text": "If unit tests were successful, a semantic release of all changed projects is performed by analyzing all the git commit messages since the last install.  Any updated version numbers are committed back to the git code repo.  All services are then bundled ready for deploy.", 
            "title": "post_build step:  cicd/buildproject_postbuild.bash"
        }, 
        {
            "location": "/advanced/cicd/#deploy_staging-stage", 
            "text": "", 
            "title": "deploy_staging stage"
        }, 
        {
            "location": "/advanced/cicd/#install-step-cicddeployproject_installbash", 
            "text": "Downloads and installs  [jq](https://stedolan.github.io/jq/) ,  [mkdocs](https://www.mkdocs.org)  and any related mkdoc plugins.", 
            "title": "install step:  cicd/deployproject_install.bash"
        }, 
        {
            "location": "/advanced/cicd/#build-step-cicddeployproject_buildbash", 
            "text": "Builds and executes the main  infrastructure/deploy-core.bash  script to deploy all updated services to the staging environment.", 
            "title": "build step:  cicd/deployproject_build.bash"
        }, 
        {
            "location": "/advanced/cicd/#post_build-step-cicddeployproject_postbuildbash", 
            "text": "Tags the staging release.", 
            "title": "post_build step:  cicd/deployproject_postbuild.bash"
        }, 
        {
            "location": "/advanced/cicd/#integration-tests-stage", 
            "text": "", 
            "title": "integration-tests stage"
        }, 
        {
            "location": "/advanced/cicd/#install-step-cicdintegrationtestsproject_installbash", 
            "text": "Installs  [jq](https://stedolan.github.io/jq/)  and  [pnpm](https://pnpm.js.org) .", 
            "title": "install step:  cicd/integrationtestsproject_install.bash"
        }, 
        {
            "location": "/advanced/cicd/#pre_build-step-cicdintegrationtestsproject_prebuildbash", 
            "text": "Installs project dependencies.", 
            "title": "pre_build step:  cicd/integrationtestsproject_prebuild.bash"
        }, 
        {
            "location": "/advanced/cicd/#build-step-cicdintegrationtestsproject_buildbash", 
            "text": "Runs the integration tests against the deployed staging environment.", 
            "title": "build step:  cicd/integrationtestsproject_build.bash"
        }, 
        {
            "location": "/advanced/cicd/#deploy_live-stage", 
            "text": "", 
            "title": "deploy_live stage"
        }, 
        {
            "location": "/advanced/cicd/#install-step-cicddeployproject_installbash_1", 
            "text": "Downloads and installs  [jq](https://stedolan.github.io/jq/) ,  [mkdocs](https://www.mkdocs.org)  and any related mkdoc plugins.", 
            "title": "install step:  cicd/deployproject_install.bash"
        }, 
        {
            "location": "/advanced/cicd/#build-step-cicddeployproject_buildbash_1", 
            "text": "Builds and executes the main  infrastructure/deploy-core.bash  script to deploy all updated services to the live environment.", 
            "title": "build step:  cicd/deployproject_build.bash"
        }, 
        {
            "location": "/advanced/cicd/#post_build-step-cicddeployproject_postbuildbash_1", 
            "text": "Tags the live release, as well as publishing all artifacts to S3.", 
            "title": "post_build step:  cicd/deployproject_postbuild.bash"
        }, 
        {
            "location": "/advanced/deployment/", 
            "text": "Deployment\n\n\nTL;DR\n\n\nEnsure you have installed the necessary \npre-reqs\n to configure your environment.\n\n\nThe cdf releases are available from S3 for installation.  The core services and clients are released as two separate packages so as to reduce the download size for those only interested in consuming the clients. Retrieve a list of the available releases as follows:\n\n\n aws s3 ls s3://cdf-157731826412-us-west-2/releases/core/\n\n\n2019\n-03-16 \n16\n:27:33  \n343978991\n cdf-core-##############.tar\n\n\n\n aws s3 ls s3://cdf-157731826412-us-west-2/releases/clients/\n\n\n2019\n-03-16 \n16\n:27:33  \n343978991\n cdf-clients-##############.tar\n\n\n\n\nDownload and extract the core and clients releases using the name of the file from the previous step:\n\n\n aws s3 cp s3://cdf-157731826412-us-west-2/releases/core/cdf-core-##############.tar .\n\n mkdir cdf-core\n\n tar -xf cdf-core-##############.tar -C cdf-core\n\n\n aws s3 cp s3://cdf-157731826412-us-west-2/releases/clients/cdf-clients-##############.tar .\n\n mkdir cdf-clients\n\n tar -xf cdf-clients-##############.tar -C cdf-clients\n\n\n\n\nAlong with the \ncdf-core\n and \ncdf-clients\n release packages, an \ninfrastructure\n and \nfacade\n project need cloning to the same parent directory.  The following is an example of how to clone the cdf demo projects:\n\n\n git clone https://git-codecommit.us-west-2.amazonaws.com/v1/repos/cdf-facade-demo\n\n git clone https://git-codecommit.us-west-2.amazonaws.com/v1/repos/cdf-infrastructure-demo\n\n\n\n\nThe \ninfrastructure\n project contains configuration which is used during the deploy. This configuration is separated into folders by service. The configuration file used is dependent on the environment parameter passed into the deploy command (see below). Some of the configuration values are automatically populated during the deployment. For instance AWS IoT Endpoint and endpoints of CDF services. However, the S3 bucket configuration is not auto populated and needs to be configured before the first deployment.\n\n\nEdit the S3 bucket values in the configuration files to match the S3 bucket in the AWS account used for the deploy. Below is an example of the bulkcertificates file however multiple configuration files need to be updated including:\n\n\n\n\nbulkcerts\n\n\ncertificateactivator\n\n\ncertificatevendor\n\n\ncommands\n\n\nprovisioning\n\n\n\n\n(cdf-infrastructure-demo/bulkcertificates/demo-config.json)\n\n\n{\n\n  \naws\n:\n \n{\n\n    \ns3\n:\n \n{\n\n      \ncertificates\n:\n \n{\n\n        \nbucket\n:\n \nUPDATE THIS TO MATCH THE DESIRED BUCKET IN THE DEPLOYMENT AWS ACCOUNT\n,\n\n        \nprefix\n:\n \ncertificates/\n\n      \n}\n\n    \n}\n\n  \n}\n\n\n}\n\n\n\n\n\nTo install, run the \ndeploy.bash\n script from the \ninfrastructure\n project:\n\n\n \ncd\n cdf-infrastructure-demo\ncdf-infrastructure-demo\n ./deploy.bash -C -e demo -p \n157731826412\n -i \n0\n.0.0.0/0 -u cdf-157721836412-us-west-2 -b cdf-157721836412-us-west-2 -R us-west-2 -P \n1577\n\n\n\n\n\nFor a description of the arguments of the above script, run the script with no arguments as follows:\n\n\ncdf-infrastructure-demo\n ./deploy.bash\n\n\n\n\nInstalling Prequisites\n\n\nThe following is a one-time setup to configure an environment for development and/or deployment:\n\n\n\n\nensure you have a \ngit client\n installed\n\n\ninstall \nNode Version Manager\n:\n\n\n\n\ncurl -o- https://raw.githubusercontent.com/creationix/nvm/v0.34.0/install.sh \n|\n bash\n\n\n\n\n\n\nusing nvm installed from the previous step, install Node.js v8.10:\n\n\n\n\n nvm use v8.10\n\n\n\n\n\n\ninstall \npnpm\n package manager:\n\n\n\n\n npm install -g pnpm\n\n\n\n\nFAQ\n\n\nI'm trying to run the \naws s3\n commands but it reports \nAccess Denied\nYour account must have access to the S3 bucket where the cdf-core releases are stored (currently bucket \ncdf-157731826412-us-west-2\n located within account \n1577-3182-6412\n).  Do you have multiple accounts configured on your computer?  If so, you may need to indicate the specific profile to use by setting the \n--profile\n attribute.", 
            "title": "Deployment"
        }, 
        {
            "location": "/advanced/deployment/#deployment", 
            "text": "", 
            "title": "Deployment"
        }, 
        {
            "location": "/advanced/deployment/#tldr", 
            "text": "Ensure you have installed the necessary  pre-reqs  to configure your environment.  The cdf releases are available from S3 for installation.  The core services and clients are released as two separate packages so as to reduce the download size for those only interested in consuming the clients. Retrieve a list of the available releases as follows:   aws s3 ls s3://cdf-157731826412-us-west-2/releases/core/ 2019 -03-16  16 :27:33   343978991  cdf-core-##############.tar  aws s3 ls s3://cdf-157731826412-us-west-2/releases/clients/ 2019 -03-16  16 :27:33   343978991  cdf-clients-##############.tar  Download and extract the core and clients releases using the name of the file from the previous step:   aws s3 cp s3://cdf-157731826412-us-west-2/releases/core/cdf-core-##############.tar .  mkdir cdf-core  tar -xf cdf-core-##############.tar -C cdf-core  aws s3 cp s3://cdf-157731826412-us-west-2/releases/clients/cdf-clients-##############.tar .  mkdir cdf-clients  tar -xf cdf-clients-##############.tar -C cdf-clients  Along with the  cdf-core  and  cdf-clients  release packages, an  infrastructure  and  facade  project need cloning to the same parent directory.  The following is an example of how to clone the cdf demo projects:   git clone https://git-codecommit.us-west-2.amazonaws.com/v1/repos/cdf-facade-demo  git clone https://git-codecommit.us-west-2.amazonaws.com/v1/repos/cdf-infrastructure-demo  The  infrastructure  project contains configuration which is used during the deploy. This configuration is separated into folders by service. The configuration file used is dependent on the environment parameter passed into the deploy command (see below). Some of the configuration values are automatically populated during the deployment. For instance AWS IoT Endpoint and endpoints of CDF services. However, the S3 bucket configuration is not auto populated and needs to be configured before the first deployment.  Edit the S3 bucket values in the configuration files to match the S3 bucket in the AWS account used for the deploy. Below is an example of the bulkcertificates file however multiple configuration files need to be updated including:   bulkcerts  certificateactivator  certificatevendor  commands  provisioning   (cdf-infrastructure-demo/bulkcertificates/demo-config.json)  { \n   aws :   { \n     s3 :   { \n       certificates :   { \n         bucket :   UPDATE THIS TO MATCH THE DESIRED BUCKET IN THE DEPLOYMENT AWS ACCOUNT , \n         prefix :   certificates/ \n       } \n     } \n   }  }   To install, run the  deploy.bash  script from the  infrastructure  project:    cd  cdf-infrastructure-demo\ncdf-infrastructure-demo  ./deploy.bash -C -e demo -p  157731826412  -i  0 .0.0.0/0 -u cdf-157721836412-us-west-2 -b cdf-157721836412-us-west-2 -R us-west-2 -P  1577   For a description of the arguments of the above script, run the script with no arguments as follows:  cdf-infrastructure-demo  ./deploy.bash", 
            "title": "TL;DR"
        }, 
        {
            "location": "/advanced/deployment/#installing-prequisites", 
            "text": "The following is a one-time setup to configure an environment for development and/or deployment:   ensure you have a  git client  installed  install  Node Version Manager :   curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.34.0/install.sh  |  bash   using nvm installed from the previous step, install Node.js v8.10:    nvm use v8.10   install  pnpm  package manager:    npm install -g pnpm", 
            "title": "Installing Prequisites"
        }, 
        {
            "location": "/advanced/deployment/#faq", 
            "text": "I'm trying to run the  aws s3  commands but it reports  Access Denied Your account must have access to the S3 bucket where the cdf-core releases are stored (currently bucket  cdf-157731826412-us-west-2  located within account  1577-3182-6412 ).  Do you have multiple accounts configured on your computer?  If so, you may need to indicate the specific profile to use by setting the  --profile  attribute.", 
            "title": "FAQ"
        }, 
        {
            "location": "/advanced/", 
            "text": "Advanced Track\n\n\n\n\n\n\n\n\nTopic\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nDeployment\n\n\nHow to use deploy the CDF core services.\n\n\n\n\n\n\nCI/CD\n\n\nDetails of how to deploy the CI/CD pipeline, along with information on its implementation.", 
            "title": "Advanced Track"
        }, 
        {
            "location": "/advanced/#advanced-track", 
            "text": "Topic  Description      Deployment  How to use deploy the CDF core services.    CI/CD  Details of how to deploy the CI/CD pipeline, along with information on its implementation.", 
            "title": "Advanced Track"
        }, 
        {
            "location": "/beginner/", 
            "text": "Beginner Track\n\n\nOverview\n\n\n\n\n\n\n\n\nTopic\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nHigh Level Overview\n\n\nThe big picture of CDF.\n\n\n\n\n\n\nPostman\n\n\nA Postman collection providing examples of how to call the CDF (Core) services.\n\n\n\n\n\n\n\n\nAsset Library Service\n\n\n\n\n\n\n\n\nTopic\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nOverview\n\n\nAn overview of the \nasset library\n service.\n\n\n\n\n\n\nTemplates (User)\n\n\nHow to configure device/group templates.\n\n\n\n\n\n\n\n\nAsset Library History Service\n\n\n\n\n\n\n\n\nTopic\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nOverview\n\n\nAn overview of the \nasset library history\n service.\n\n\n\n\n\n\n\n\nProvisioning Service\n\n\n\n\n\n\n\n\nTopic\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nOverview\n\n\nAn overview of the \nprovisioning\n service.\n\n\n\n\n\n\n\n\nCertificate Activator Service\n\n\n\n\n\n\n\n\nTopic\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nOverview\n\n\nAn overview of the \ncertificateactivator\n service.\n\n\n\n\n\n\n\n\nCertificate Vendor Service\n\n\n\n\n\n\n\n\nTopic\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nOverview\n\n\nAn overview of the \ncertificatevendor\n service.\n\n\n\n\n\n\n\n\nCommands Service\n\n\n\n\n\n\n\n\nTopic\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nOverview\n\n\nAn overview of the \ncommands\n service.\n\n\n\n\n\n\nPre-signed URLS (User)\n\n\nHow to configure and consume pre-signed urls.\n\n\n\n\n\n\n\n\nCustom Device Authorizer\n\n\n\n\n\n\n\n\nTopic\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nOverview\n\n\nAn example implementation of a custom authorizer that authenticates HTTP calls using the device certificate.\n\n\n\n\n\n\n\n\nDevice Monitoring Service\n\n\n\n\n\n\n\n\nTopic\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nOverview\n\n\nA device monitoring service that updates the Asset Library with near real-time device connection status.\n\n\n\n\n\n\n\n\nRequest Queue Service\n\n\n\n\n\n\n\n\nTopic\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nOverview\n\n\nA service for queueing API requests. Can be used as part of an high-availabilty strategy.", 
            "title": "Beginner Track"
        }, 
        {
            "location": "/beginner/#beginner-track", 
            "text": "", 
            "title": "Beginner Track"
        }, 
        {
            "location": "/beginner/#overview", 
            "text": "Topic  Description      High Level Overview  The big picture of CDF.    Postman  A Postman collection providing examples of how to call the CDF (Core) services.", 
            "title": "Overview"
        }, 
        {
            "location": "/beginner/#asset-library-service", 
            "text": "Topic  Description      Overview  An overview of the  asset library  service.    Templates (User)  How to configure device/group templates.", 
            "title": "Asset Library Service"
        }, 
        {
            "location": "/beginner/#asset-library-history-service", 
            "text": "Topic  Description      Overview  An overview of the  asset library history  service.", 
            "title": "Asset Library History Service"
        }, 
        {
            "location": "/beginner/#provisioning-service", 
            "text": "Topic  Description      Overview  An overview of the  provisioning  service.", 
            "title": "Provisioning Service"
        }, 
        {
            "location": "/beginner/#certificate-activator-service", 
            "text": "Topic  Description      Overview  An overview of the  certificateactivator  service.", 
            "title": "Certificate Activator Service"
        }, 
        {
            "location": "/beginner/#certificate-vendor-service", 
            "text": "Topic  Description      Overview  An overview of the  certificatevendor  service.", 
            "title": "Certificate Vendor Service"
        }, 
        {
            "location": "/beginner/#commands-service", 
            "text": "Topic  Description      Overview  An overview of the  commands  service.    Pre-signed URLS (User)  How to configure and consume pre-signed urls.", 
            "title": "Commands Service"
        }, 
        {
            "location": "/beginner/#custom-device-authorizer", 
            "text": "Topic  Description      Overview  An example implementation of a custom authorizer that authenticates HTTP calls using the device certificate.", 
            "title": "Custom Device Authorizer"
        }, 
        {
            "location": "/beginner/#device-monitoring-service", 
            "text": "Topic  Description      Overview  A device monitoring service that updates the Asset Library with near real-time device connection status.", 
            "title": "Device Monitoring Service"
        }, 
        {
            "location": "/beginner/#request-queue-service", 
            "text": "Topic  Description      Overview  A service for queueing API requests. Can be used as part of an high-availabilty strategy.", 
            "title": "Request Queue Service"
        }, 
        {
            "location": "/development/async/", 
            "text": "Asynchronous Operations\n\n\nAs CDF is based on Node.js v8.10, the \nasync, await\n constructs are used to handle asynchronous operations as if they were synchronous, vastly simplifying their implementation when compared to Promises and callbacks.\n\n\nPattern:  Alternative to Promise chaining\n\n\nasync\n \nfunction\n \nasyncTask\n \n()\n \n{\n\n  \ntry\n \n{\n\n    \nconst\n \nvalueA\n \n=\n \nawait\n \nchainedFunctionA\n()\n\n    \nconst\n \nvalueB\n \n=\n \nawait\n \nchainedFunctionB\n(\nvalueA\n)\n\n    \nconst\n \nvalueC\n \n=\n \nawait\n \nchainedFunctionC\n(\nvalueB\n)\n\n    \nreturn\n \nawait\n \nchainedFunctionD\n(\nvalueC\n)\n\n  \n}\n \ncatch\n \n(\nerr\n)\n \n{\n\n    \nlogger\n.\nerror\n(\nerr\n)\n\n  \n}\n\n\n}\n\n\n\n\n\nPattern:  Asynchronous functions depending on other asynchronous functions\n\n\nasync\n \nfunction\n \nexecuteAsyncTask\n \n()\n \n{\n\n    \nconst\n \nvalueA\n \n=\n \nawait\n \nfunctionA\n();\n\n    \nconst\n \nvalueB\n \n=\n \nawait\n \nfunctionB\n(\nvalueA\n);\n\n    \nreturn\n \nfunction3\n(\nvalueA\n,\n \nvalueB\n);\n\n\n}\n\n\n\n\n\nPattern:  Parallel requests\n\n\nasync\n \nfunction\n \nexecuteParallelAsyncTasks\n \n()\n \n{\n\n    \nconst\n \n[\n \nvalueA\n,\n \nvalueB\n,\n \nvalueC\n \n]\n \n=\n \nawait\n \nPromise\n.\nall\n([\n \nfunctionA\n(),\n \nfunctionB\n(),\n \nfunctionC\n()\n \n])\n\n        \ndoSomethingWith\n(\nvalueA\n);\n\n        \ndoSomethingElseWith\n(\nvalueB\n);\n\n        \ndoAnotherThingWith\n(\nvalueC\n);\n\n    \n}", 
            "title": "Asynchronous Operations"
        }, 
        {
            "location": "/development/async/#asynchronous-operations", 
            "text": "As CDF is based on Node.js v8.10, the  async, await  constructs are used to handle asynchronous operations as if they were synchronous, vastly simplifying their implementation when compared to Promises and callbacks.", 
            "title": "Asynchronous Operations"
        }, 
        {
            "location": "/development/async/#pattern-alternative-to-promise-chaining", 
            "text": "async   function   asyncTask   ()   { \n   try   { \n     const   valueA   =   await   chainedFunctionA () \n     const   valueB   =   await   chainedFunctionB ( valueA ) \n     const   valueC   =   await   chainedFunctionC ( valueB ) \n     return   await   chainedFunctionD ( valueC ) \n   }   catch   ( err )   { \n     logger . error ( err ) \n   }  }", 
            "title": "Pattern:  Alternative to Promise chaining"
        }, 
        {
            "location": "/development/async/#pattern-asynchronous-functions-depending-on-other-asynchronous-functions", 
            "text": "async   function   executeAsyncTask   ()   { \n     const   valueA   =   await   functionA (); \n     const   valueB   =   await   functionB ( valueA ); \n     return   function3 ( valueA ,   valueB );  }", 
            "title": "Pattern:  Asynchronous functions depending on other asynchronous functions"
        }, 
        {
            "location": "/development/async/#pattern-parallel-requests", 
            "text": "async   function   executeParallelAsyncTasks   ()   { \n     const   [   valueA ,   valueB ,   valueC   ]   =   await   Promise . all ([   functionA (),   functionB (),   functionC ()   ]) \n         doSomethingWith ( valueA ); \n         doSomethingElseWith ( valueB ); \n         doAnotherThingWith ( valueC ); \n     }", 
            "title": "Pattern:  Parallel requests"
        }, 
        {
            "location": "/development/config/", 
            "text": "Configuration\n\n\nIt is imperative that any customer specific configuration is kept out of the main projects.  In addition, any injection of configuration needs to be compatible with both running services locally, deploying service via CI/CD, and deploying service manually.\n\n\nThe following outlines a \n12-factor app\n best practice approach to configuration management..\n\n\nApplication Configuration\n\n\nApplication configuration is handled via the npm \nconfig\n module.  in each application, the following should reside:\n\n\nsrc/config/default.yaml\n\n\nThis file defines all configuration keys for the application.  This file should include any non-environment specific configuration values relevant to the application.  Note:  Environment specific configuration values should never be placed in here.\n\n\nsrc/config/custom-environment-variables.yaml\n\n\nThe presence of this file allows for environment variables to be injected into configuration at runtime.  This file should contain the same keys as \nsrc/config/default.yaml\n, but the value represents the name of an environment variable where the \nconfig\n module will lookup configuration value overrides.\n\n\nCustomer Specific Configuration\n\n\nRunning services locally\n\n\nThe \nts.run\n package script of each project is defined as follows:\n\n\nts.run\n: \nNODE_CONFIG=\n$(\ncat \n${\nASSETLIBRARY_CONFIG_LOCATION\n}\n)\n NODE_CONFIG_DIR=\n./src/config\n ts-node src/lambda_proxy.ts\n\n\n\n\n\nIn the above, the \n${ASSETLIBRARY_CONFIG_LOCATION}\n environment variable (this example is taken from the asset library project) needs to point to the location of a json configuration override file.  The format of this file is unique to each project, and needs to be based on the keys defined within the projects \nsrc/config/default.yaml\n configuration file. \n\n\nAs an example to run:\n\n\nASSETLIBRARY_CONFIG_LOCATION\n=\n../cdf-config-\n{\ncustomer\n}\n/assetlibrary/development-local.json  npm run ts.run\n\n\n\n\nDeploying via CloudFormation\n\n\nTo facilitate the externalization of customer specific configuration, each CloudFormation template includes an \nApplicationConfigurationOverride\n parameter which allows for the injection of parameters via a json formatted string.  The \nApplicationConfigurationOverride\n is passed into the lambda function via the \nNODE_CONFIG\n variable of the \nconfig\n module.  This will be augmented with the configuration from \nsrc/config/default.yaml\n.\n\n\nThe \ndeploy-cfn.bash\n script of each project is responsible for taking the value of the \n${PROJECT}_CONFIG_LOCATION\n environment variable, reading its contents, then passing this to the CloudFormation template.", 
            "title": "Configuration"
        }, 
        {
            "location": "/development/config/#configuration", 
            "text": "It is imperative that any customer specific configuration is kept out of the main projects.  In addition, any injection of configuration needs to be compatible with both running services locally, deploying service via CI/CD, and deploying service manually.  The following outlines a  12-factor app  best practice approach to configuration management..", 
            "title": "Configuration"
        }, 
        {
            "location": "/development/config/#application-configuration", 
            "text": "Application configuration is handled via the npm  config  module.  in each application, the following should reside:", 
            "title": "Application Configuration"
        }, 
        {
            "location": "/development/config/#srcconfigdefaultyaml", 
            "text": "This file defines all configuration keys for the application.  This file should include any non-environment specific configuration values relevant to the application.  Note:  Environment specific configuration values should never be placed in here.", 
            "title": "src/config/default.yaml"
        }, 
        {
            "location": "/development/config/#srcconfigcustom-environment-variablesyaml", 
            "text": "The presence of this file allows for environment variables to be injected into configuration at runtime.  This file should contain the same keys as  src/config/default.yaml , but the value represents the name of an environment variable where the  config  module will lookup configuration value overrides.", 
            "title": "src/config/custom-environment-variables.yaml"
        }, 
        {
            "location": "/development/config/#customer-specific-configuration", 
            "text": "", 
            "title": "Customer Specific Configuration"
        }, 
        {
            "location": "/development/config/#running-services-locally", 
            "text": "The  ts.run  package script of each project is defined as follows:  ts.run :  NODE_CONFIG= $( cat  ${ ASSETLIBRARY_CONFIG_LOCATION } )  NODE_CONFIG_DIR= ./src/config  ts-node src/lambda_proxy.ts   In the above, the  ${ASSETLIBRARY_CONFIG_LOCATION}  environment variable (this example is taken from the asset library project) needs to point to the location of a json configuration override file.  The format of this file is unique to each project, and needs to be based on the keys defined within the projects  src/config/default.yaml  configuration file.   As an example to run:  ASSETLIBRARY_CONFIG_LOCATION = ../cdf-config- { customer } /assetlibrary/development-local.json  npm run ts.run", 
            "title": "Running services locally"
        }, 
        {
            "location": "/development/config/#deploying-via-cloudformation", 
            "text": "To facilitate the externalization of customer specific configuration, each CloudFormation template includes an  ApplicationConfigurationOverride  parameter which allows for the injection of parameters via a json formatted string.  The  ApplicationConfigurationOverride  is passed into the lambda function via the  NODE_CONFIG  variable of the  config  module.  This will be augmented with the configuration from  src/config/default.yaml .  The  deploy-cfn.bash  script of each project is responsible for taking the value of the  ${PROJECT}_CONFIG_LOCATION  environment variable, reading its contents, then passing this to the CloudFormation template.", 
            "title": "Deploying via CloudFormation"
        }, 
        {
            "location": "/development/dependency-injection/", 
            "text": "Dependency Injection\n\n\nDependency injection is a technique that makes it easy to follow the \nSingle Responsibility Principle\n and \nOpen/Closed Principle\n of the \nSOLID\n design principles, which allow for software designs to be more understandable, flexible, testable and maintainable.\n\n\nInversifyJS\n is a lightweight dependency injection framework with full support for TypeScript.\n\n\nAdding to a project\n\n\nThe following dependencies are required:\n\n\n\n\ninversify\n\n\ninversify-binding-decorators\n\n\ninversify-express-utils\n\n\n\n\nIn addition, for unit testng, the following development dependencies are required:\n\n\n\n\n@types/jest\n\n\njest\n\n\njest-create-mock-instance\n\n\nts-jest\n\n\n\n\nConfiguring dependency injection\n\n\nThe following example describes how to wire a \nParent\n class to consume a \nChild\n class via dependency injection.\n\n\nFirst, let's create the \nChild\n class.  We mark the class as \n@injectable()\n:\n\n\nimport\n \n{\n \ninjectable\n \n}\n \nfrom\n \ninversify\n;\n\n\n\n@\ninjectable\n()\n\n\nexport\n \nclass\n \nChild\n \n{\n\n    \npublic\n \nreturnSomething\n()\n \n:\n \nstring\n \n{\n\n        \nreturn\n(\nHello\n);\n\n    \n}\n\n\n}\n\n\n\n\n\nNext, create a symbol to identify the \nChild\n class:\n\n\nexport\n \nconst\n \nTYPES\n \n=\n \n{\n\n    \nChild\n:\n \nSymbol\n.\nfor\n(\nChild\n)\n\n\n};\n\n\n\n\n\nNow, create the \nParent\n class.  In addition to marking the class as \n@injectable()\n, we also inject an instance of \nChild\n into the constructor, annotating it with \n@inject(TYPES.Child)\n: \n\n\nimport\n \n{\n \ninjectable\n,\n \ninject\n \n}\n \nfrom\n \ninversify\n;\n\n\n\n@\ninjectable\n()\n\n\nexport\n \nclass\n \nParent\n \n{\n\n\n    \nconstructor\n(\n \n@\ninject\n(\nTYPES\n.\nChild\n)\n \nprivate\n \nchild\n:\n \nChild\n)\n \n{}\n\n\n    \npublic\n \ndoSomething\n()\n:\n \nstring\n \n{\n\n        \nreturn\n \nchild\n.\nreturnSomething\n()\n \n+\n \n World\n;\n\n    \n}\n\n\n}\n\n\n\n\n\nWe need to configure InversifyJS on how to bind classes.  Within the CDF projects, this is handled in \n/src/di/inversify,config.ts\n:\n\n\nimport\n \n{\n \nContainer\n \n}\n \nfrom\n \ninversify\n;\n\n\nimport\n \n{\nTYPES\n}\n \nfrom\n \n./types\n;\n\n\nimport\n \n{\n \nParent\n \n}\n \nfrom\n \n./parent\n;\n\n\nimport\n \n{\n \nChild\n \n}\n \nfrom\n \n./child\n;\n\n\n\n// Load everything needed to the Container\n\n\nexport\n \nconst\n \ncontainer\n \n=\n \nnew\n \nContainer\n();\n\n\ncontainer\n.\nbind\nParent\n(\nTYPES\n.\nParent\n).\nto\n(\nParent\n);\n\n\ncontainer\n.\nbind\nChild\n(\nTYPES\n.\nChild\n).\nto\n(\nChild\n);\n\n\n\n\n\nThe last piece of the puzzle is to pass our InversifyJS container into our Express server.  Within the CDF projects, this is handled in \n/src/app.js\n:\n\n\nimport\n \nreflect-metadata\n;\n\n\nimport\n \n{\n \ncontainer\n \n}\n \nfrom\n \n./di/inversify.config\n;\n\n\nimport\n \n{\n \nInversifyExpressServer\n \n}\n \nfrom\n \ninversify-express-utils\n;\n\n\n\n// Start the Express server, passing in our dependency injection container\n\n\nconst\n \nserver\n \n=\n \nnew\n \nInversifyExpressServer\n(\ncontainer\n);\n\n\n\n// continue setting up the Express server as needed....\n\n\n\n\n\nTesting classes with mocked dependencies\n\n\nLet's continue with the \nParent\n and \nChild\n class examples above.\n\n\nIf the \nParent\n class is run as is, it will call the \nreturnSomething()\n method of \nChild\n, and return \nHello World\n.  But when writing unit tests we need to isolate the \nParent\n class, and not call the \nChild\n class.  The following is an exmaple of how to mock the \nChild\n class using the \njest\n testing framework:\n\n\nimport\n \nreflect-metadata\n;\n\n\nimport\n \n{}\n \nfrom\n \njest\n;\n\n\nimport\n \n{\n \ncreateMockInstance\n \n}\n \nfrom\n \njest-create-mock-instance\n;\n\n\n\nimport\n \n{\n \nParent\n \n}\n \nfrom\n \n./parent\n;\n\n\nimport\n \n{\n \nChild\n \n}\n \nfrom\n \n./child\n;\n\n\n\ndescribe\n(\nParent\n,\n \n()\n \n=\n \n{\n\n    \nlet\n \nmockedChild\n:\n \njest\n.\nMocked\nChild\n;\n\n    \nlet\n \nclassUnderTest\n:\n \nParent\n;\n\n\n    \nbeforeEach\n(()\n \n=\n \n{\n\n        \nmockedChild\n \n=\n \ncreateMockInstance\n(\nChild\n);\n\n        \nclassUnderTest\n \n=\n \nnew\n \nParent\n(\nmockedChild\n);\n\n    \n});\n\n\n    \nit\n(\nshould return goodbye world\n,\n \nasync\n \n()\n \n=\n \n{\n\n\n        \n// Set the mocks on the dependent classes\n\n        \nmockedChild\n.\nreturnSomething\n.\nmockImplementationOnce\n(()=\n \n{\n\n            \nreturn\n \nGoodbye\n;\n\n        \n});\n\n\n        \n// Make the call\n\n        \nconst\n \nresult\n \n=\n \nclassUnderTest\n.\ndoSomething\n();\n\n\n        \n// Finally, verify the results\n\n        \nexpect\n(\nresult\n).\ntoBeDefined\n();\n\n        \nexpect\n(\nresult\n).\ntoEqual\n(\nGoodbye World\n);\n\n    \n});\n\n\n});\n\n\n\n\n\nThe important piece above is the use of \njest.Mocked\nChild\n.  This will ensure that all requested instances of \nChild\n post the \njest.Mocked\nChild\n return a mocked instance of \nChild\n instead of a real \nChild\n.\n\n\nNext, as part of your test, use the \nmockImplementationOnce()\n method to configure the responses of your mocked classes.", 
            "title": "Dependency Injection"
        }, 
        {
            "location": "/development/dependency-injection/#dependency-injection", 
            "text": "Dependency injection is a technique that makes it easy to follow the  Single Responsibility Principle  and  Open/Closed Principle  of the  SOLID  design principles, which allow for software designs to be more understandable, flexible, testable and maintainable.  InversifyJS  is a lightweight dependency injection framework with full support for TypeScript.", 
            "title": "Dependency Injection"
        }, 
        {
            "location": "/development/dependency-injection/#adding-to-a-project", 
            "text": "The following dependencies are required:   inversify  inversify-binding-decorators  inversify-express-utils   In addition, for unit testng, the following development dependencies are required:   @types/jest  jest  jest-create-mock-instance  ts-jest", 
            "title": "Adding to a project"
        }, 
        {
            "location": "/development/dependency-injection/#configuring-dependency-injection", 
            "text": "The following example describes how to wire a  Parent  class to consume a  Child  class via dependency injection.  First, let's create the  Child  class.  We mark the class as  @injectable() :  import   {   injectable   }   from   inversify ;  @ injectable ()  export   class   Child   { \n     public   returnSomething ()   :   string   { \n         return ( Hello ); \n     }  }   Next, create a symbol to identify the  Child  class:  export   const   TYPES   =   { \n     Child :   Symbol . for ( Child )  };   Now, create the  Parent  class.  In addition to marking the class as  @injectable() , we also inject an instance of  Child  into the constructor, annotating it with  @inject(TYPES.Child) :   import   {   injectable ,   inject   }   from   inversify ;  @ injectable ()  export   class   Parent   { \n\n     constructor (   @ inject ( TYPES . Child )   private   child :   Child )   {} \n\n     public   doSomething () :   string   { \n         return   child . returnSomething ()   +    World ; \n     }  }   We need to configure InversifyJS on how to bind classes.  Within the CDF projects, this is handled in  /src/di/inversify,config.ts :  import   {   Container   }   from   inversify ;  import   { TYPES }   from   ./types ;  import   {   Parent   }   from   ./parent ;  import   {   Child   }   from   ./child ;  // Load everything needed to the Container  export   const   container   =   new   Container ();  container . bind Parent ( TYPES . Parent ). to ( Parent );  container . bind Child ( TYPES . Child ). to ( Child );   The last piece of the puzzle is to pass our InversifyJS container into our Express server.  Within the CDF projects, this is handled in  /src/app.js :  import   reflect-metadata ;  import   {   container   }   from   ./di/inversify.config ;  import   {   InversifyExpressServer   }   from   inversify-express-utils ;  // Start the Express server, passing in our dependency injection container  const   server   =   new   InversifyExpressServer ( container );  // continue setting up the Express server as needed....", 
            "title": "Configuring dependency injection"
        }, 
        {
            "location": "/development/dependency-injection/#testing-classes-with-mocked-dependencies", 
            "text": "Let's continue with the  Parent  and  Child  class examples above.  If the  Parent  class is run as is, it will call the  returnSomething()  method of  Child , and return  Hello World .  But when writing unit tests we need to isolate the  Parent  class, and not call the  Child  class.  The following is an exmaple of how to mock the  Child  class using the  jest  testing framework:  import   reflect-metadata ;  import   {}   from   jest ;  import   {   createMockInstance   }   from   jest-create-mock-instance ;  import   {   Parent   }   from   ./parent ;  import   {   Child   }   from   ./child ;  describe ( Parent ,   ()   =   { \n     let   mockedChild :   jest . Mocked Child ; \n     let   classUnderTest :   Parent ; \n\n     beforeEach (()   =   { \n         mockedChild   =   createMockInstance ( Child ); \n         classUnderTest   =   new   Parent ( mockedChild ); \n     }); \n\n     it ( should return goodbye world ,   async   ()   =   { \n\n         // Set the mocks on the dependent classes \n         mockedChild . returnSomething . mockImplementationOnce (()=   { \n             return   Goodbye ; \n         }); \n\n         // Make the call \n         const   result   =   classUnderTest . doSomething (); \n\n         // Finally, verify the results \n         expect ( result ). toBeDefined (); \n         expect ( result ). toEqual ( Goodbye World ); \n     });  });   The important piece above is the use of  jest.Mocked Child .  This will ensure that all requested instances of  Child  post the  jest.Mocked Child  return a mocked instance of  Child  instead of a real  Child .  Next, as part of your test, use the  mockImplementationOnce()  method to configure the responses of your mocked classes.", 
            "title": "Testing classes with mocked dependencies"
        }, 
        {
            "location": "/development/prerequisites/", 
            "text": "Prerequisites for Development\n\n\n\n\n\n\n\n\nTool / Technology\n\n\nReason\n\n\n\n\n\n\n\n\n\n\nnvm\n\n\nSimple way to manage multiple versions of Node.js\n\n\n\n\n\n\nNode.js v8.10\n\n\nInstall using \nnvm install 8.10\n, and/or switch to it using \nnvm use 8.10\n\n\n\n\n\n\nGit\n\n\nVersion control\n\n\n\n\n\n\nmkdocs\n\n\nDocumentation tool\n\n\n\n\n\n\n\n\nOptional Prerequisites\n\n\n\n\n\n\n\n\nTool / Technology\n\n\nReason\n\n\n\n\n\n\n\n\n\n\naws cli\n\n\nUsed as part of some deployment scripts\n\n\n\n\n\n\njq\n\n\nUsed as part of some deployment scripts", 
            "title": "Prerequisites"
        }, 
        {
            "location": "/development/prerequisites/#prerequisites-for-development", 
            "text": "Tool / Technology  Reason      nvm  Simple way to manage multiple versions of Node.js    Node.js v8.10  Install using  nvm install 8.10 , and/or switch to it using  nvm use 8.10    Git  Version control    mkdocs  Documentation tool", 
            "title": "Prerequisites for Development"
        }, 
        {
            "location": "/development/prerequisites/#optional-prerequisites", 
            "text": "Tool / Technology  Reason      aws cli  Used as part of some deployment scripts    jq  Used as part of some deployment scripts", 
            "title": "Optional Prerequisites"
        }, 
        {
            "location": "/development/quickstart/", 
            "text": "Development Getting Started\n\n\nIntroduction\n\n\nThe following describes the steps involved to initialize a CDF development environment from scratch, to build, run and test a project, then finally on how to commit modifications to the source code.\n\n\nDue to the scripts used as part of both the build and deployment steps, only linux type environments (including macOS) are supported.\n\n\nConfiguring the development environment\n\n\nThe following is a one-time setup to configure the CDF development environment:\n\n\n\n\nensure you have a \ngit client\n installed\n\n\ninstall \nNode Version Manager\n:\n\n\n\n\ncurl -o- https://raw.githubusercontent.com/creationix/nvm/v0.34.0/install.sh \n|\n bash\n\n\n\n\n\n\nusing nvm installed from the previous step, install Node.js v8.10:\n\n\n\n\n nvm use v8.10\n\n\n\n\n\n\ninstall \npnpm\n package manager:\n\n\n\n\n npm install -g pnpm\n\n\n\n\n\n\nclone the project:\n\n\n\n\n git clone https://git-codecommit.us-west-2.amazonaws.com/v1/repos/cdf-core\n\n\n\n\n\n\ninitialize the project dependencies:\n\n\n\n\n \ncd\n cdf-core\ncdf-core\n pnpm install\n\n\n\n\nBuilding a module\n\n\nTo build all the modules:\n\n\ncdf-core\n pnpm recursive run build\n\n\n\n\nTo build a specific module (e.g. the Asset Library):\n\n\ncdf-core\n \ncd\n packages/services/assetlibrary\ncdf-core/packages/services/assetlibrary\n pnpm run build\n\n\n\n\nTesting a module\n\n\nTo run unit tests for all the modules:\n\n\ncdf-core\n pnpm recursive run \ntest\n\n\n\n\n\nTo run unit tests for a specific module (e.g. the Asset Library):\n\n\ncdf-core\n \ncd\n packages/services/assetlibrary\ncdf-core/packages/services/assetlibrary\n pnpm run \ntest\n\n\n\n\n\nNote that integration tests are automatically run by the CI/CD pipeline upon each commit to the \nmaster\n branch.\n\n\nRunning a module\n\n\nEach service has its configuration properties stored in an external file.  We follow a convention of storing these property files within the customers \ncdf-infrastructure-*\n project (e.g. \ncdf-infrastructure-demo\n), where the name of the property file is of the pattern \"\nenvironment>-config.json\".\n\n\nWhen running locally, the first step is to define which configuration file to use.  As an example, to use the \ndevelopment-config.json\n configuration files located within each projects folder in the \ncdf-infrastructure-*\n project we would set the environment locally (specific for each project) by running the following within the projects folder:\n\n\nnpm config \nset\n \n{\npackage name\n}\n:environment development-local\n\n\n## e.g. for the asset library:\n\nnpm config \nset\n @cdf/assetlibrary:environment development-local\n\n\n\n\nFor reference, the above command stores this configuration in \n~./npmrc\n.\n\n\nNext we need to set the variable \nCONFIG_LOCATION\n to the root of the \ncdf-infrastructure-*\n project.\n\n\nTo start all the runnable services:\n\n\ncdf-core\n \nCONFIG_LOCATION\n=\npath to infrastructure project\n pnpm recursive run start\n\n\n\n\nTo start a specific runnable service (e.g. the Asset Library):\n\n\ncdf-core\n \ncd\n packages/services/assetlibrary\ncdf-core/packages/services/assetlibrary\n \nCONFIG_LOCATION\n=\npath to infrastructure project\n pnpm run start\n\n\n\n\nMaking changes to an existing module\n\n\nWe adhere to what is known as a \nGitHub flow\n as far as our approach to branching is concerned.  Basically this boils down to:\n\n\n\n\nThe \nmaster\n branch always represents a working version of the code that may be deployed to a production environment\n\n\nUnder no circumstances ever commit directly to \nmaster\n!\n\n\nWhen starting a new feature or fixing a bug, create a new branch from \nmaster\n:\n\n\n\n\ncdf-core\n git checkout -b my-branch\n\nSwitched to a new branch \nmy-branch\n\n\n\n\n\n\n\nAt suitable points, commit your work by running the following, and following the prompts to describe your commit:\n\n\n\n\ncdf-core\n git add -A\ncdf-core\n pnpm run commit\n\n\n\n\n\n\nWhen you have finished with your implementation, and ensured that all existing unit tests pass as well as creating any new tests, push your branch to the CodeCommit repo:\n\n\n\n\ncdf-core\n git push my-branch\n\n\n\n\n\n\n\n\nCreate a \nCodeCommit Pull Request\n to have your work reviewed by peers.  Once created, send out the pull request link to other team members\n\n\n\n\n\n\nOnce your pull request has been reviewed, and any issues addressed, merge your implementation back into the main code branch.  \nNote: don't use the CodeCommit console to perform the merge!\n.  Instead, merge using the \ngit\n command as follows:\n\n\n\n\n\n\n# first ensure your have the latest version of `master`\n\ncdf-core\n git checkout master\ncdf-core\n git pull\n\n\n# next, merge your branch into your local master\n\ncdf-core\n git merge --no-ff my-branch\n\n\n# address any conflicts if reported\n\n\n\n# re-run tests to make sure everything is still ok\n\ncdf-core\n pnpm recursive run \ntest\n\n\n\n# if tests still pass, push the changes\n\ncdf-core\n git push origin master\n\n\n# once pushed, delete your local branch\n\ncdf-core\n git branch -d my-branch\ncdf-core\n git push origin master\n\n\n# finally, delete the branch from codecommit\n\n\n\n\n\nUnderstanding the directory structure\n\n\n\n\n\n\n\n\nDirectory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncdf-core/cicd/\n\n\nThe CloudFormation template to deploy the cicd pipeline, along with the related CodeBuild scripts\n\n\n\n\n\n\ncdf-core/documentation/\n\n\nCDF core related documentation\n\n\n\n\n\n\ncdf-core/infrastructure/\n\n\nThe main deployment script for deploying the CDF core services, along with CloudFormation templates that are not specific to any service\n\n\n\n\n\n\ncdf-core/packages/integration-tests/\n\n\nBDD related automated integration tests\n\n\n\n\n\n\ncdf-core/packages/libraries/\n\n\nAll internal libraries, as well as CDF client libraries\n\n\n\n\n\n\ncdf-core/packages/services/\n\n\nDeployable services, such as the Asset Library\n\n\n\n\n\n\n```\n\n\n\n\n\n\n\n\n\n\nFAQ\n\n\nWhy do I have to use \npnpm run commit\n to commit my work instead of the usual \ngit commit\n?\npnpm run commit\n is configured to run the \ncommitizen command line utility\n which forces you to describe commits using a specific format.  This is vitally important, as there are steps in our CI/CD pipeline that analyze all git commits since the last release, use these specially formatted messages to intelligently increment the version numbers (e.g. understand if there's a breaking change), and finally auto generates a change log for the release.\n\n\n\n\nWhy should I manually merge using \ngit\n instead of closing a pull request directly in the CodeCommit console?\nWhen closing a pull request in the CodeCommit console, it performs a \nfast-forward\n merge.  What this means is that when you view the history of commits in CodeCommit or any other similar tool, all the commit messages you made in your branch appear as if they were made directly to master.\n\n\nAlternatively, by performing the git merge manually using the \n--no-ff\n argument, it creates a commit message for the merge itself.  What this means is that when you view the history, even though you have merged your branch into your master, all your commit messages for your branch will be grouped together making it easy to see what commits were originally made to your branch.\n\n\nPerforming a \nno fast forard\n type merge makes future troubleshooting so much easier.\n\n\n\n\nWhy are we using node.js v8 when there are more recent versions available?\nThe latest node.js version that AWS Lambda supports is v8.10, and AWS Lambda is one of our supported deployment targets.\n\n\n\n\nWhat is the need for using (\npnpm\n package manager)?  What's wrong with \nnpm\n?\nThe \ncdf-core\n git repo is what is known as a monorepo, a large single repository that contains many different projects.\n\n\nThe decision to migrate CDF to a monorepo was made to:\n\n\n\n\nsimplify the development environment by removing the need for an npm private repo (verdaccio)\n\n\nsimplify the dependency management across projects (reduced the development environment footprint from \n6GB to 300MB)\n\n\nallow for atomic commits spanning multiple projects, simplyifing branching, merging and code reviews\n\n\n\n\npnmp\n has features that allow us to efficiently work with monorepos, while still being able to bundle individual services in the way required by AWS Lambda.\n\n\n\n\nI use the \nfish shell\n on macOS (installed via homebrew) instead of the default shell.  How do I configure \nnvm\n?\nAdd the following to \ncat ~/.config/fish/config.fish\n, then open a new terminal:\n\n\nsh\nfunction nvm\n   bass source (brew --prefix nvm)/nvm.sh --no-use ';' nvm $argv\nend\nset -x NVM_DIR ~/.nvm\nnvm use default --silent", 
            "title": "Development Getting Started"
        }, 
        {
            "location": "/development/quickstart/#development-getting-started", 
            "text": "", 
            "title": "Development Getting Started"
        }, 
        {
            "location": "/development/quickstart/#introduction", 
            "text": "The following describes the steps involved to initialize a CDF development environment from scratch, to build, run and test a project, then finally on how to commit modifications to the source code.  Due to the scripts used as part of both the build and deployment steps, only linux type environments (including macOS) are supported.", 
            "title": "Introduction"
        }, 
        {
            "location": "/development/quickstart/#configuring-the-development-environment", 
            "text": "The following is a one-time setup to configure the CDF development environment:   ensure you have a  git client  installed  install  Node Version Manager :   curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.34.0/install.sh  |  bash   using nvm installed from the previous step, install Node.js v8.10:    nvm use v8.10   install  pnpm  package manager:    npm install -g pnpm   clone the project:    git clone https://git-codecommit.us-west-2.amazonaws.com/v1/repos/cdf-core   initialize the project dependencies:     cd  cdf-core\ncdf-core  pnpm install", 
            "title": "Configuring the development environment"
        }, 
        {
            "location": "/development/quickstart/#building-a-module", 
            "text": "To build all the modules:  cdf-core  pnpm recursive run build  To build a specific module (e.g. the Asset Library):  cdf-core   cd  packages/services/assetlibrary\ncdf-core/packages/services/assetlibrary  pnpm run build", 
            "title": "Building a module"
        }, 
        {
            "location": "/development/quickstart/#testing-a-module", 
            "text": "To run unit tests for all the modules:  cdf-core  pnpm recursive run  test   To run unit tests for a specific module (e.g. the Asset Library):  cdf-core   cd  packages/services/assetlibrary\ncdf-core/packages/services/assetlibrary  pnpm run  test   Note that integration tests are automatically run by the CI/CD pipeline upon each commit to the  master  branch.", 
            "title": "Testing a module"
        }, 
        {
            "location": "/development/quickstart/#running-a-module", 
            "text": "Each service has its configuration properties stored in an external file.  We follow a convention of storing these property files within the customers  cdf-infrastructure-*  project (e.g.  cdf-infrastructure-demo ), where the name of the property file is of the pattern \" environment>-config.json\".  When running locally, the first step is to define which configuration file to use.  As an example, to use the  development-config.json  configuration files located within each projects folder in the  cdf-infrastructure-*  project we would set the environment locally (specific for each project) by running the following within the projects folder:  npm config  set   { package name } :environment development-local ## e.g. for the asset library: \nnpm config  set  @cdf/assetlibrary:environment development-local  For reference, the above command stores this configuration in  ~./npmrc .  Next we need to set the variable  CONFIG_LOCATION  to the root of the  cdf-infrastructure-*  project.  To start all the runnable services:  cdf-core   CONFIG_LOCATION = path to infrastructure project  pnpm recursive run start  To start a specific runnable service (e.g. the Asset Library):  cdf-core   cd  packages/services/assetlibrary\ncdf-core/packages/services/assetlibrary   CONFIG_LOCATION = path to infrastructure project  pnpm run start", 
            "title": "Running a module"
        }, 
        {
            "location": "/development/quickstart/#making-changes-to-an-existing-module", 
            "text": "We adhere to what is known as a  GitHub flow  as far as our approach to branching is concerned.  Basically this boils down to:   The  master  branch always represents a working version of the code that may be deployed to a production environment  Under no circumstances ever commit directly to  master !  When starting a new feature or fixing a bug, create a new branch from  master :   cdf-core  git checkout -b my-branch\n\nSwitched to a new branch  my-branch    At suitable points, commit your work by running the following, and following the prompts to describe your commit:   cdf-core  git add -A\ncdf-core  pnpm run commit   When you have finished with your implementation, and ensured that all existing unit tests pass as well as creating any new tests, push your branch to the CodeCommit repo:   cdf-core  git push my-branch    Create a  CodeCommit Pull Request  to have your work reviewed by peers.  Once created, send out the pull request link to other team members    Once your pull request has been reviewed, and any issues addressed, merge your implementation back into the main code branch.   Note: don't use the CodeCommit console to perform the merge! .  Instead, merge using the  git  command as follows:    # first ensure your have the latest version of `master` \ncdf-core  git checkout master\ncdf-core  git pull # next, merge your branch into your local master \ncdf-core  git merge --no-ff my-branch # address any conflicts if reported  # re-run tests to make sure everything is still ok \ncdf-core  pnpm recursive run  test  # if tests still pass, push the changes \ncdf-core  git push origin master # once pushed, delete your local branch \ncdf-core  git branch -d my-branch\ncdf-core  git push origin master # finally, delete the branch from codecommit", 
            "title": "Making changes to an existing module"
        }, 
        {
            "location": "/development/quickstart/#understanding-the-directory-structure", 
            "text": "Directory  Description      cdf-core/cicd/  The CloudFormation template to deploy the cicd pipeline, along with the related CodeBuild scripts    cdf-core/documentation/  CDF core related documentation    cdf-core/infrastructure/  The main deployment script for deploying the CDF core services, along with CloudFormation templates that are not specific to any service    cdf-core/packages/integration-tests/  BDD related automated integration tests    cdf-core/packages/libraries/  All internal libraries, as well as CDF client libraries    cdf-core/packages/services/  Deployable services, such as the Asset Library    ```", 
            "title": "Understanding the directory structure"
        }, 
        {
            "location": "/development/quickstart/#faq", 
            "text": "Why do I have to use  pnpm run commit  to commit my work instead of the usual  git commit ? pnpm run commit  is configured to run the  commitizen command line utility  which forces you to describe commits using a specific format.  This is vitally important, as there are steps in our CI/CD pipeline that analyze all git commits since the last release, use these specially formatted messages to intelligently increment the version numbers (e.g. understand if there's a breaking change), and finally auto generates a change log for the release.   Why should I manually merge using  git  instead of closing a pull request directly in the CodeCommit console? When closing a pull request in the CodeCommit console, it performs a  fast-forward  merge.  What this means is that when you view the history of commits in CodeCommit or any other similar tool, all the commit messages you made in your branch appear as if they were made directly to master.  Alternatively, by performing the git merge manually using the  --no-ff  argument, it creates a commit message for the merge itself.  What this means is that when you view the history, even though you have merged your branch into your master, all your commit messages for your branch will be grouped together making it easy to see what commits were originally made to your branch.  Performing a  no fast forard  type merge makes future troubleshooting so much easier.   Why are we using node.js v8 when there are more recent versions available? The latest node.js version that AWS Lambda supports is v8.10, and AWS Lambda is one of our supported deployment targets.   What is the need for using ( pnpm  package manager)?  What's wrong with  npm ? The  cdf-core  git repo is what is known as a monorepo, a large single repository that contains many different projects.  The decision to migrate CDF to a monorepo was made to:   simplify the development environment by removing the need for an npm private repo (verdaccio)  simplify the dependency management across projects (reduced the development environment footprint from  6GB to 300MB)  allow for atomic commits spanning multiple projects, simplyifing branching, merging and code reviews   pnmp  has features that allow us to efficiently work with monorepos, while still being able to bundle individual services in the way required by AWS Lambda.   I use the  fish shell  on macOS (installed via homebrew) instead of the default shell.  How do I configure  nvm ? Add the following to  cat ~/.config/fish/config.fish , then open a new terminal:  sh\nfunction nvm\n   bass source (brew --prefix nvm)/nvm.sh --no-use ';' nvm $argv\nend\nset -x NVM_DIR ~/.nvm\nnvm use default --silent", 
            "title": "FAQ"
        }, 
        {
            "location": "/development/tech-stack/", 
            "text": "Tech Stack\n\n\nEach application is written in \nTypeScript 3.1\n, and transpiled into \nNode.js 8.10\n.\n\n\nThe REST API's are hosted within the \nExpress web framework\n, using \naws-serverless-express\n to allow the Express application to run within AWS Lambda.\n\n\nInversifyJS\n is handling dependency injection, along with \ninversify-express-utils\n to handle the integration with Express.\n\n\n12-factor app based config is managed via \nconfig\n.\n\n\nLogging is handled via \nWinstonJs\n.\n\n\nUnit testing (along with mocking) is made possible via \nJest\n.\n\n\nEnd to end integration testing (BDD - behavior driven development) is handled using \ncucumber-js\n.", 
            "title": "Tech Stack"
        }, 
        {
            "location": "/development/tech-stack/#tech-stack", 
            "text": "Each application is written in  TypeScript 3.1 , and transpiled into  Node.js 8.10 .  The REST API's are hosted within the  Express web framework , using  aws-serverless-express  to allow the Express application to run within AWS Lambda.  InversifyJS  is handling dependency injection, along with  inversify-express-utils  to handle the integration with Express.  12-factor app based config is managed via  config .  Logging is handled via  WinstonJs .  Unit testing (along with mocking) is made possible via  Jest .  End to end integration testing (BDD - behavior driven development) is handled using  cucumber-js .", 
            "title": "Tech Stack"
        }, 
        {
            "location": "/development/unit-testing/", 
            "text": "Unit testing\n\n\nAll unit tests are written in \nJest\n which includes its own mocking functionality.\n\n\nA great Jest cheat sheet can be found \nhere\n.\n\n\nEach unit test must adhere to these rules:\n\n\n\n\nEach test method should focus on one test\n\n\nEach test should focus on testing a single method, mocking all calls to dependent objects/methods\n\n\nVerify configured mocks execute as requested\n\n\nAssert that the actual response is as expected\n\n\nNever skip any unit tests\n\n\n\n\nRefer to \nassetlibrary/src/policies/policies.service.spec.ts\n for an example.\n\n\nRun unit tests using \nnpm run test\n.", 
            "title": "Unit testing"
        }, 
        {
            "location": "/development/unit-testing/#unit-testing", 
            "text": "All unit tests are written in  Jest  which includes its own mocking functionality.  A great Jest cheat sheet can be found  here .  Each unit test must adhere to these rules:   Each test method should focus on one test  Each test should focus on testing a single method, mocking all calls to dependent objects/methods  Verify configured mocks execute as requested  Assert that the actual response is as expected  Never skip any unit tests   Refer to  assetlibrary/src/policies/policies.service.spec.ts  for an example.  Run unit tests using  npm run test .", 
            "title": "Unit testing"
        }, 
        {
            "location": "/intermediate/", 
            "text": "Intermediate Track\n\n\nDevelopment\n\n\n\n\n\n\n\n\nTopic\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nGetting started\n\n\n\n\n\n\n\n\nPre-requisities\n\n\n\n\n\n\n\n\nTech Stack\n\n\n\n\n\n\n\n\nLocal Development\n\n\n\n\n\n\n\n\nNPM Private Repository\n\n\n\n\n\n\n\n\nDependency Injection\n\n\n\n\n\n\n\n\nAsynchronous Programming\n\n\n\n\n\n\n\n\nConfig\n\n\n\n\n\n\n\n\nUnit Testing\n\n\n\n\n\n\n\n\nIntegration Testing\n\n\n\n\n\n\n\n\n\n\nOverview\n\n\n\n\n\n\n\n\nTopic\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nHigh Level Overview\n\n\nThe big picture of CDF.\n\n\n\n\n\n\nPostman\n\n\nA Postman collection providing examples of how to call the CDF (Core) services.\n\n\n\n\n\n\n\n\nAsset Library Service\n\n\n\n\n\n\n\n\nTopic\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nOverview\n\n\nAn overview of the \nasset library\n service.\n\n\n\n\n\n\nModes\n\n\nA description of the modes the Asset Library can run, along with available functionality in each.\n\n\n\n\n\n\nTemplates (User)\n\n\nHow to configure device/group templates.\n\n\n\n\n\n\nTemplates (Developer)\n\n\nThe device and group templates system design.\n\n\n\n\n\n\nProfiles\n\n\nDevice and group profiles.\n\n\n\n\n\n\nEvents\n\n\nDetails of events published by the Asset Library.\n\n\n\n\n\n\nSwagger\n\n\nSwagger definition.\n\n\n\n\n\n\n\n\nAsset Library History Service\n\n\n\n\n\n\n\n\nTopic\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nOverview\n\n\nAn overview of the \nasset library history\n service.\n\n\n\n\n\n\nSwagger\n\n\nSwagger definition.\n\n\n\n\n\n\n\n\nProvisioning Service\n\n\n\n\n\n\n\n\nTopic\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nOverview\n\n\nAn overview of the \nprovisioning\n service.\n\n\n\n\n\n\n\n\nCertificate Activator Service\n\n\n\n\n\n\n\n\nTopic\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nOverview\n\n\nAn overview of the \ncertificateactivator\n service.\n\n\n\n\n\n\n\n\nCertificate Vendor Service\n\n\n\n\n\n\n\n\nTopic\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nOverview\n\n\nAn overview of the \ncertificatevendor\n service.\n\n\n\n\n\n\n\n\nCommands Service\n\n\n\n\n\n\n\n\nTopic\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nOverview\n\n\nAn overview of the \ncommands\n service.\n\n\n\n\n\n\nEphemeral Groups\n\n\nHow ephemeral groups are utilized to send commands to thousands of devices.\n\n\n\n\n\n\nPre-signed URLS (User)\n\n\nHow to configure and consume pre-signed urls.\n\n\n\n\n\n\nPre-signed URLS (Developer)\n\n\nImplementation details of pre-signed urls.\n\n\n\n\n\n\nSwagger\n\n\nSwagger definition.\n\n\n\n\n\n\n\n\nCustom Device Authorizer\n\n\n\n\n\n\n\n\nTopic\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nOverview\n\n\nAn example implementation of a custom authorizer that authenticates HTTP calls using the device certificate.\n\n\n\n\n\n\n\n\nDevice Monitoring Service\n\n\n\n\n\n\n\n\nTopic\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nOverview\n\n\nA device monitoring service that updates the Asset Library with near real-time device connection status.\n\n\n\n\n\n\n\n\nRequest Queue Service\n\n\n\n\n\n\n\n\nTopic\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nOverview\n\n\nA service for queueing API requests. Can be used as part of an high-availabilty strategy.", 
            "title": "Intermediate Track"
        }, 
        {
            "location": "/intermediate/#intermediate-track", 
            "text": "", 
            "title": "Intermediate Track"
        }, 
        {
            "location": "/intermediate/#development", 
            "text": "Topic  Description      Getting started     Pre-requisities     Tech Stack     Local Development     NPM Private Repository     Dependency Injection     Asynchronous Programming     Config     Unit Testing     Integration Testing", 
            "title": "Development"
        }, 
        {
            "location": "/intermediate/#overview", 
            "text": "Topic  Description      High Level Overview  The big picture of CDF.    Postman  A Postman collection providing examples of how to call the CDF (Core) services.", 
            "title": "Overview"
        }, 
        {
            "location": "/intermediate/#asset-library-service", 
            "text": "Topic  Description      Overview  An overview of the  asset library  service.    Modes  A description of the modes the Asset Library can run, along with available functionality in each.    Templates (User)  How to configure device/group templates.    Templates (Developer)  The device and group templates system design.    Profiles  Device and group profiles.    Events  Details of events published by the Asset Library.    Swagger  Swagger definition.", 
            "title": "Asset Library Service"
        }, 
        {
            "location": "/intermediate/#asset-library-history-service", 
            "text": "Topic  Description      Overview  An overview of the  asset library history  service.    Swagger  Swagger definition.", 
            "title": "Asset Library History Service"
        }, 
        {
            "location": "/intermediate/#provisioning-service", 
            "text": "Topic  Description      Overview  An overview of the  provisioning  service.", 
            "title": "Provisioning Service"
        }, 
        {
            "location": "/intermediate/#certificate-activator-service", 
            "text": "Topic  Description      Overview  An overview of the  certificateactivator  service.", 
            "title": "Certificate Activator Service"
        }, 
        {
            "location": "/intermediate/#certificate-vendor-service", 
            "text": "Topic  Description      Overview  An overview of the  certificatevendor  service.", 
            "title": "Certificate Vendor Service"
        }, 
        {
            "location": "/intermediate/#commands-service", 
            "text": "Topic  Description      Overview  An overview of the  commands  service.    Ephemeral Groups  How ephemeral groups are utilized to send commands to thousands of devices.    Pre-signed URLS (User)  How to configure and consume pre-signed urls.    Pre-signed URLS (Developer)  Implementation details of pre-signed urls.    Swagger  Swagger definition.", 
            "title": "Commands Service"
        }, 
        {
            "location": "/intermediate/#custom-device-authorizer", 
            "text": "Topic  Description      Overview  An example implementation of a custom authorizer that authenticates HTTP calls using the device certificate.", 
            "title": "Custom Device Authorizer"
        }, 
        {
            "location": "/intermediate/#device-monitoring-service", 
            "text": "Topic  Description      Overview  A device monitoring service that updates the Asset Library with near real-time device connection status.", 
            "title": "Device Monitoring Service"
        }, 
        {
            "location": "/intermediate/#request-queue-service", 
            "text": "Topic  Description      Overview  A service for queueing API requests. Can be used as part of an high-availabilty strategy.", 
            "title": "Request Queue Service"
        }, 
        {
            "location": "/postman/", 
            "text": "Postman\n\n\nPostman\n is a tool for building and executing REST calls.  A sample \nCDF (Core) Postman collection\n is provided that can be imported into Postman.", 
            "title": "Postman"
        }, 
        {
            "location": "/postman/#postman", 
            "text": "Postman  is a tool for building and executing REST calls.  A sample  CDF (Core) Postman collection  is provided that can be imported into Postman.", 
            "title": "Postman"
        }, 
        {
            "location": "/projects/overview/", 
            "text": "Connected Device Framework\n\n\nIntroduction\n\n\nManaging connected devices involves multiple phases of a device's lifecycle.  The phases a typical connected device goes through are : Product design, Manufacturing, Onboarding, Operations and Support.  In each of these phases, unique set of capabilities are required.  The Connected Device Framework (CDF) provides a set of modular services to cater to connected devices in each of their lifecycle phases.\n\n\nThe framework is particularly well suited for enterprise use cases which require product definition, onboarding and managing a diverse ecosystem of connected devices. The included components facilitate:\n\n\n\n\nProduct template definition\n\n\nProvisioning\n\n\nConfiguration and software update\n\n\nOrganizing devices into hierarchies\n\n\nMaintaining and updating device configuration\n\n\nDevice command and control\n\n\nOffloading device data to blob repository\n\n\nAnalytics of device data\n\n\n\n\nChallenges\n\n\nImplementing, deploying and maintaining IoT services can be significantly more complex than traditional software services due to a number of challenges faced:\n\n\nSignificant undifferentiated heavy lifting:\n  It can take months, if not years, to build out an IoT platform.\n\n\nSkills gap:\n  Finding product and IoT specialists is one problem, but then needing to find those same people who possess AWS knowledge is significantly harder.\n\n\nBridging historically air-gapped systems:\n  Traditionally different areas within a business, such as manufacturing, operations, and support, have been isolated from one another.  Implementing a new IoT service is a once in a generation opportunity to look at the efficiencies of bridging these systems and future proof for growth.\n\n\nLimitations with turn-key solutions:\n  Off-the-shelf solutions may be opinionated in their implementation such that incompatible limitations are introduced, as well as potential scalability issues.\n\n\nLegacy devices:\n  There may be an existing population of devices deployed in the wild that need to be transitioned into a new IoT service.\n\n\nComplex security requirements:\n  Constrained, intermittently connected devices, as well as regional governance, introduce complexity.\n\n\nLong term maintainability of software:\n  If a software's architecture and implementation does not take into consideration its longevity that comes with unforeseen emerging requirements, its maintainability, scalability and reliability can be significantly impacted as well as a business losing its agility to bring new products and services to market.\n\n\nThe \nConnected Device Framework (CDF)\n is a platform comprising of a number of production ready micro-services, all architected and implemented using software and AWS best practices, which builds upon the AWS IoT building blocks to address these challenges.\n\n\nBusiness Solutions Perspective\n\n\nThe CDF services span the following business solutions:\n\n\n\n\nLegend:  Green:  Implemented, Orange: Outstanding\n\n\nCertificate Rotation\n\n\nThe certificate vendor manages the rotation of certificates involving a number of moving parts across CDF and AWS IoT.  The creation and registration of certificates is handled outside this service (refer to cdf-provisioning), with this service focused on securely delivering certificates to devices.  \n\n\nSee \noverview\n.\n\n\nProvisioning\n\n\nThe provisioning service utilizes \nAWS IoT Device Provisioning\n to provide both programmatic (just-in-time) and bulk device provisioning capabilities.  The provisioning service simplifies the use of AWS IoT Device Provisioning by allowing for the use of S3 based provisioning templates, and abstracting a standard interface over both device provisioning capabilities.\n\n\nIn addition, the CDF Provisioning Service allows for extending the capabilities of the AWS IoT Device Provisioning templating functionality.  To provide an example, the AWS IoT Device Provisioning allows for creating certificate resources by providing a certificate signing request (CSR), a certificate ID of an existing device certificate, or a device certificate created with a CA certificate registered with AWS IoT.  This service extends these capabilities by also providing the ability to automatically create (and return) new keys and certificates for a device.\n\n\nSee \noverview\n.\n\n\nPairing\n\n\nStatus:  Not implemented.\n\n\nManages trust between an IoT device, companion mobile device, and user, allowing to perform authorized actions.\n\n\nDiscovery\n\n\nStatus:  Not implemented.\n\n\nAllows devices to auto-discover the available CDF services, along with identifying the devices own attributes and capabilities.\n\n\nCommands\n\n\nThe commands service utilizes \nAWS IoT Jobs\n to issue commands to a device or set of devices, and optionally inspect their execution status.  It augments AWS IoT jobs by providing the ability to create Job templates, and enforcing that each requested command adheres to a template before executing.\n\n\nSee \noverview\n.\n\n\nBlob Uploader\n\n\nStatus:  Not implemented.\n\n\nStore and retrieve blob objects.  Provides encryption, ingest, crawling, searching, etc.\n\n\nData Broker\n\n\nStatus:  Not implemented.\n\n\nAllows devices to directly stream data and adds rules for data flowing through IoT to configurable end points.\n\n\nProfiles\n\n\nA feature of Asset Library rather than a stand-alone service.  Allows for multiple profiles of default data and relations to be configured and applied to Asset Library devices and groups.\n\n\nSee \noverview\n.\n\n\nAsset Library History\n\n\nTracks and stores all changes made to the Asset Library (devices, groups, policies and/or templates).\n\n\nSee \noverview\n.\n\n\nAnalytics\n\n\nStatus:  Not implemented.\n\n\nAWS IoT Analytics.\n\n\nCI/CD\n\n\nStatus:  Not implemented.\n\n\nFully automated Continuous Delivery pipeline, managing the building, testing, and deployment of services.\n\n\nAutomated Deployment\n\n\nAll services have automated deployment capabilities via CloudFormation.\n\n\nHigh Availability\n\n\nAllows for capturing CDF actions when an AWS region is not available, and replaying once available again.\n\n\nSee \noverview\n.\n\n\nLogging\n\n\nCloudWatch based logging.\n\n\nAuthn / Authz\n\n\nReference implementations using Cognito, and device certificate custom authorizers.\n\n\nSee \noverview\n.\n\n\nAsset Library\n\n\nThe Asset Library service is a device registry that allows one to manage their fleet of devices placed within multiple hierarchical groups.  Each group within a hierarchy can represent something meaningful to your business such as location device types, firmware versions, etc.\n\n\nSee \noverview\n.\n\n\nModern UI/UX\n\n\nStatus:  Not implemented.\n\n\nReference UI/UX implementation.\n\n\nDevice Agents\n\n\nStatus:  Not implemented.\n\n\nReference device agents for consuming CDF services.\n\n\nArchitecture", 
            "title": "Connected Device Framework"
        }, 
        {
            "location": "/projects/overview/#connected-device-framework", 
            "text": "", 
            "title": "Connected Device Framework"
        }, 
        {
            "location": "/projects/overview/#introduction", 
            "text": "Managing connected devices involves multiple phases of a device's lifecycle.  The phases a typical connected device goes through are : Product design, Manufacturing, Onboarding, Operations and Support.  In each of these phases, unique set of capabilities are required.  The Connected Device Framework (CDF) provides a set of modular services to cater to connected devices in each of their lifecycle phases.  The framework is particularly well suited for enterprise use cases which require product definition, onboarding and managing a diverse ecosystem of connected devices. The included components facilitate:   Product template definition  Provisioning  Configuration and software update  Organizing devices into hierarchies  Maintaining and updating device configuration  Device command and control  Offloading device data to blob repository  Analytics of device data", 
            "title": "Introduction"
        }, 
        {
            "location": "/projects/overview/#challenges", 
            "text": "Implementing, deploying and maintaining IoT services can be significantly more complex than traditional software services due to a number of challenges faced:  Significant undifferentiated heavy lifting:   It can take months, if not years, to build out an IoT platform.  Skills gap:   Finding product and IoT specialists is one problem, but then needing to find those same people who possess AWS knowledge is significantly harder.  Bridging historically air-gapped systems:   Traditionally different areas within a business, such as manufacturing, operations, and support, have been isolated from one another.  Implementing a new IoT service is a once in a generation opportunity to look at the efficiencies of bridging these systems and future proof for growth.  Limitations with turn-key solutions:   Off-the-shelf solutions may be opinionated in their implementation such that incompatible limitations are introduced, as well as potential scalability issues.  Legacy devices:   There may be an existing population of devices deployed in the wild that need to be transitioned into a new IoT service.  Complex security requirements:   Constrained, intermittently connected devices, as well as regional governance, introduce complexity.  Long term maintainability of software:   If a software's architecture and implementation does not take into consideration its longevity that comes with unforeseen emerging requirements, its maintainability, scalability and reliability can be significantly impacted as well as a business losing its agility to bring new products and services to market.  The  Connected Device Framework (CDF)  is a platform comprising of a number of production ready micro-services, all architected and implemented using software and AWS best practices, which builds upon the AWS IoT building blocks to address these challenges.", 
            "title": "Challenges"
        }, 
        {
            "location": "/projects/overview/#business-solutions-perspective", 
            "text": "The CDF services span the following business solutions:   Legend:  Green:  Implemented, Orange: Outstanding", 
            "title": "Business Solutions Perspective"
        }, 
        {
            "location": "/projects/overview/#certificate-rotation", 
            "text": "The certificate vendor manages the rotation of certificates involving a number of moving parts across CDF and AWS IoT.  The creation and registration of certificates is handled outside this service (refer to cdf-provisioning), with this service focused on securely delivering certificates to devices.    See  overview .", 
            "title": "Certificate Rotation"
        }, 
        {
            "location": "/projects/overview/#provisioning", 
            "text": "The provisioning service utilizes  AWS IoT Device Provisioning  to provide both programmatic (just-in-time) and bulk device provisioning capabilities.  The provisioning service simplifies the use of AWS IoT Device Provisioning by allowing for the use of S3 based provisioning templates, and abstracting a standard interface over both device provisioning capabilities.  In addition, the CDF Provisioning Service allows for extending the capabilities of the AWS IoT Device Provisioning templating functionality.  To provide an example, the AWS IoT Device Provisioning allows for creating certificate resources by providing a certificate signing request (CSR), a certificate ID of an existing device certificate, or a device certificate created with a CA certificate registered with AWS IoT.  This service extends these capabilities by also providing the ability to automatically create (and return) new keys and certificates for a device.  See  overview .", 
            "title": "Provisioning"
        }, 
        {
            "location": "/projects/overview/#pairing", 
            "text": "Status:  Not implemented.  Manages trust between an IoT device, companion mobile device, and user, allowing to perform authorized actions.", 
            "title": "Pairing"
        }, 
        {
            "location": "/projects/overview/#discovery", 
            "text": "Status:  Not implemented.  Allows devices to auto-discover the available CDF services, along with identifying the devices own attributes and capabilities.", 
            "title": "Discovery"
        }, 
        {
            "location": "/projects/overview/#commands", 
            "text": "The commands service utilizes  AWS IoT Jobs  to issue commands to a device or set of devices, and optionally inspect their execution status.  It augments AWS IoT jobs by providing the ability to create Job templates, and enforcing that each requested command adheres to a template before executing.  See  overview .", 
            "title": "Commands"
        }, 
        {
            "location": "/projects/overview/#blob-uploader", 
            "text": "Status:  Not implemented.  Store and retrieve blob objects.  Provides encryption, ingest, crawling, searching, etc.", 
            "title": "Blob Uploader"
        }, 
        {
            "location": "/projects/overview/#data-broker", 
            "text": "Status:  Not implemented.  Allows devices to directly stream data and adds rules for data flowing through IoT to configurable end points.", 
            "title": "Data Broker"
        }, 
        {
            "location": "/projects/overview/#profiles", 
            "text": "A feature of Asset Library rather than a stand-alone service.  Allows for multiple profiles of default data and relations to be configured and applied to Asset Library devices and groups.  See  overview .", 
            "title": "Profiles"
        }, 
        {
            "location": "/projects/overview/#asset-library-history", 
            "text": "Tracks and stores all changes made to the Asset Library (devices, groups, policies and/or templates).  See  overview .", 
            "title": "Asset Library History"
        }, 
        {
            "location": "/projects/overview/#analytics", 
            "text": "Status:  Not implemented.  AWS IoT Analytics.", 
            "title": "Analytics"
        }, 
        {
            "location": "/projects/overview/#cicd", 
            "text": "Status:  Not implemented.  Fully automated Continuous Delivery pipeline, managing the building, testing, and deployment of services.", 
            "title": "CI/CD"
        }, 
        {
            "location": "/projects/overview/#automated-deployment", 
            "text": "All services have automated deployment capabilities via CloudFormation.", 
            "title": "Automated Deployment"
        }, 
        {
            "location": "/projects/overview/#high-availability", 
            "text": "Allows for capturing CDF actions when an AWS region is not available, and replaying once available again.  See  overview .", 
            "title": "High Availability"
        }, 
        {
            "location": "/projects/overview/#logging", 
            "text": "CloudWatch based logging.", 
            "title": "Logging"
        }, 
        {
            "location": "/projects/overview/#authn-authz", 
            "text": "Reference implementations using Cognito, and device certificate custom authorizers.  See  overview .", 
            "title": "Authn / Authz"
        }, 
        {
            "location": "/projects/overview/#asset-library", 
            "text": "The Asset Library service is a device registry that allows one to manage their fleet of devices placed within multiple hierarchical groups.  Each group within a hierarchy can represent something meaningful to your business such as location device types, firmware versions, etc.  See  overview .", 
            "title": "Asset Library"
        }, 
        {
            "location": "/projects/overview/#modern-uiux", 
            "text": "Status:  Not implemented.  Reference UI/UX implementation.", 
            "title": "Modern UI/UX"
        }, 
        {
            "location": "/projects/overview/#device-agents", 
            "text": "Status:  Not implemented.  Reference device agents for consuming CDF services.", 
            "title": "Device Agents"
        }, 
        {
            "location": "/projects/overview/#architecture", 
            "text": "", 
            "title": "Architecture"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/", 
            "text": "Connected Device Framework: Asset Library\n\n\nThe Asset Library service is a device registry that allows you to manage your fleet of devices within multiple hierarchical groups.  Each one of the branches of the hierarchy can represent something meaningful to your business such as supplier, location, customer, vehicle, etc.\n\n\nThe hierarchies within Asset Library are represented as \nGroups\n.  Each Group has a single parent, but can comprise of many groups and/or devices as its members.\n\n\nDevices\n can be associated with one or more \nGroups\n, each with a named relationship to its group to give context.\n\n\nDevices\n themselves can be associated with other \nDevices\n, representing a composition type of relationship.  Examples being a mote that comprises of a number of differnet sensors, or a car engine that is comprised of a number of different components.\n\n\nDifferent \nGroup Templates\n can be created to align with your business, with each Group Template having its own attributes.  An example Group Template could be a \nSite\n, with its \naddress\n being an example of an attribute.\n\n\nLikewise, \nDevice Templates\n can be created to represent the different types of devices within your fleet, each with their own attributes.\n\n\nProfiles\n can be created and applied to device and groups to populate with default attirbutes and/or relations.\n\n\nPolicies\n represent a document that can be attached to one or more groups within a hierarchy, and are automatically inherited by the devices and groups.\n\n\nVersion: 2.0.0\n\n\n/templates/devices/{templateId}\n\n\nPOST\n\n\nSummary:\n\n\nRegisters a new device template within the system, using the JSON Schema standard to define the device template attributes and constraints.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nLocated in\n\n\nDescription\n\n\nRequired\n\n\nSchema\n\n\n\n\n\n\n\n\n\n\ntemplateId\n\n\npath\n\n\nID of device template to publish\n\n\nYes\n\n\nstring\n\n\n\n\n\n\n\n\nResponses\n\n\n\n\n\n\n\n\nCode\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n201\n\n\n\n\n\n\n\n\n400\n\n\n\n\n\n\n\n\n\n\nGET\n\n\nSummary:\n\n\nFind device template by ID\n\n\nDescription:\n\n\nReturns a single device template definition\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nLocated in\n\n\nDescription\n\n\nRequired\n\n\nSchema\n\n\n\n\n\n\n\n\n\n\ntemplateId\n\n\npath\n\n\nID of device template to publish\n\n\nYes\n\n\nstring\n\n\n\n\n\n\nstatus\n\n\nquery\n\n\nStatus of device template to return\n\n\nYes\n\n\nstring\n\n\n\n\n\n\n\n\nResponses\n\n\n\n\n\n\n\n\nCode\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n200\n\n\nOK\n\n\n\n\n\n\n400\n\n\n\n\n\n\n\n\n404\n\n\n\n\n\n\n\n\n\n\nPATCH\n\n\nSummary:\n\n\nUpdate an existing device template.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nLocated in\n\n\nDescription\n\n\nRequired\n\n\nSchema\n\n\n\n\n\n\n\n\n\n\ntemplateId\n\n\npath\n\n\nID of device template to publish\n\n\nYes\n\n\nstring\n\n\n\n\n\n\n\n\nResponses\n\n\n\n\n\n\n\n\nCode\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n204\n\n\nOK\n\n\n\n\n\n\n400\n\n\n\n\n\n\n\n\n404\n\n\n\n\n\n\n\n\n\n\nDELETE\n\n\nSummary:\n\n\nDeletes an existing device template.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nLocated in\n\n\nDescription\n\n\nRequired\n\n\nSchema\n\n\n\n\n\n\n\n\n\n\ntemplateId\n\n\npath\n\n\nID of device template to publish\n\n\nYes\n\n\nstring\n\n\n\n\n\n\n\n\nResponses\n\n\n\n\n\n\n\n\nCode\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n204\n\n\nOK\n\n\n\n\n\n\n400\n\n\n\n\n\n\n\n\n404\n\n\n\n\n\n\n\n\n\n\n/templates/devices/{templateId}/publish\n\n\nPUT\n\n\nSummary:\n\n\nPublishes an existing device template.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nLocated in\n\n\nDescription\n\n\nRequired\n\n\nSchema\n\n\n\n\n\n\n\n\n\n\ntemplateId\n\n\npath\n\n\nID of device template to publish\n\n\nYes\n\n\nstring\n\n\n\n\n\n\n\n\nResponses\n\n\n\n\n\n\n\n\nCode\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n204\n\n\nOK\n\n\n\n\n\n\n400\n\n\n\n\n\n\n\n\n404\n\n\n\n\n\n\n\n\n\n\n/templates/groups/{templateId}\n\n\nPOST\n\n\nSummary:\n\n\nRegisters a new group template within the system, using the JSON Schema standard to define the group template attributes and constraints.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nLocated in\n\n\nDescription\n\n\nRequired\n\n\nSchema\n\n\n\n\n\n\n\n\n\n\ntemplateId\n\n\npath\n\n\nID of group template to return\n\n\nYes\n\n\nstring\n\n\n\n\n\n\n\n\nResponses\n\n\n\n\n\n\n\n\nCode\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n201\n\n\n\n\n\n\n\n\n400\n\n\n\n\n\n\n\n\n\n\nGET\n\n\nSummary:\n\n\nFind group template by ID\n\n\nDescription:\n\n\nReturns a single group template definition\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nLocated in\n\n\nDescription\n\n\nRequired\n\n\nSchema\n\n\n\n\n\n\n\n\n\n\ntemplateId\n\n\npath\n\n\nID of group template to return\n\n\nYes\n\n\nstring\n\n\n\n\n\n\nstatus\n\n\nquery\n\n\nStatus of group template to return\n\n\nYes\n\n\nstring\n\n\n\n\n\n\n\n\nResponses\n\n\n\n\n\n\n\n\nCode\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n200\n\n\nOK\n\n\n\n\n\n\n400\n\n\n\n\n\n\n\n\n404\n\n\n\n\n\n\n\n\n\n\nPATCH\n\n\nSummary:\n\n\nUpdate an existing group template.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nLocated in\n\n\nDescription\n\n\nRequired\n\n\nSchema\n\n\n\n\n\n\n\n\n\n\ntemplateId\n\n\npath\n\n\nID of group template to return\n\n\nYes\n\n\nstring\n\n\n\n\n\n\n\n\nResponses\n\n\n\n\n\n\n\n\nCode\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n204\n\n\nOK\n\n\n\n\n\n\n400\n\n\n\n\n\n\n\n\n404\n\n\n\n\n\n\n\n\n\n\nDELETE\n\n\nSummary:\n\n\nDeletes an existing group template.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nLocated in\n\n\nDescription\n\n\nRequired\n\n\nSchema\n\n\n\n\n\n\n\n\n\n\ntemplateId\n\n\npath\n\n\nID of group template to return\n\n\nYes\n\n\nstring\n\n\n\n\n\n\n\n\nResponses\n\n\n\n\n\n\n\n\nCode\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n204\n\n\nOK\n\n\n\n\n\n\n400\n\n\n\n\n\n\n\n\n404\n\n\n\n\n\n\n\n\n\n\n/templates/groups/{templateId}/publish\n\n\nPUT\n\n\nSummary:\n\n\nPublishes an existing group template.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nLocated in\n\n\nDescription\n\n\nRequired\n\n\nSchema\n\n\n\n\n\n\n\n\n\n\ntemplateId\n\n\npath\n\n\nID of group template to publish\n\n\nYes\n\n\nstring\n\n\n\n\n\n\n\n\nResponses\n\n\n\n\n\n\n\n\nCode\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n204\n\n\nOK\n\n\n\n\n\n\n400\n\n\n\n\n\n\n\n\n404\n\n\n\n\n\n\n\n\n\n\n/devices\n\n\nPOST\n\n\nSummary:\n\n\nAdd a new device to the asset library, adding it to the \n/unprovisioned\n group if no group is specified.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nLocated in\n\n\nDescription\n\n\nRequired\n\n\nSchema\n\n\n\n\n\n\n\n\n\n\napplyProfile\n\n\nquery\n\n\nOptionally apply a profile to the device to update unset attributes with attributes from the profile.\n\n\nNo\n\n\nstring\n\n\n\n\n\n\n\n\nResponses\n\n\n\n\n\n\n\n\nCode\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n201\n\n\n\n\n\n\n\n\n400\n\n\n\n\n\n\n\n\n\n\n/bulkdevices\n\n\nPOST\n\n\nSummary:\n\n\nAdds a batch of devices in bulk to the asset library, adding them to the \n/unprovisioned\n group if no groups are specified.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nLocated in\n\n\nDescription\n\n\nRequired\n\n\nSchema\n\n\n\n\n\n\n\n\n\n\napplyProfile\n\n\nquery\n\n\nOptionally apply a profile to the device to update unset attributes with attributes from the profile.\n\n\nNo\n\n\nstring\n\n\n\n\n\n\n\n\nResponses\n\n\n\n\n\n\n\n\nCode\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n201\n\n\n\n\n\n\n\n\n400\n\n\n\n\n\n\n\n\n\n\nPATCH\n\n\nSummary:\n\n\nUpdate a batch of existing devices\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nLocated in\n\n\nDescription\n\n\nRequired\n\n\nSchema\n\n\n\n\n\n\n\n\n\n\napplyProfile\n\n\nquery\n\n\nOptionally apply a profile to the device to update unset attributes with attributes from the profile.\n\n\nNo\n\n\nstring\n\n\n\n\n\n\n\n\nResponses\n\n\n\n\n\n\n\n\nCode\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n204\n\n\nsuccessful operation\n\n\n\n\n\n\n400\n\n\n\n\n\n\n\n\n404\n\n\n\n\n\n\n\n\n\n\n/devices/{deviceId}\n\n\nGET\n\n\nSummary:\n\n\nFind device by ID\n\n\nDescription:\n\n\nReturns a single device\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nLocated in\n\n\nDescription\n\n\nRequired\n\n\nSchema\n\n\n\n\n\n\n\n\n\n\ndeviceId\n\n\npath\n\n\nID of device to return\n\n\nYes\n\n\nstring\n\n\n\n\n\n\nexpandComponents\n\n\nquery\n\n\nBy default, components of a device are not returned. Passing \ntrue\n will return and expand a devices components.\n\n\nNo\n\n\nboolean\n\n\n\n\n\n\nattributes\n\n\nquery\n\n\nOptionally only return these specific attributes.  By default returns all attributes.\n\n\nNo\n\n\n[ string ]\n\n\n\n\n\n\nincludeGroups\n\n\nquery\n\n\nOptionally only return these specific related groups.  By default returns all related groups.\n\n\nNo\n\n\n[ string ]\n\n\n\n\n\n\nexpandRelatedDevices\n\n\nquery\n\n\nBy default, only related device id's are returned.  Passing \ntrue\n will return expanded related devices instead of just its device id.\n\n\nNo\n\n\nboolean\n\n\n\n\n\n\nexpandRelatedGroups\n\n\nquery\n\n\nBy default, only related group paths are returned.  Passing \ntrue\n will return expanded related groups instead of just its path.\n\n\nNo\n\n\nboolean\n\n\n\n\n\n\nfilterRelations\n\n\nquery\n\n\nReturn related devices/groups filtered by relation.  Specify the relation in the format of \n{direction}:{relation}\n, where \n{direction}\n may be \nin\n, \nout\n or \nboth\n.\n\n\nNo\n\n\n[ string ]\n\n\n\n\n\n\n\n\nResponses\n\n\n\n\n\n\n\n\nCode\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n200\n\n\nsuccessful operation\n\n\n\n\n\n\n400\n\n\n\n\n\n\n\n\n404\n\n\n\n\n\n\n\n\n\n\nDELETE\n\n\nSummary:\n\n\nDelete device of specified ID\n\n\nDescription:\n\n\nDeletes a single device\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nLocated in\n\n\nDescription\n\n\nRequired\n\n\nSchema\n\n\n\n\n\n\n\n\n\n\ndeviceId\n\n\npath\n\n\nID of device to return\n\n\nYes\n\n\nstring\n\n\n\n\n\n\n\n\nResponses\n\n\n\n\n\n\n\n\nCode\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n204\n\n\nsuccessful operation\n\n\n\n\n\n\n404\n\n\n\n\n\n\n\n\n\n\nPATCH\n\n\nSummary:\n\n\nUpdate an existing device attributes\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nLocated in\n\n\nDescription\n\n\nRequired\n\n\nSchema\n\n\n\n\n\n\n\n\n\n\ndeviceId\n\n\npath\n\n\nID of device to return\n\n\nYes\n\n\nstring\n\n\n\n\n\n\napplyProfile\n\n\nquery\n\n\nOptionally apply a profile to the device to update unset attributes with attributes from the profile.\n\n\nNo\n\n\nstring\n\n\n\n\n\n\n\n\nResponses\n\n\n\n\n\n\n\n\nCode\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n204\n\n\nsuccessful operation\n\n\n\n\n\n\n400\n\n\n\n\n\n\n\n\n404\n\n\n\n\n\n\n\n\n\n\n/devices/{deviceId}/{relationship}/groups\n\n\nGET\n\n\nSummary:\n\n\nList a devices related groups.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nLocated in\n\n\nDescription\n\n\nRequired\n\n\nSchema\n\n\n\n\n\n\n\n\n\n\ndeviceId\n\n\npath\n\n\nId of device\n\n\nYes\n\n\nstring\n\n\n\n\n\n\nrelationship\n\n\npath\n\n\nThe relationship between the device and group as defined by the device template.\n\n\nYes\n\n\nstring\n\n\n\n\n\n\ntemplate\n\n\nquery\n\n\nOptional filter to return a specific group template\n\n\nNo\n\n\nstring\n\n\n\n\n\n\ndirection\n\n\nquery\n\n\nDirection of relation\n\n\nNo\n\n\n[ string ]\n\n\n\n\n\n\noffset\n\n\nquery\n\n\nThe index to start paginated results from\n\n\nNo\n\n\ninteger\n\n\n\n\n\n\ncount\n\n\nquery\n\n\nThe maximum number of results to return\n\n\nNo\n\n\ninteger\n\n\n\n\n\n\n\n\nResponses\n\n\n\n\n\n\n\n\nCode\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n200\n\n\nsuccessful operation\n\n\n\n\n\n\n404\n\n\n\n\n\n\n\n\n\n\n/devices/{deviceId}/{relationship}/groups/{groupPath}\n\n\nPUT\n\n\nSummary:\n\n\nAssociates a device to a group, giving context to its relationship.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nLocated in\n\n\nDescription\n\n\nRequired\n\n\nSchema\n\n\n\n\n\n\n\n\n\n\ndeviceId\n\n\npath\n\n\nId of device to attach to the group\n\n\nYes\n\n\nstring\n\n\n\n\n\n\nrelationship\n\n\npath\n\n\nThe outgoing relationship between the device and group. For example, this may reflect \nlocatedAt\n or \nmanufacturedAt\n relations.\n\n\nYes\n\n\nstring\n\n\n\n\n\n\ngroupPath\n\n\npath\n\n\nPath of group.\n\n\nYes\n\n\nstring\n\n\n\n\n\n\n\n\nResponses\n\n\n\n\n\n\n\n\nCode\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n204\n\n\nsuccessful operation\n\n\n\n\n\n\n400\n\n\n\n\n\n\n\n\n404\n\n\n\n\n\n\n\n\n\n\nDELETE\n\n\nSummary:\n\n\nRemoves a device from an associated group\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nLocated in\n\n\nDescription\n\n\nRequired\n\n\nSchema\n\n\n\n\n\n\n\n\n\n\ndeviceId\n\n\npath\n\n\nId of device to attach to the group\n\n\nYes\n\n\nstring\n\n\n\n\n\n\nrelationship\n\n\npath\n\n\nThe outgoing relationship between the device and group. For example, this may reflect \nlocatedAt\n or \nmanufacturedAt\n relations.\n\n\nYes\n\n\nstring\n\n\n\n\n\n\ngroupPath\n\n\npath\n\n\nPath of group.\n\n\nYes\n\n\nstring\n\n\n\n\n\n\n\n\nResponses\n\n\n\n\n\n\n\n\nCode\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n204\n\n\nsuccessful operation\n\n\n\n\n\n\n400\n\n\n\n\n\n\n\n\n404\n\n\n\n\n\n\n\n\n\n\n/devices/{deviceId}/{relationship}/{direction}/groups/{groupPath}\n\n\nPUT\n\n\nSummary:\n\n\nAssociates a device to a group, giving context to its relationship.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nLocated in\n\n\nDescription\n\n\nRequired\n\n\nSchema\n\n\n\n\n\n\n\n\n\n\ndeviceId\n\n\npath\n\n\nId of device to attach to the group\n\n\nYes\n\n\nstring\n\n\n\n\n\n\nrelationship\n\n\npath\n\n\nThe outgoing relationship between the device and group. For example, this may reflect \nlocatedAt\n or \nmanufacturedAt\n relations.\n\n\nYes\n\n\nstring\n\n\n\n\n\n\ndirection\n\n\npath\n\n\nThe direction of the relationship \nin\n or \nout\n\n\nYes\n\n\nstring\n\n\n\n\n\n\ngroupPath\n\n\npath\n\n\nPath of group.\n\n\nYes\n\n\nstring\n\n\n\n\n\n\n\n\nResponses\n\n\n\n\n\n\n\n\nCode\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n204\n\n\nsuccessful operation\n\n\n\n\n\n\n400\n\n\n\n\n\n\n\n\n404\n\n\n\n\n\n\n\n\n\n\nDELETE\n\n\nSummary:\n\n\nRemoves a device from an associated group\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nLocated in\n\n\nDescription\n\n\nRequired\n\n\nSchema\n\n\n\n\n\n\n\n\n\n\ndeviceId\n\n\npath\n\n\nId of device to attach to the group\n\n\nYes\n\n\nstring\n\n\n\n\n\n\nrelationship\n\n\npath\n\n\nThe outgoing relationship between the device and group. For example, this may reflect \nlocatedAt\n or \nmanufacturedAt\n relations.\n\n\nYes\n\n\nstring\n\n\n\n\n\n\ndirection\n\n\npath\n\n\nThe direction of the relationship \nin\n or \nout\n\n\nYes\n\n\nstring\n\n\n\n\n\n\ngroupPath\n\n\npath\n\n\nPath of group.\n\n\nYes\n\n\nstring\n\n\n\n\n\n\n\n\nResponses\n\n\n\n\n\n\n\n\nCode\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n204\n\n\nsuccessful operation\n\n\n\n\n\n\n400\n\n\n\n\n\n\n\n\n404\n\n\n\n\n\n\n\n\n\n\n/devices/{deviceId}/{relationship}/devices\n\n\nGET\n\n\nSummary:\n\n\nList a devices related devices.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nLocated in\n\n\nDescription\n\n\nRequired\n\n\nSchema\n\n\n\n\n\n\n\n\n\n\ndeviceId\n\n\npath\n\n\nId of device\n\n\nYes\n\n\nstring\n\n\n\n\n\n\nrelationship\n\n\npath\n\n\nThe relationship between the device and the other device as defined in the device template.\n\n\nYes\n\n\nstring\n\n\n\n\n\n\ntemplate\n\n\nquery\n\n\nOptional filter to return a specific device template\n\n\nNo\n\n\nstring\n\n\n\n\n\n\ndirection\n\n\nquery\n\n\nDirection of relation\n\n\nNo\n\n\n[ string ]\n\n\n\n\n\n\nstate\n\n\nquery\n\n\nReturn devices of a specific state\n\n\nNo\n\n\n[ string ]\n\n\n\n\n\n\noffset\n\n\nquery\n\n\nThe index to start paginated results from\n\n\nNo\n\n\ninteger\n\n\n\n\n\n\ncount\n\n\nquery\n\n\nThe maximum number of results to return\n\n\nNo\n\n\ninteger\n\n\n\n\n\n\n\n\nResponses\n\n\n\n\n\n\n\n\nCode\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n200\n\n\nsuccessful operation\n\n\n\n\n\n\n404\n\n\n\n\n\n\n\n\n\n\n/devices/{deviceId}/{relationship}/devices/{otherDeviceId}\n\n\nPUT\n\n\nSummary:\n\n\nAssociates a device to another device, giving context to its relationship.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nLocated in\n\n\nDescription\n\n\nRequired\n\n\nSchema\n\n\n\n\n\n\n\n\n\n\ndeviceId\n\n\npath\n\n\nId of source device\n\n\nYes\n\n\nstring\n\n\n\n\n\n\nrelationship\n\n\npath\n\n\nThe relationship between the device and the other device as defined in the device template.\n\n\nYes\n\n\nstring\n\n\n\n\n\n\notherDeviceId\n\n\npath\n\n\nID of device to create relationship to.\n\n\nYes\n\n\nstring\n\n\n\n\n\n\n\n\nResponses\n\n\n\n\n\n\n\n\nCode\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n204\n\n\nsuccessful operation\n\n\n\n\n\n\n400\n\n\n\n\n\n\n\n\n404\n\n\n\n\n\n\n\n\n\n\nDELETE\n\n\nSummary:\n\n\nRemoves a device from an associated device\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nLocated in\n\n\nDescription\n\n\nRequired\n\n\nSchema\n\n\n\n\n\n\n\n\n\n\ndeviceId\n\n\npath\n\n\nId of source device\n\n\nYes\n\n\nstring\n\n\n\n\n\n\nrelationship\n\n\npath\n\n\nThe relationship between the device and the other device as defined in the device template.\n\n\nYes\n\n\nstring\n\n\n\n\n\n\notherDeviceId\n\n\npath\n\n\nID of device to create relationship to.\n\n\nYes\n\n\nstring\n\n\n\n\n\n\n\n\nResponses\n\n\n\n\n\n\n\n\nCode\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n204\n\n\nsuccessful operation\n\n\n\n\n\n\n400\n\n\n\n\n\n\n\n\n404\n\n\n\n\n\n\n\n\n\n\n/devices/{deviceId}/{relationship}/{direction}/devices/{otherDeviceId}\n\n\nPUT\n\n\nSummary:\n\n\nAssociates a device to another device, giving context to its relationship.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nLocated in\n\n\nDescription\n\n\nRequired\n\n\nSchema\n\n\n\n\n\n\n\n\n\n\ndeviceId\n\n\npath\n\n\nId of source device\n\n\nYes\n\n\nstring\n\n\n\n\n\n\nrelationship\n\n\npath\n\n\nThe relationship between the device and the other device as defined in the device template.\n\n\nYes\n\n\nstring\n\n\n\n\n\n\ndirection\n\n\npath\n\n\nDirection of the relationship - \nin\n or \nout\n.\n\n\nYes\n\n\nstring\n\n\n\n\n\n\notherDeviceId\n\n\npath\n\n\nID of device to create relationship to.\n\n\nYes\n\n\nstring\n\n\n\n\n\n\n\n\nResponses\n\n\n\n\n\n\n\n\nCode\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n204\n\n\nsuccessful operation\n\n\n\n\n\n\n400\n\n\n\n\n\n\n\n\n404\n\n\n\n\n\n\n\n\n\n\nDELETE\n\n\nSummary:\n\n\nRemoves a device from an associated device\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nLocated in\n\n\nDescription\n\n\nRequired\n\n\nSchema\n\n\n\n\n\n\n\n\n\n\ndeviceId\n\n\npath\n\n\nId of source device\n\n\nYes\n\n\nstring\n\n\n\n\n\n\nrelationship\n\n\npath\n\n\nThe relationship between the device and the other device as defined in the device template.\n\n\nYes\n\n\nstring\n\n\n\n\n\n\ndirection\n\n\npath\n\n\nDirection of the relationship - \nin\n or \nout\n.\n\n\nYes\n\n\nstring\n\n\n\n\n\n\notherDeviceId\n\n\npath\n\n\nID of device to create relationship to.\n\n\nYes\n\n\nstring\n\n\n\n\n\n\n\n\nResponses\n\n\n\n\n\n\n\n\nCode\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n204\n\n\nsuccessful operation\n\n\n\n\n\n\n400\n\n\n\n\n\n\n\n\n404\n\n\n\n\n\n\n\n\n\n\n/devices/{deviceId}/components\n\n\nPOST\n\n\nSummary:\n\n\nCreatea a new component and adds to the device.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nLocated in\n\n\nDescription\n\n\nRequired\n\n\nSchema\n\n\n\n\n\n\n\n\n\n\ndeviceId\n\n\npath\n\n\nId of parent device\n\n\nYes\n\n\nstring\n\n\n\n\n\n\n\n\nResponses\n\n\n\n\n\n\n\n\nCode\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n201\n\n\n\n\n\n\n\n\n400\n\n\n\n\n\n\n\n\n\n\n/devices/{deviceId}/components/{componentId}\n\n\nPATCH\n\n\nSummary:\n\n\nUpdates the component of a device.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nLocated in\n\n\nDescription\n\n\nRequired\n\n\nSchema\n\n\n\n\n\n\n\n\n\n\ndeviceId\n\n\npath\n\n\nId of parent device\n\n\nYes\n\n\nstring\n\n\n\n\n\n\ncomponentId\n\n\npath\n\n\nID of child component\n\n\nYes\n\n\nstring\n\n\n\n\n\n\n\n\nResponses\n\n\n\n\n\n\n\n\nCode\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n204\n\n\nsuccessful operation\n\n\n\n\n\n\n400\n\n\n\n\n\n\n\n\n404\n\n\n\n\n\n\n\n\n\n\nDELETE\n\n\nSummary:\n\n\nDeletes a component of a devoce.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nLocated in\n\n\nDescription\n\n\nRequired\n\n\nSchema\n\n\n\n\n\n\n\n\n\n\ndeviceId\n\n\npath\n\n\nId of parent device\n\n\nYes\n\n\nstring\n\n\n\n\n\n\ncomponentId\n\n\npath\n\n\nID of child component\n\n\nYes\n\n\nstring\n\n\n\n\n\n\n\n\nResponses\n\n\n\n\n\n\n\n\nCode\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n204\n\n\nsuccessful operation\n\n\n\n\n\n\n400\n\n\n\n\n\n\n\n\n404\n\n\n\n\n\n\n\n\n\n\n/groups\n\n\nPOST\n\n\nSummary:\n\n\nAdds a new group to the device library as a child of the \nparentPath\n as specified in the request body.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nLocated in\n\n\nDescription\n\n\nRequired\n\n\nSchema\n\n\n\n\n\n\n\n\n\n\napplyProfile\n\n\nquery\n\n\nOptionally apply a profile to the device to update unset attributes with attributes from the profile.\n\n\nNo\n\n\nstring\n\n\n\n\n\n\n\n\nResponses\n\n\n\n\n\n\n\n\nCode\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n201\n\n\n\n\n\n\n\n\n400\n\n\n\n\n\n\n\n\n\n\n/bulkgroups\n\n\nPOST\n\n\nSummary:\n\n\nAdds a batch of new group to the asset library as a child of the \nparentPath\n as specified in the request body.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nLocated in\n\n\nDescription\n\n\nRequired\n\n\nSchema\n\n\n\n\n\n\n\n\n\n\napplyProfile\n\n\nquery\n\n\nOptionally apply a profile to the device to update unset attributes with attributes from the profile.\n\n\nNo\n\n\nstring\n\n\n\n\n\n\n\n\nResponses\n\n\n\n\n\n\n\n\nCode\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n201\n\n\n\n\n\n\n\n\n400\n\n\n\n\n\n\n\n\n\n\n/groups/{groupPath}\n\n\nGET\n\n\nSummary:\n\n\nFind group by Group's path\n\n\nDescription:\n\n\nReturns a single group\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nLocated in\n\n\nDescription\n\n\nRequired\n\n\nSchema\n\n\n\n\n\n\n\n\n\n\ngroupPath\n\n\npath\n\n\nPath of group to return\n\n\nYes\n\n\nstring\n\n\n\n\n\n\n\n\nResponses\n\n\n\n\n\n\n\n\nCode\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n200\n\n\nsuccessful operation\n\n\n\n\n\n\n404\n\n\n\n\n\n\n\n\n\n\nDELETE\n\n\nSummary:\n\n\nDelete group with supplied path\n\n\nDescription:\n\n\nDeletes a single group\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nLocated in\n\n\nDescription\n\n\nRequired\n\n\nSchema\n\n\n\n\n\n\n\n\n\n\ngroupPath\n\n\npath\n\n\nPath of group to return\n\n\nYes\n\n\nstring\n\n\n\n\n\n\n\n\nResponses\n\n\n\n\n\n\n\n\nCode\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n204\n\n\nsuccessful operation\n\n\n\n\n\n\n404\n\n\n\n\n\n\n\n\n\n\nPATCH\n\n\nSummary:\n\n\nUpdate an existing group attributes, including changing its parent group.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nLocated in\n\n\nDescription\n\n\nRequired\n\n\nSchema\n\n\n\n\n\n\n\n\n\n\ngroupPath\n\n\npath\n\n\nPath of group to return\n\n\nYes\n\n\nstring\n\n\n\n\n\n\napplyProfile\n\n\nquery\n\n\nOptionally apply a profile to the device to update unset attributes with attributes from the profile.\n\n\nNo\n\n\nstring\n\n\n\n\n\n\n\n\nResponses\n\n\n\n\n\n\n\n\nCode\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n204\n\n\nsuccessful operation\n\n\n\n\n\n\n400\n\n\n\n\n\n\n\n\n404\n\n\n\n\n\n\n\n\n\n\n/groups/{groupPath}/members/devices\n\n\nGET\n\n\nSummary:\n\n\nList device members of group for supplied Group name\n\n\nDescription:\n\n\nReturns device members of group\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nLocated in\n\n\nDescription\n\n\nRequired\n\n\nSchema\n\n\n\n\n\n\n\n\n\n\ngroupPath\n\n\npath\n\n\nPath of group to return its device members. A path of '/' can be passed as id to return top level device members\n\n\nYes\n\n\nstring\n\n\n\n\n\n\ntemplate\n\n\nquery\n\n\nOptional filter to return a specific device template\n\n\nNo\n\n\nstring\n\n\n\n\n\n\nstate\n\n\nquery\n\n\nReturn devices of a specific state\n\n\nNo\n\n\n[ string ]\n\n\n\n\n\n\noffset\n\n\nquery\n\n\nThe index to start paginated results from\n\n\nNo\n\n\ninteger\n\n\n\n\n\n\ncount\n\n\nquery\n\n\nThe maximum number of results to return\n\n\nNo\n\n\ninteger\n\n\n\n\n\n\n\n\nResponses\n\n\n\n\n\n\n\n\nCode\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n200\n\n\nsuccessful operation\n\n\n\n\n\n\n400\n\n\n\n\n\n\n\n\n404\n\n\n\n\n\n\n\n\n\n\n/groups/{groupPath}/members/groups\n\n\nGET\n\n\nSummary:\n\n\nList group members of group for supplied Group name\n\n\nDescription:\n\n\nReturns group members of group\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nLocated in\n\n\nDescription\n\n\nRequired\n\n\nSchema\n\n\n\n\n\n\n\n\n\n\ngroupPath\n\n\npath\n\n\nPath of group to return its group members. A path of '/' can be passed as id to return top level group members\n\n\nYes\n\n\nstring\n\n\n\n\n\n\ntemplate\n\n\nquery\n\n\nOptional filter to return a specific group sub-type\n\n\nNo\n\n\nstring\n\n\n\n\n\n\noffset\n\n\nquery\n\n\nThe index to start paginated results from\n\n\nNo\n\n\ninteger\n\n\n\n\n\n\ncount\n\n\nquery\n\n\nThe maximum number of results to return\n\n\nNo\n\n\ninteger\n\n\n\n\n\n\n\n\nResponses\n\n\n\n\n\n\n\n\nCode\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n200\n\n\nsuccessful operation\n\n\n\n\n\n\n400\n\n\n\n\n\n\n\n\n404\n\n\n\n\n\n\n\n\n\n\n/groups/{groupPath}/memberships\n\n\nGET\n\n\nSummary:\n\n\nList all ancestor groups of a specific group.\n\n\nDescription:\n\n\nList all ancestor groups of a specific group.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nLocated in\n\n\nDescription\n\n\nRequired\n\n\nSchema\n\n\n\n\n\n\n\n\n\n\ngroupPath\n\n\npath\n\n\nPath of group for fetching the membership\n\n\nYes\n\n\nstring\n\n\n\n\n\n\noffset\n\n\nquery\n\n\nThe index to start paginated results from\n\n\nNo\n\n\ninteger\n\n\n\n\n\n\ncount\n\n\nquery\n\n\nThe maximum number of results to return\n\n\nNo\n\n\ninteger\n\n\n\n\n\n\n\n\nResponses\n\n\n\n\n\n\n\n\nCode\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n200\n\n\nsuccessful operation\n\n\n\n\n\n\n400\n\n\n\n\n\n\n\n\n404\n\n\n\n\n\n\n\n\n\n\n/groups/{groupPath}/{relationship}/devices\n\n\nGET\n\n\nSummary:\n\n\nList a groups related devices.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nLocated in\n\n\nDescription\n\n\nRequired\n\n\nSchema\n\n\n\n\n\n\n\n\n\n\ngroupPath\n\n\npath\n\n\nPath of source group\n\n\nYes\n\n\nstring\n\n\n\n\n\n\nrelationship\n\n\npath\n\n\nThe relationship between the group and the devices as defined by the group/device templatea.  Use \n%2A\n (urlencoded \n*\n) to return all.\n\n\nYes\n\n\nstring\n\n\n\n\n\n\ntemplate\n\n\nquery\n\n\nOptional filter to return a specific device template\n\n\nNo\n\n\nstring\n\n\n\n\n\n\ndirection\n\n\nquery\n\n\nDirection of relation\n\n\nNo\n\n\n[ string ]\n\n\n\n\n\n\nstate\n\n\nquery\n\n\nReturn devices of a specific state\n\n\nNo\n\n\n[ string ]\n\n\n\n\n\n\noffset\n\n\nquery\n\n\nThe index to start paginated results from\n\n\nNo\n\n\ninteger\n\n\n\n\n\n\ncount\n\n\nquery\n\n\nThe maximum number of results to return\n\n\nNo\n\n\ninteger\n\n\n\n\n\n\n\n\nResponses\n\n\n\n\n\n\n\n\nCode\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n200\n\n\nsuccessful operation\n\n\n\n\n\n\n404\n\n\n\n\n\n\n\n\n\n\n/groups/{groupPath}/{relationship}/groups\n\n\nGET\n\n\nSummary:\n\n\nList a groups related groups.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nLocated in\n\n\nDescription\n\n\nRequired\n\n\nSchema\n\n\n\n\n\n\n\n\n\n\ngroupPath\n\n\npath\n\n\nPath of source group\n\n\nYes\n\n\nstring\n\n\n\n\n\n\nrelationship\n\n\npath\n\n\nThe relationship between the groups as defined by the group template.  Use \n%2A\n (urlencoded \n*\n) to return all.\n\n\nYes\n\n\nstring\n\n\n\n\n\n\ntemplate\n\n\nquery\n\n\nOptional filter to return a specific group template\n\n\nNo\n\n\nstring\n\n\n\n\n\n\ndirection\n\n\nquery\n\n\nDirection of relation\n\n\nNo\n\n\n[ string ]\n\n\n\n\n\n\noffset\n\n\nquery\n\n\nThe index to start paginated results from\n\n\nNo\n\n\ninteger\n\n\n\n\n\n\ncount\n\n\nquery\n\n\nThe maximum number of results to return\n\n\nNo\n\n\ninteger\n\n\n\n\n\n\n\n\nResponses\n\n\n\n\n\n\n\n\nCode\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n200\n\n\nsuccessful operation\n\n\n\n\n\n\n404\n\n\n\n\n\n\n\n\n\n\n/groups/{sourceGroupPath}/{relationship}/groups/{targetGroupPath}\n\n\nPUT\n\n\nSummary:\n\n\nAssociates a group with another group, giving context to its relationship.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nLocated in\n\n\nDescription\n\n\nRequired\n\n\nSchema\n\n\n\n\n\n\n\n\n\n\nsourceGroupPath\n\n\npath\n\n\nPath of source group\n\n\nYes\n\n\nstring\n\n\n\n\n\n\nrelationship\n\n\npath\n\n\nThe relationship between the groups. For example, this may reflect \nlocatedAt\n or \nmanufacturedAt\n relations.\n\n\nYes\n\n\nstring\n\n\n\n\n\n\ntargetGroupPath\n\n\npath\n\n\nPath of target group\n\n\nYes\n\n\nstring\n\n\n\n\n\n\n\n\nResponses\n\n\n\n\n\n\n\n\nCode\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n204\n\n\nsuccessful operation\n\n\n\n\n\n\n400\n\n\n\n\n\n\n\n\n404\n\n\n\n\n\n\n\n\n\n\nDELETE\n\n\nSummary:\n\n\nRemoves a group from an associated group\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nLocated in\n\n\nDescription\n\n\nRequired\n\n\nSchema\n\n\n\n\n\n\n\n\n\n\nsourceGroupPath\n\n\npath\n\n\nPath of source group\n\n\nYes\n\n\nstring\n\n\n\n\n\n\nrelationship\n\n\npath\n\n\nThe relationship between the groups. For example, this may reflect \nlocatedAt\n or \nmanufacturedAt\n relations.\n\n\nYes\n\n\nstring\n\n\n\n\n\n\ntargetGroupPath\n\n\npath\n\n\nPath of target group\n\n\nYes\n\n\nstring\n\n\n\n\n\n\n\n\nResponses\n\n\n\n\n\n\n\n\nCode\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n204\n\n\nsuccessful operation\n\n\n\n\n\n\n400\n\n\n\n\n\n\n\n\n404\n\n\n\n\n\n\n\n\n\n\n/profiles/device/{templateId}\n\n\nPOST\n\n\nSummary:\n\n\nAdds a new device profile for a specific template.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nLocated in\n\n\nDescription\n\n\nRequired\n\n\nSchema\n\n\n\n\n\n\n\n\n\n\ntemplateId\n\n\npath\n\n\nID of the device template\n\n\nYes\n\n\nstring\n\n\n\n\n\n\n\n\nResponses\n\n\n\n\n\n\n\n\nCode\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n201\n\n\n\n\n\n\n\n\n400\n\n\n\n\n\n\n\n\n\n\nGET\n\n\nSummary:\n\n\nReturn all device profiles for a specific template\n\n\nDescription:\n\n\nReturnsReturn all device profiles for a specific template\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nLocated in\n\n\nDescription\n\n\nRequired\n\n\nSchema\n\n\n\n\n\n\n\n\n\n\ntemplateId\n\n\npath\n\n\nID of the device template\n\n\nYes\n\n\nstring\n\n\n\n\n\n\n\n\nResponses\n\n\n\n\n\n\n\n\nCode\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n200\n\n\nsuccessful operation\n\n\n\n\n\n\n404\n\n\n\n\n\n\n\n\n\n\n/profiles/device/{templateId}/{profileId}\n\n\nGET\n\n\nSummary:\n\n\nRetrieve a device profile\n\n\nDescription:\n\n\nReturns a single device profile\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nLocated in\n\n\nDescription\n\n\nRequired\n\n\nSchema\n\n\n\n\n\n\n\n\n\n\ntemplateId\n\n\npath\n\n\nID of the device template\n\n\nYes\n\n\nstring\n\n\n\n\n\n\nprofileId\n\n\npath\n\n\nID of the profile\n\n\nYes\n\n\nstring\n\n\n\n\n\n\n\n\nResponses\n\n\n\n\n\n\n\n\nCode\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n200\n\n\nsuccessful operation\n\n\n\n\n\n\n404\n\n\n\n\n\n\n\n\n\n\nDELETE\n\n\nSummary:\n\n\nDelete a specific device profile\n\n\nDescription:\n\n\nDelete a specific device profile\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nLocated in\n\n\nDescription\n\n\nRequired\n\n\nSchema\n\n\n\n\n\n\n\n\n\n\ntemplateId\n\n\npath\n\n\nID of the device template\n\n\nYes\n\n\nstring\n\n\n\n\n\n\nprofileId\n\n\npath\n\n\nID of the profile\n\n\nYes\n\n\nstring\n\n\n\n\n\n\n\n\nResponses\n\n\n\n\n\n\n\n\nCode\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n204\n\n\nsuccessful operation\n\n\n\n\n\n\n404\n\n\n\n\n\n\n\n\n\n\nPATCH\n\n\nSummary:\n\n\nUpdate an existing device profile.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nLocated in\n\n\nDescription\n\n\nRequired\n\n\nSchema\n\n\n\n\n\n\n\n\n\n\ntemplateId\n\n\npath\n\n\nID of the device template\n\n\nYes\n\n\nstring\n\n\n\n\n\n\nprofileId\n\n\npath\n\n\nID of the profile\n\n\nYes\n\n\nstring\n\n\n\n\n\n\n\n\nResponses\n\n\n\n\n\n\n\n\nCode\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n204\n\n\nsuccessful operation\n\n\n\n\n\n\n400\n\n\n\n\n\n\n\n\n404\n\n\n\n\n\n\n\n\n\n\n/profiles/group/{templateId}\n\n\nPOST\n\n\nSummary:\n\n\nAdds a new group profile for a specific template.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nLocated in\n\n\nDescription\n\n\nRequired\n\n\nSchema\n\n\n\n\n\n\n\n\n\n\ntemplateId\n\n\npath\n\n\nID of the group template\n\n\nYes\n\n\nstring\n\n\n\n\n\n\n\n\nResponses\n\n\n\n\n\n\n\n\nCode\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n201\n\n\n\n\n\n\n\n\n400\n\n\n\n\n\n\n\n\n\n\nGET\n\n\nSummary:\n\n\nReturn all group profiles for a specific template\n\n\nDescription:\n\n\nReturn all group profiles for a specific template\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nLocated in\n\n\nDescription\n\n\nRequired\n\n\nSchema\n\n\n\n\n\n\n\n\n\n\ntemplateId\n\n\npath\n\n\nID of the group template\n\n\nYes\n\n\nstring\n\n\n\n\n\n\n\n\nResponses\n\n\n\n\n\n\n\n\nCode\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n200\n\n\nsuccessful operation\n\n\n\n\n\n\n404\n\n\n\n\n\n\n\n\n\n\n/profiles/group/{templateId}/{profileId}\n\n\nGET\n\n\nSummary:\n\n\nRetrieve a group profile\n\n\nDescription:\n\n\nReturns a single group profile\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nLocated in\n\n\nDescription\n\n\nRequired\n\n\nSchema\n\n\n\n\n\n\n\n\n\n\ntemplateId\n\n\npath\n\n\nID of the group template\n\n\nYes\n\n\nstring\n\n\n\n\n\n\nprofileId\n\n\npath\n\n\nID of the profile\n\n\nYes\n\n\nstring\n\n\n\n\n\n\n\n\nResponses\n\n\n\n\n\n\n\n\nCode\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n200\n\n\nsuccessful operation\n\n\n\n\n\n\n404\n\n\n\n\n\n\n\n\n\n\nDELETE\n\n\nSummary:\n\n\nDelete a specific group profile\n\n\nDescription:\n\n\nDelete a specific group profile\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nLocated in\n\n\nDescription\n\n\nRequired\n\n\nSchema\n\n\n\n\n\n\n\n\n\n\ntemplateId\n\n\npath\n\n\nID of the group template\n\n\nYes\n\n\nstring\n\n\n\n\n\n\nprofileId\n\n\npath\n\n\nID of the profile\n\n\nYes\n\n\nstring\n\n\n\n\n\n\n\n\nResponses\n\n\n\n\n\n\n\n\nCode\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n204\n\n\nsuccessful operation\n\n\n\n\n\n\n404\n\n\n\n\n\n\n\n\n\n\nPATCH\n\n\nSummary:\n\n\nUpdate an existing group profile.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nLocated in\n\n\nDescription\n\n\nRequired\n\n\nSchema\n\n\n\n\n\n\n\n\n\n\ntemplateId\n\n\npath\n\n\nID of the group template\n\n\nYes\n\n\nstring\n\n\n\n\n\n\nprofileId\n\n\npath\n\n\nID of the profile\n\n\nYes\n\n\nstring\n\n\n\n\n\n\n\n\nResponses\n\n\n\n\n\n\n\n\nCode\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n204\n\n\nsuccessful operation\n\n\n\n\n\n\n400\n\n\n\n\n\n\n\n\n404\n\n\n\n\n\n\n\n\n\n\n/search\n\n\nGET\n\n\nSummary:\n\n\nSearch for groups and devices.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nLocated in\n\n\nDescription\n\n\nRequired\n\n\nSchema\n\n\n\n\n\n\n\n\n\n\ntype\n\n\nquery\n\n\nType of group/device to filter.  This can be the high level \ngroup\n or \ndevice\n, as well as any custom group or device template that may have been registered.\n\n\nNo\n\n\n[ string ]\n\n\n\n\n\n\nancestorGroupPath\n\n\nquery\n\n\nThe path of a common ancestor group to filter results by.\n\n\nNo\n\n\nstring\n\n\n\n\n\n\neq\n\n\nquery\n\n\nFilter an attribute based on an exact match. E.g. \n?eq=firmwareVersion:ABC123\n\n\nNo\n\n\n[ string ]\n\n\n\n\n\n\nneq\n\n\nquery\n\n\nFilter by an attribute based on not matching. E.g. \n?neq=firmwareVersion:ABC123\n\n\nNo\n\n\n[ string ]\n\n\n\n\n\n\nlt\n\n\nquery\n\n\nFilter an attribute based on having a value less than. E.g. \n?lt=deploymentId:3\n\n\nNo\n\n\n[ number ]\n\n\n\n\n\n\nlte\n\n\nquery\n\n\nFilter an attribute based on having a value less than or equal to. E.g. \n?lte=deploymentId:3\n\n\nNo\n\n\n[ number ]\n\n\n\n\n\n\ngt\n\n\nquery\n\n\nFilter an attribute based on having a value greater than. E.g. \n?gt=deploymentId:3\n\n\nNo\n\n\n[ number ]\n\n\n\n\n\n\ngte\n\n\nquery\n\n\nFilter an attribute based on having a value greater than or equal to. E.g. \n?gte=deploymentId:3\n\n\nNo\n\n\n[ number ]\n\n\n\n\n\n\nstartsWith\n\n\nquery\n\n\nFilter by an attribute based on starting with specific text. E.g. \n?startsWith=model:MOD123\n\n\nNo\n\n\n[ string ]\n\n\n\n\n\n\nendsWith\n\n\nquery\n\n\nNOT IMPLEMENTED!`\n\n\nNo\n\n\n[ string ]\n\n\n\n\n\n\ncontains\n\n\nquery\n\n\nNOT IMPLEMENTED!\n\n\nNo\n\n\n[ string ]\n\n\n\n\n\n\nfacetField\n\n\nquery\n\n\nPerform a faceted query.  Specify in the format of \n?facetField=relation:direction:field\n\n\nNo\n\n\nstring\n\n\n\n\n\n\nsummarize\n\n\nquery\n\n\nSummarize the search results by providing a total, instead of returning the results themselves.\n\n\nNo\n\n\nboolean\n\n\n\n\n\n\noffset\n\n\nquery\n\n\nThe index to start paginated results from\n\n\nNo\n\n\ninteger\n\n\n\n\n\n\ncount\n\n\nquery\n\n\nThe maximum number of results to return\n\n\nNo\n\n\ninteger\n\n\n\n\n\n\n\n\nResponses\n\n\n\n\n\n\n\n\nCode\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n200\n\n\nsuccessful operation\n\n\n\n\n\n\n400\n\n\n\n\n\n\n\n\n404\n\n\n\n\n\n\n\n\n\n\n/policies\n\n\nPOST\n\n\nSummary:\n\n\nCreates a new \nPolicy\n, and applies it to the provided \nGroups\n.\n\n\nResponses\n\n\n\n\n\n\n\n\nCode\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n201\n\n\n\n\n\n\n\n\n400\n\n\n\n\n\n\n\n\n\n\nGET\n\n\nSummary:\n\n\nList policies, optionally filtered by policy type.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nLocated in\n\n\nDescription\n\n\nRequired\n\n\nSchema\n\n\n\n\n\n\n\n\n\n\ntype\n\n\nquery\n\n\nPolicy type to refilterturn\n\n\nYes\n\n\nstring\n\n\n\n\n\n\n\n\nResponses\n\n\n\n\n\n\n\n\nCode\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n200\n\n\nsuccessful operation\n\n\n\n\n\n\n400\n\n\n\n\n\n\n\n\n404\n\n\n\n\n\n\n\n\n\n\n/policies/inherited\n\n\nGET\n\n\nSummary:\n\n\nReturns all inherited \nPolicies\n for a \nDevice\n or set of \nGroups\n where the \nDevice\n/\nGroups\n are associated with all the hierarchies that the \nPolicy\n applies to.  Either \ndeviceId\n or \ngroupPath\n must be provided.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nLocated in\n\n\nDescription\n\n\nRequired\n\n\nSchema\n\n\n\n\n\n\n\n\n\n\ndeviceId\n\n\nquery\n\n\nID of device to list policies\n\n\nNo\n\n\nstring\n\n\n\n\n\n\ngroupPath\n\n\nquery\n\n\nPath of groups to list policies\n\n\nNo\n\n\n[ string ]\n\n\n\n\n\n\ntype\n\n\nquery\n\n\nPolicy type to return\n\n\nYes\n\n\nstring\n\n\n\n\n\n\n\n\nResponses\n\n\n\n\n\n\n\n\nCode\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n200\n\n\nsuccessful operation\n\n\n\n\n\n\n400\n\n\n\n\n\n\n\n\n404\n\n\n\n\n\n\n\n\n\n\n/policies/{policyId}\n\n\nPATCH\n\n\nSummary:\n\n\nUpdate the attributes of an existing policy.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nLocated in\n\n\nDescription\n\n\nRequired\n\n\nSchema\n\n\n\n\n\n\n\n\n\n\npolicyId\n\n\npath\n\n\nID of policy\n\n\nYes\n\n\nstring\n\n\n\n\n\n\n\n\nResponses\n\n\n\n\n\n\n\n\nCode\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n204\n\n\nsuccessful operation\n\n\n\n\n\n\n400\n\n\n\n\n\n\n\n\n404\n\n\n\n\n\n\n\n\n\n\nDELETE\n\n\nSummary:\n\n\nDelete an existing policy.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nLocated in\n\n\nDescription\n\n\nRequired\n\n\nSchema\n\n\n\n\n\n\n\n\n\n\npolicyId\n\n\npath\n\n\nID of policy\n\n\nYes\n\n\nstring\n\n\n\n\n\n\n\n\nResponses\n\n\n\n\n\n\n\n\nCode\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n204\n\n\nsuccessful operation\n\n\n\n\n\n\n400\n\n\n\n\n\n\n\n\n404\n\n\n\n\n\n\n\n\n\n\nGET\n\n\nSummary:\n\n\nRetrieve a specific policy.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nLocated in\n\n\nDescription\n\n\nRequired\n\n\nSchema\n\n\n\n\n\n\n\n\n\n\npolicyId\n\n\npath\n\n\nID of policy\n\n\nYes\n\n\nstring\n\n\n\n\n\n\n\n\nResponses\n\n\n\n\n\n\n\n\nCode\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n200\n\n\nsuccessful operation\n\n\n\n\n\n\n400\n\n\n\n\n\n\n\n\n404", 
            "title": "Connected Device Framework: Asset Library"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#connected-device-framework-asset-library", 
            "text": "The Asset Library service is a device registry that allows you to manage your fleet of devices within multiple hierarchical groups.  Each one of the branches of the hierarchy can represent something meaningful to your business such as supplier, location, customer, vehicle, etc.  The hierarchies within Asset Library are represented as  Groups .  Each Group has a single parent, but can comprise of many groups and/or devices as its members.  Devices  can be associated with one or more  Groups , each with a named relationship to its group to give context.  Devices  themselves can be associated with other  Devices , representing a composition type of relationship.  Examples being a mote that comprises of a number of differnet sensors, or a car engine that is comprised of a number of different components.  Different  Group Templates  can be created to align with your business, with each Group Template having its own attributes.  An example Group Template could be a  Site , with its  address  being an example of an attribute.  Likewise,  Device Templates  can be created to represent the different types of devices within your fleet, each with their own attributes.  Profiles  can be created and applied to device and groups to populate with default attirbutes and/or relations.  Policies  represent a document that can be attached to one or more groups within a hierarchy, and are automatically inherited by the devices and groups.", 
            "title": "Connected Device Framework: Asset Library"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#version-200", 
            "text": "", 
            "title": "Version: 2.0.0"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#templatesdevicestemplateid", 
            "text": "", 
            "title": "/templates/devices/{templateId}"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#post", 
            "text": "", 
            "title": "POST"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#summary", 
            "text": "Registers a new device template within the system, using the JSON Schema standard to define the device template attributes and constraints.", 
            "title": "Summary:"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#parameters", 
            "text": "Name  Located in  Description  Required  Schema      templateId  path  ID of device template to publish  Yes  string", 
            "title": "Parameters"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#responses", 
            "text": "Code  Description      201     400", 
            "title": "Responses"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#get", 
            "text": "", 
            "title": "GET"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#summary_1", 
            "text": "Find device template by ID", 
            "title": "Summary:"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#description", 
            "text": "Returns a single device template definition", 
            "title": "Description:"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#parameters_1", 
            "text": "Name  Located in  Description  Required  Schema      templateId  path  ID of device template to publish  Yes  string    status  query  Status of device template to return  Yes  string", 
            "title": "Parameters"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#responses_1", 
            "text": "Code  Description      200  OK    400     404", 
            "title": "Responses"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#patch", 
            "text": "", 
            "title": "PATCH"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#summary_2", 
            "text": "Update an existing device template.", 
            "title": "Summary:"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#parameters_2", 
            "text": "Name  Located in  Description  Required  Schema      templateId  path  ID of device template to publish  Yes  string", 
            "title": "Parameters"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#responses_2", 
            "text": "Code  Description      204  OK    400     404", 
            "title": "Responses"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#delete", 
            "text": "", 
            "title": "DELETE"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#summary_3", 
            "text": "Deletes an existing device template.", 
            "title": "Summary:"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#parameters_3", 
            "text": "Name  Located in  Description  Required  Schema      templateId  path  ID of device template to publish  Yes  string", 
            "title": "Parameters"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#responses_3", 
            "text": "Code  Description      204  OK    400     404", 
            "title": "Responses"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#templatesdevicestemplateidpublish", 
            "text": "", 
            "title": "/templates/devices/{templateId}/publish"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#put", 
            "text": "", 
            "title": "PUT"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#summary_4", 
            "text": "Publishes an existing device template.", 
            "title": "Summary:"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#parameters_4", 
            "text": "Name  Located in  Description  Required  Schema      templateId  path  ID of device template to publish  Yes  string", 
            "title": "Parameters"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#responses_4", 
            "text": "Code  Description      204  OK    400     404", 
            "title": "Responses"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#templatesgroupstemplateid", 
            "text": "", 
            "title": "/templates/groups/{templateId}"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#post_1", 
            "text": "", 
            "title": "POST"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#summary_5", 
            "text": "Registers a new group template within the system, using the JSON Schema standard to define the group template attributes and constraints.", 
            "title": "Summary:"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#parameters_5", 
            "text": "Name  Located in  Description  Required  Schema      templateId  path  ID of group template to return  Yes  string", 
            "title": "Parameters"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#responses_5", 
            "text": "Code  Description      201     400", 
            "title": "Responses"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#get_1", 
            "text": "", 
            "title": "GET"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#summary_6", 
            "text": "Find group template by ID", 
            "title": "Summary:"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#description_1", 
            "text": "Returns a single group template definition", 
            "title": "Description:"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#parameters_6", 
            "text": "Name  Located in  Description  Required  Schema      templateId  path  ID of group template to return  Yes  string    status  query  Status of group template to return  Yes  string", 
            "title": "Parameters"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#responses_6", 
            "text": "Code  Description      200  OK    400     404", 
            "title": "Responses"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#patch_1", 
            "text": "", 
            "title": "PATCH"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#summary_7", 
            "text": "Update an existing group template.", 
            "title": "Summary:"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#parameters_7", 
            "text": "Name  Located in  Description  Required  Schema      templateId  path  ID of group template to return  Yes  string", 
            "title": "Parameters"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#responses_7", 
            "text": "Code  Description      204  OK    400     404", 
            "title": "Responses"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#delete_1", 
            "text": "", 
            "title": "DELETE"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#summary_8", 
            "text": "Deletes an existing group template.", 
            "title": "Summary:"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#parameters_8", 
            "text": "Name  Located in  Description  Required  Schema      templateId  path  ID of group template to return  Yes  string", 
            "title": "Parameters"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#responses_8", 
            "text": "Code  Description      204  OK    400     404", 
            "title": "Responses"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#templatesgroupstemplateidpublish", 
            "text": "", 
            "title": "/templates/groups/{templateId}/publish"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#put_1", 
            "text": "", 
            "title": "PUT"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#summary_9", 
            "text": "Publishes an existing group template.", 
            "title": "Summary:"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#parameters_9", 
            "text": "Name  Located in  Description  Required  Schema      templateId  path  ID of group template to publish  Yes  string", 
            "title": "Parameters"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#responses_9", 
            "text": "Code  Description      204  OK    400     404", 
            "title": "Responses"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#devices", 
            "text": "", 
            "title": "/devices"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#post_2", 
            "text": "", 
            "title": "POST"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#summary_10", 
            "text": "Add a new device to the asset library, adding it to the  /unprovisioned  group if no group is specified.", 
            "title": "Summary:"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#parameters_10", 
            "text": "Name  Located in  Description  Required  Schema      applyProfile  query  Optionally apply a profile to the device to update unset attributes with attributes from the profile.  No  string", 
            "title": "Parameters"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#responses_10", 
            "text": "Code  Description      201     400", 
            "title": "Responses"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#bulkdevices", 
            "text": "", 
            "title": "/bulkdevices"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#post_3", 
            "text": "", 
            "title": "POST"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#summary_11", 
            "text": "Adds a batch of devices in bulk to the asset library, adding them to the  /unprovisioned  group if no groups are specified.", 
            "title": "Summary:"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#parameters_11", 
            "text": "Name  Located in  Description  Required  Schema      applyProfile  query  Optionally apply a profile to the device to update unset attributes with attributes from the profile.  No  string", 
            "title": "Parameters"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#responses_11", 
            "text": "Code  Description      201     400", 
            "title": "Responses"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#patch_2", 
            "text": "", 
            "title": "PATCH"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#summary_12", 
            "text": "Update a batch of existing devices", 
            "title": "Summary:"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#parameters_12", 
            "text": "Name  Located in  Description  Required  Schema      applyProfile  query  Optionally apply a profile to the device to update unset attributes with attributes from the profile.  No  string", 
            "title": "Parameters"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#responses_12", 
            "text": "Code  Description      204  successful operation    400     404", 
            "title": "Responses"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#devicesdeviceid", 
            "text": "", 
            "title": "/devices/{deviceId}"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#get_2", 
            "text": "", 
            "title": "GET"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#summary_13", 
            "text": "Find device by ID", 
            "title": "Summary:"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#description_2", 
            "text": "Returns a single device", 
            "title": "Description:"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#parameters_13", 
            "text": "Name  Located in  Description  Required  Schema      deviceId  path  ID of device to return  Yes  string    expandComponents  query  By default, components of a device are not returned. Passing  true  will return and expand a devices components.  No  boolean    attributes  query  Optionally only return these specific attributes.  By default returns all attributes.  No  [ string ]    includeGroups  query  Optionally only return these specific related groups.  By default returns all related groups.  No  [ string ]    expandRelatedDevices  query  By default, only related device id's are returned.  Passing  true  will return expanded related devices instead of just its device id.  No  boolean    expandRelatedGroups  query  By default, only related group paths are returned.  Passing  true  will return expanded related groups instead of just its path.  No  boolean    filterRelations  query  Return related devices/groups filtered by relation.  Specify the relation in the format of  {direction}:{relation} , where  {direction}  may be  in ,  out  or  both .  No  [ string ]", 
            "title": "Parameters"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#responses_13", 
            "text": "Code  Description      200  successful operation    400     404", 
            "title": "Responses"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#delete_2", 
            "text": "", 
            "title": "DELETE"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#summary_14", 
            "text": "Delete device of specified ID", 
            "title": "Summary:"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#description_3", 
            "text": "Deletes a single device", 
            "title": "Description:"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#parameters_14", 
            "text": "Name  Located in  Description  Required  Schema      deviceId  path  ID of device to return  Yes  string", 
            "title": "Parameters"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#responses_14", 
            "text": "Code  Description      204  successful operation    404", 
            "title": "Responses"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#patch_3", 
            "text": "", 
            "title": "PATCH"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#summary_15", 
            "text": "Update an existing device attributes", 
            "title": "Summary:"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#parameters_15", 
            "text": "Name  Located in  Description  Required  Schema      deviceId  path  ID of device to return  Yes  string    applyProfile  query  Optionally apply a profile to the device to update unset attributes with attributes from the profile.  No  string", 
            "title": "Parameters"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#responses_15", 
            "text": "Code  Description      204  successful operation    400     404", 
            "title": "Responses"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#devicesdeviceidrelationshipgroups", 
            "text": "", 
            "title": "/devices/{deviceId}/{relationship}/groups"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#get_3", 
            "text": "", 
            "title": "GET"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#summary_16", 
            "text": "List a devices related groups.", 
            "title": "Summary:"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#parameters_16", 
            "text": "Name  Located in  Description  Required  Schema      deviceId  path  Id of device  Yes  string    relationship  path  The relationship between the device and group as defined by the device template.  Yes  string    template  query  Optional filter to return a specific group template  No  string    direction  query  Direction of relation  No  [ string ]    offset  query  The index to start paginated results from  No  integer    count  query  The maximum number of results to return  No  integer", 
            "title": "Parameters"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#responses_16", 
            "text": "Code  Description      200  successful operation    404", 
            "title": "Responses"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#devicesdeviceidrelationshipgroupsgrouppath", 
            "text": "", 
            "title": "/devices/{deviceId}/{relationship}/groups/{groupPath}"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#put_2", 
            "text": "", 
            "title": "PUT"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#summary_17", 
            "text": "Associates a device to a group, giving context to its relationship.", 
            "title": "Summary:"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#parameters_17", 
            "text": "Name  Located in  Description  Required  Schema      deviceId  path  Id of device to attach to the group  Yes  string    relationship  path  The outgoing relationship between the device and group. For example, this may reflect  locatedAt  or  manufacturedAt  relations.  Yes  string    groupPath  path  Path of group.  Yes  string", 
            "title": "Parameters"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#responses_17", 
            "text": "Code  Description      204  successful operation    400     404", 
            "title": "Responses"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#delete_3", 
            "text": "", 
            "title": "DELETE"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#summary_18", 
            "text": "Removes a device from an associated group", 
            "title": "Summary:"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#parameters_18", 
            "text": "Name  Located in  Description  Required  Schema      deviceId  path  Id of device to attach to the group  Yes  string    relationship  path  The outgoing relationship between the device and group. For example, this may reflect  locatedAt  or  manufacturedAt  relations.  Yes  string    groupPath  path  Path of group.  Yes  string", 
            "title": "Parameters"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#responses_18", 
            "text": "Code  Description      204  successful operation    400     404", 
            "title": "Responses"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#devicesdeviceidrelationshipdirectiongroupsgrouppath", 
            "text": "", 
            "title": "/devices/{deviceId}/{relationship}/{direction}/groups/{groupPath}"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#put_3", 
            "text": "", 
            "title": "PUT"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#summary_19", 
            "text": "Associates a device to a group, giving context to its relationship.", 
            "title": "Summary:"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#parameters_19", 
            "text": "Name  Located in  Description  Required  Schema      deviceId  path  Id of device to attach to the group  Yes  string    relationship  path  The outgoing relationship between the device and group. For example, this may reflect  locatedAt  or  manufacturedAt  relations.  Yes  string    direction  path  The direction of the relationship  in  or  out  Yes  string    groupPath  path  Path of group.  Yes  string", 
            "title": "Parameters"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#responses_19", 
            "text": "Code  Description      204  successful operation    400     404", 
            "title": "Responses"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#delete_4", 
            "text": "", 
            "title": "DELETE"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#summary_20", 
            "text": "Removes a device from an associated group", 
            "title": "Summary:"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#parameters_20", 
            "text": "Name  Located in  Description  Required  Schema      deviceId  path  Id of device to attach to the group  Yes  string    relationship  path  The outgoing relationship between the device and group. For example, this may reflect  locatedAt  or  manufacturedAt  relations.  Yes  string    direction  path  The direction of the relationship  in  or  out  Yes  string    groupPath  path  Path of group.  Yes  string", 
            "title": "Parameters"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#responses_20", 
            "text": "Code  Description      204  successful operation    400     404", 
            "title": "Responses"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#devicesdeviceidrelationshipdevices", 
            "text": "", 
            "title": "/devices/{deviceId}/{relationship}/devices"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#get_4", 
            "text": "", 
            "title": "GET"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#summary_21", 
            "text": "List a devices related devices.", 
            "title": "Summary:"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#parameters_21", 
            "text": "Name  Located in  Description  Required  Schema      deviceId  path  Id of device  Yes  string    relationship  path  The relationship between the device and the other device as defined in the device template.  Yes  string    template  query  Optional filter to return a specific device template  No  string    direction  query  Direction of relation  No  [ string ]    state  query  Return devices of a specific state  No  [ string ]    offset  query  The index to start paginated results from  No  integer    count  query  The maximum number of results to return  No  integer", 
            "title": "Parameters"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#responses_21", 
            "text": "Code  Description      200  successful operation    404", 
            "title": "Responses"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#devicesdeviceidrelationshipdevicesotherdeviceid", 
            "text": "", 
            "title": "/devices/{deviceId}/{relationship}/devices/{otherDeviceId}"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#put_4", 
            "text": "", 
            "title": "PUT"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#summary_22", 
            "text": "Associates a device to another device, giving context to its relationship.", 
            "title": "Summary:"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#parameters_22", 
            "text": "Name  Located in  Description  Required  Schema      deviceId  path  Id of source device  Yes  string    relationship  path  The relationship between the device and the other device as defined in the device template.  Yes  string    otherDeviceId  path  ID of device to create relationship to.  Yes  string", 
            "title": "Parameters"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#responses_22", 
            "text": "Code  Description      204  successful operation    400     404", 
            "title": "Responses"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#delete_5", 
            "text": "", 
            "title": "DELETE"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#summary_23", 
            "text": "Removes a device from an associated device", 
            "title": "Summary:"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#parameters_23", 
            "text": "Name  Located in  Description  Required  Schema      deviceId  path  Id of source device  Yes  string    relationship  path  The relationship between the device and the other device as defined in the device template.  Yes  string    otherDeviceId  path  ID of device to create relationship to.  Yes  string", 
            "title": "Parameters"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#responses_23", 
            "text": "Code  Description      204  successful operation    400     404", 
            "title": "Responses"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#devicesdeviceidrelationshipdirectiondevicesotherdeviceid", 
            "text": "", 
            "title": "/devices/{deviceId}/{relationship}/{direction}/devices/{otherDeviceId}"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#put_5", 
            "text": "", 
            "title": "PUT"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#summary_24", 
            "text": "Associates a device to another device, giving context to its relationship.", 
            "title": "Summary:"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#parameters_24", 
            "text": "Name  Located in  Description  Required  Schema      deviceId  path  Id of source device  Yes  string    relationship  path  The relationship between the device and the other device as defined in the device template.  Yes  string    direction  path  Direction of the relationship -  in  or  out .  Yes  string    otherDeviceId  path  ID of device to create relationship to.  Yes  string", 
            "title": "Parameters"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#responses_24", 
            "text": "Code  Description      204  successful operation    400     404", 
            "title": "Responses"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#delete_6", 
            "text": "", 
            "title": "DELETE"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#summary_25", 
            "text": "Removes a device from an associated device", 
            "title": "Summary:"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#parameters_25", 
            "text": "Name  Located in  Description  Required  Schema      deviceId  path  Id of source device  Yes  string    relationship  path  The relationship between the device and the other device as defined in the device template.  Yes  string    direction  path  Direction of the relationship -  in  or  out .  Yes  string    otherDeviceId  path  ID of device to create relationship to.  Yes  string", 
            "title": "Parameters"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#responses_25", 
            "text": "Code  Description      204  successful operation    400     404", 
            "title": "Responses"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#devicesdeviceidcomponents", 
            "text": "", 
            "title": "/devices/{deviceId}/components"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#post_4", 
            "text": "", 
            "title": "POST"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#summary_26", 
            "text": "Createa a new component and adds to the device.", 
            "title": "Summary:"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#parameters_26", 
            "text": "Name  Located in  Description  Required  Schema      deviceId  path  Id of parent device  Yes  string", 
            "title": "Parameters"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#responses_26", 
            "text": "Code  Description      201     400", 
            "title": "Responses"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#devicesdeviceidcomponentscomponentid", 
            "text": "", 
            "title": "/devices/{deviceId}/components/{componentId}"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#patch_4", 
            "text": "", 
            "title": "PATCH"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#summary_27", 
            "text": "Updates the component of a device.", 
            "title": "Summary:"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#parameters_27", 
            "text": "Name  Located in  Description  Required  Schema      deviceId  path  Id of parent device  Yes  string    componentId  path  ID of child component  Yes  string", 
            "title": "Parameters"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#responses_27", 
            "text": "Code  Description      204  successful operation    400     404", 
            "title": "Responses"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#delete_7", 
            "text": "", 
            "title": "DELETE"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#summary_28", 
            "text": "Deletes a component of a devoce.", 
            "title": "Summary:"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#parameters_28", 
            "text": "Name  Located in  Description  Required  Schema      deviceId  path  Id of parent device  Yes  string    componentId  path  ID of child component  Yes  string", 
            "title": "Parameters"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#responses_28", 
            "text": "Code  Description      204  successful operation    400     404", 
            "title": "Responses"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#groups", 
            "text": "", 
            "title": "/groups"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#post_5", 
            "text": "", 
            "title": "POST"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#summary_29", 
            "text": "Adds a new group to the device library as a child of the  parentPath  as specified in the request body.", 
            "title": "Summary:"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#parameters_29", 
            "text": "Name  Located in  Description  Required  Schema      applyProfile  query  Optionally apply a profile to the device to update unset attributes with attributes from the profile.  No  string", 
            "title": "Parameters"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#responses_29", 
            "text": "Code  Description      201     400", 
            "title": "Responses"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#bulkgroups", 
            "text": "", 
            "title": "/bulkgroups"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#post_6", 
            "text": "", 
            "title": "POST"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#summary_30", 
            "text": "Adds a batch of new group to the asset library as a child of the  parentPath  as specified in the request body.", 
            "title": "Summary:"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#parameters_30", 
            "text": "Name  Located in  Description  Required  Schema      applyProfile  query  Optionally apply a profile to the device to update unset attributes with attributes from the profile.  No  string", 
            "title": "Parameters"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#responses_30", 
            "text": "Code  Description      201     400", 
            "title": "Responses"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#groupsgrouppath", 
            "text": "", 
            "title": "/groups/{groupPath}"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#get_5", 
            "text": "", 
            "title": "GET"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#summary_31", 
            "text": "Find group by Group's path", 
            "title": "Summary:"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#description_4", 
            "text": "Returns a single group", 
            "title": "Description:"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#parameters_31", 
            "text": "Name  Located in  Description  Required  Schema      groupPath  path  Path of group to return  Yes  string", 
            "title": "Parameters"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#responses_31", 
            "text": "Code  Description      200  successful operation    404", 
            "title": "Responses"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#delete_8", 
            "text": "", 
            "title": "DELETE"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#summary_32", 
            "text": "Delete group with supplied path", 
            "title": "Summary:"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#description_5", 
            "text": "Deletes a single group", 
            "title": "Description:"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#parameters_32", 
            "text": "Name  Located in  Description  Required  Schema      groupPath  path  Path of group to return  Yes  string", 
            "title": "Parameters"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#responses_32", 
            "text": "Code  Description      204  successful operation    404", 
            "title": "Responses"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#patch_5", 
            "text": "", 
            "title": "PATCH"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#summary_33", 
            "text": "Update an existing group attributes, including changing its parent group.", 
            "title": "Summary:"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#parameters_33", 
            "text": "Name  Located in  Description  Required  Schema      groupPath  path  Path of group to return  Yes  string    applyProfile  query  Optionally apply a profile to the device to update unset attributes with attributes from the profile.  No  string", 
            "title": "Parameters"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#responses_33", 
            "text": "Code  Description      204  successful operation    400     404", 
            "title": "Responses"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#groupsgrouppathmembersdevices", 
            "text": "", 
            "title": "/groups/{groupPath}/members/devices"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#get_6", 
            "text": "", 
            "title": "GET"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#summary_34", 
            "text": "List device members of group for supplied Group name", 
            "title": "Summary:"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#description_6", 
            "text": "Returns device members of group", 
            "title": "Description:"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#parameters_34", 
            "text": "Name  Located in  Description  Required  Schema      groupPath  path  Path of group to return its device members. A path of '/' can be passed as id to return top level device members  Yes  string    template  query  Optional filter to return a specific device template  No  string    state  query  Return devices of a specific state  No  [ string ]    offset  query  The index to start paginated results from  No  integer    count  query  The maximum number of results to return  No  integer", 
            "title": "Parameters"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#responses_34", 
            "text": "Code  Description      200  successful operation    400     404", 
            "title": "Responses"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#groupsgrouppathmembersgroups", 
            "text": "", 
            "title": "/groups/{groupPath}/members/groups"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#get_7", 
            "text": "", 
            "title": "GET"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#summary_35", 
            "text": "List group members of group for supplied Group name", 
            "title": "Summary:"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#description_7", 
            "text": "Returns group members of group", 
            "title": "Description:"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#parameters_35", 
            "text": "Name  Located in  Description  Required  Schema      groupPath  path  Path of group to return its group members. A path of '/' can be passed as id to return top level group members  Yes  string    template  query  Optional filter to return a specific group sub-type  No  string    offset  query  The index to start paginated results from  No  integer    count  query  The maximum number of results to return  No  integer", 
            "title": "Parameters"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#responses_35", 
            "text": "Code  Description      200  successful operation    400     404", 
            "title": "Responses"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#groupsgrouppathmemberships", 
            "text": "", 
            "title": "/groups/{groupPath}/memberships"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#get_8", 
            "text": "", 
            "title": "GET"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#summary_36", 
            "text": "List all ancestor groups of a specific group.", 
            "title": "Summary:"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#description_8", 
            "text": "List all ancestor groups of a specific group.", 
            "title": "Description:"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#parameters_36", 
            "text": "Name  Located in  Description  Required  Schema      groupPath  path  Path of group for fetching the membership  Yes  string    offset  query  The index to start paginated results from  No  integer    count  query  The maximum number of results to return  No  integer", 
            "title": "Parameters"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#responses_36", 
            "text": "Code  Description      200  successful operation    400     404", 
            "title": "Responses"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#groupsgrouppathrelationshipdevices", 
            "text": "", 
            "title": "/groups/{groupPath}/{relationship}/devices"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#get_9", 
            "text": "", 
            "title": "GET"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#summary_37", 
            "text": "List a groups related devices.", 
            "title": "Summary:"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#parameters_37", 
            "text": "Name  Located in  Description  Required  Schema      groupPath  path  Path of source group  Yes  string    relationship  path  The relationship between the group and the devices as defined by the group/device templatea.  Use  %2A  (urlencoded  * ) to return all.  Yes  string    template  query  Optional filter to return a specific device template  No  string    direction  query  Direction of relation  No  [ string ]    state  query  Return devices of a specific state  No  [ string ]    offset  query  The index to start paginated results from  No  integer    count  query  The maximum number of results to return  No  integer", 
            "title": "Parameters"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#responses_37", 
            "text": "Code  Description      200  successful operation    404", 
            "title": "Responses"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#groupsgrouppathrelationshipgroups", 
            "text": "", 
            "title": "/groups/{groupPath}/{relationship}/groups"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#get_10", 
            "text": "", 
            "title": "GET"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#summary_38", 
            "text": "List a groups related groups.", 
            "title": "Summary:"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#parameters_38", 
            "text": "Name  Located in  Description  Required  Schema      groupPath  path  Path of source group  Yes  string    relationship  path  The relationship between the groups as defined by the group template.  Use  %2A  (urlencoded  * ) to return all.  Yes  string    template  query  Optional filter to return a specific group template  No  string    direction  query  Direction of relation  No  [ string ]    offset  query  The index to start paginated results from  No  integer    count  query  The maximum number of results to return  No  integer", 
            "title": "Parameters"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#responses_38", 
            "text": "Code  Description      200  successful operation    404", 
            "title": "Responses"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#groupssourcegrouppathrelationshipgroupstargetgrouppath", 
            "text": "", 
            "title": "/groups/{sourceGroupPath}/{relationship}/groups/{targetGroupPath}"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#put_6", 
            "text": "", 
            "title": "PUT"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#summary_39", 
            "text": "Associates a group with another group, giving context to its relationship.", 
            "title": "Summary:"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#parameters_39", 
            "text": "Name  Located in  Description  Required  Schema      sourceGroupPath  path  Path of source group  Yes  string    relationship  path  The relationship between the groups. For example, this may reflect  locatedAt  or  manufacturedAt  relations.  Yes  string    targetGroupPath  path  Path of target group  Yes  string", 
            "title": "Parameters"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#responses_39", 
            "text": "Code  Description      204  successful operation    400     404", 
            "title": "Responses"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#delete_9", 
            "text": "", 
            "title": "DELETE"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#summary_40", 
            "text": "Removes a group from an associated group", 
            "title": "Summary:"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#parameters_40", 
            "text": "Name  Located in  Description  Required  Schema      sourceGroupPath  path  Path of source group  Yes  string    relationship  path  The relationship between the groups. For example, this may reflect  locatedAt  or  manufacturedAt  relations.  Yes  string    targetGroupPath  path  Path of target group  Yes  string", 
            "title": "Parameters"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#responses_40", 
            "text": "Code  Description      204  successful operation    400     404", 
            "title": "Responses"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#profilesdevicetemplateid", 
            "text": "", 
            "title": "/profiles/device/{templateId}"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#post_7", 
            "text": "", 
            "title": "POST"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#summary_41", 
            "text": "Adds a new device profile for a specific template.", 
            "title": "Summary:"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#parameters_41", 
            "text": "Name  Located in  Description  Required  Schema      templateId  path  ID of the device template  Yes  string", 
            "title": "Parameters"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#responses_41", 
            "text": "Code  Description      201     400", 
            "title": "Responses"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#get_11", 
            "text": "", 
            "title": "GET"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#summary_42", 
            "text": "Return all device profiles for a specific template", 
            "title": "Summary:"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#description_9", 
            "text": "ReturnsReturn all device profiles for a specific template", 
            "title": "Description:"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#parameters_42", 
            "text": "Name  Located in  Description  Required  Schema      templateId  path  ID of the device template  Yes  string", 
            "title": "Parameters"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#responses_42", 
            "text": "Code  Description      200  successful operation    404", 
            "title": "Responses"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#profilesdevicetemplateidprofileid", 
            "text": "", 
            "title": "/profiles/device/{templateId}/{profileId}"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#get_12", 
            "text": "", 
            "title": "GET"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#summary_43", 
            "text": "Retrieve a device profile", 
            "title": "Summary:"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#description_10", 
            "text": "Returns a single device profile", 
            "title": "Description:"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#parameters_43", 
            "text": "Name  Located in  Description  Required  Schema      templateId  path  ID of the device template  Yes  string    profileId  path  ID of the profile  Yes  string", 
            "title": "Parameters"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#responses_43", 
            "text": "Code  Description      200  successful operation    404", 
            "title": "Responses"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#delete_10", 
            "text": "", 
            "title": "DELETE"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#summary_44", 
            "text": "Delete a specific device profile", 
            "title": "Summary:"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#description_11", 
            "text": "Delete a specific device profile", 
            "title": "Description:"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#parameters_44", 
            "text": "Name  Located in  Description  Required  Schema      templateId  path  ID of the device template  Yes  string    profileId  path  ID of the profile  Yes  string", 
            "title": "Parameters"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#responses_44", 
            "text": "Code  Description      204  successful operation    404", 
            "title": "Responses"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#patch_6", 
            "text": "", 
            "title": "PATCH"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#summary_45", 
            "text": "Update an existing device profile.", 
            "title": "Summary:"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#parameters_45", 
            "text": "Name  Located in  Description  Required  Schema      templateId  path  ID of the device template  Yes  string    profileId  path  ID of the profile  Yes  string", 
            "title": "Parameters"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#responses_45", 
            "text": "Code  Description      204  successful operation    400     404", 
            "title": "Responses"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#profilesgrouptemplateid", 
            "text": "", 
            "title": "/profiles/group/{templateId}"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#post_8", 
            "text": "", 
            "title": "POST"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#summary_46", 
            "text": "Adds a new group profile for a specific template.", 
            "title": "Summary:"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#parameters_46", 
            "text": "Name  Located in  Description  Required  Schema      templateId  path  ID of the group template  Yes  string", 
            "title": "Parameters"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#responses_46", 
            "text": "Code  Description      201     400", 
            "title": "Responses"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#get_13", 
            "text": "", 
            "title": "GET"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#summary_47", 
            "text": "Return all group profiles for a specific template", 
            "title": "Summary:"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#description_12", 
            "text": "Return all group profiles for a specific template", 
            "title": "Description:"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#parameters_47", 
            "text": "Name  Located in  Description  Required  Schema      templateId  path  ID of the group template  Yes  string", 
            "title": "Parameters"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#responses_47", 
            "text": "Code  Description      200  successful operation    404", 
            "title": "Responses"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#profilesgrouptemplateidprofileid", 
            "text": "", 
            "title": "/profiles/group/{templateId}/{profileId}"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#get_14", 
            "text": "", 
            "title": "GET"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#summary_48", 
            "text": "Retrieve a group profile", 
            "title": "Summary:"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#description_13", 
            "text": "Returns a single group profile", 
            "title": "Description:"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#parameters_48", 
            "text": "Name  Located in  Description  Required  Schema      templateId  path  ID of the group template  Yes  string    profileId  path  ID of the profile  Yes  string", 
            "title": "Parameters"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#responses_48", 
            "text": "Code  Description      200  successful operation    404", 
            "title": "Responses"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#delete_11", 
            "text": "", 
            "title": "DELETE"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#summary_49", 
            "text": "Delete a specific group profile", 
            "title": "Summary:"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#description_14", 
            "text": "Delete a specific group profile", 
            "title": "Description:"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#parameters_49", 
            "text": "Name  Located in  Description  Required  Schema      templateId  path  ID of the group template  Yes  string    profileId  path  ID of the profile  Yes  string", 
            "title": "Parameters"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#responses_49", 
            "text": "Code  Description      204  successful operation    404", 
            "title": "Responses"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#patch_7", 
            "text": "", 
            "title": "PATCH"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#summary_50", 
            "text": "Update an existing group profile.", 
            "title": "Summary:"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#parameters_50", 
            "text": "Name  Located in  Description  Required  Schema      templateId  path  ID of the group template  Yes  string    profileId  path  ID of the profile  Yes  string", 
            "title": "Parameters"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#responses_50", 
            "text": "Code  Description      204  successful operation    400     404", 
            "title": "Responses"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#search", 
            "text": "", 
            "title": "/search"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#get_15", 
            "text": "", 
            "title": "GET"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#summary_51", 
            "text": "Search for groups and devices.", 
            "title": "Summary:"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#parameters_51", 
            "text": "Name  Located in  Description  Required  Schema      type  query  Type of group/device to filter.  This can be the high level  group  or  device , as well as any custom group or device template that may have been registered.  No  [ string ]    ancestorGroupPath  query  The path of a common ancestor group to filter results by.  No  string    eq  query  Filter an attribute based on an exact match. E.g.  ?eq=firmwareVersion:ABC123  No  [ string ]    neq  query  Filter by an attribute based on not matching. E.g.  ?neq=firmwareVersion:ABC123  No  [ string ]    lt  query  Filter an attribute based on having a value less than. E.g.  ?lt=deploymentId:3  No  [ number ]    lte  query  Filter an attribute based on having a value less than or equal to. E.g.  ?lte=deploymentId:3  No  [ number ]    gt  query  Filter an attribute based on having a value greater than. E.g.  ?gt=deploymentId:3  No  [ number ]    gte  query  Filter an attribute based on having a value greater than or equal to. E.g.  ?gte=deploymentId:3  No  [ number ]    startsWith  query  Filter by an attribute based on starting with specific text. E.g.  ?startsWith=model:MOD123  No  [ string ]    endsWith  query  NOT IMPLEMENTED!`  No  [ string ]    contains  query  NOT IMPLEMENTED!  No  [ string ]    facetField  query  Perform a faceted query.  Specify in the format of  ?facetField=relation:direction:field  No  string    summarize  query  Summarize the search results by providing a total, instead of returning the results themselves.  No  boolean    offset  query  The index to start paginated results from  No  integer    count  query  The maximum number of results to return  No  integer", 
            "title": "Parameters"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#responses_51", 
            "text": "Code  Description      200  successful operation    400     404", 
            "title": "Responses"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#policies", 
            "text": "", 
            "title": "/policies"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#post_9", 
            "text": "", 
            "title": "POST"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#summary_52", 
            "text": "Creates a new  Policy , and applies it to the provided  Groups .", 
            "title": "Summary:"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#responses_52", 
            "text": "Code  Description      201     400", 
            "title": "Responses"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#get_16", 
            "text": "", 
            "title": "GET"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#summary_53", 
            "text": "List policies, optionally filtered by policy type.", 
            "title": "Summary:"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#parameters_52", 
            "text": "Name  Located in  Description  Required  Schema      type  query  Policy type to refilterturn  Yes  string", 
            "title": "Parameters"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#responses_53", 
            "text": "Code  Description      200  successful operation    400     404", 
            "title": "Responses"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#policiesinherited", 
            "text": "", 
            "title": "/policies/inherited"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#get_17", 
            "text": "", 
            "title": "GET"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#summary_54", 
            "text": "Returns all inherited  Policies  for a  Device  or set of  Groups  where the  Device / Groups  are associated with all the hierarchies that the  Policy  applies to.  Either  deviceId  or  groupPath  must be provided.", 
            "title": "Summary:"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#parameters_53", 
            "text": "Name  Located in  Description  Required  Schema      deviceId  query  ID of device to list policies  No  string    groupPath  query  Path of groups to list policies  No  [ string ]    type  query  Policy type to return  Yes  string", 
            "title": "Parameters"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#responses_54", 
            "text": "Code  Description      200  successful operation    400     404", 
            "title": "Responses"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#policiespolicyid", 
            "text": "", 
            "title": "/policies/{policyId}"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#patch_8", 
            "text": "", 
            "title": "PATCH"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#summary_55", 
            "text": "Update the attributes of an existing policy.", 
            "title": "Summary:"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#parameters_54", 
            "text": "Name  Located in  Description  Required  Schema      policyId  path  ID of policy  Yes  string", 
            "title": "Parameters"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#responses_55", 
            "text": "Code  Description      204  successful operation    400     404", 
            "title": "Responses"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#delete_12", 
            "text": "", 
            "title": "DELETE"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#summary_56", 
            "text": "Delete an existing policy.", 
            "title": "Summary:"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#parameters_55", 
            "text": "Name  Located in  Description  Required  Schema      policyId  path  ID of policy  Yes  string", 
            "title": "Parameters"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#responses_56", 
            "text": "Code  Description      204  successful operation    400     404", 
            "title": "Responses"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#get_18", 
            "text": "", 
            "title": "GET"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#summary_57", 
            "text": "Retrieve a specific policy.", 
            "title": "Summary:"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#parameters_56", 
            "text": "Name  Located in  Description  Required  Schema      policyId  path  ID of policy  Yes  string", 
            "title": "Parameters"
        }, 
        {
            "location": "/projects/assetlibrary/assetlibrary-swagger/#responses_57", 
            "text": "Code  Description      200  successful operation    400     404", 
            "title": "Responses"
        }, 
        {
            "location": "/projects/assetlibrary/events/", 
            "text": "ASSET LIBRARY EVENTS\n\n\nThe asset library publishes messages to configurable MQTT topics on certain events taking place.\n\n\nConfiguration\n\n\nBy default, the MQTT event topics are confgured as follows, but may be overridden per deployment:\n\n\nevents\n:\n\n  \ngroups\n:\n\n    \ntopic\n:\n \ncdf/assetlibrary/events/groups/{objectId}/{event}\n\n  \ndevices\n:\n\n    \ntopic\n:\n \ncdf/assetlibrary/events/devices/{objectId}/{event}\n\n  \npolicies\n:\n\n    \ntopic\n:\n \ncdf/assetlibrary/events/policies/{objectId}/{event}\n\n  \ngroupTemplates\n:\n\n    \ntopic\n:\n \ncdf/assetlibrary/events/groupTemplates/{objectId}/{event}\n\n  \ndeviceTemplates\n:\n\n    \ntopic\n:\n \ncdf/assetlibrary/events/deviceTemplates/{objectId}/{event}\n\n\n\n\n\n{objectId}\n represents the unique identifier as follows:\n\n\n\n\ngroups:  \ngroupPath\n\n\ndevices: \ndeviceId\n\n\npolicies: \npolicyId\n\n\ngroupTemplates: \ntemplateId\n\n\ndeviceTemplates: \ntemplateId\n\n\n\n\nEvents\n\n\nThe payload for the MQTT message is as follows:\n\n\n{\n\n    \nobjectId\n:\n \ngroupPath | deviceId | policyId | templateId\n,\n\n    \ntype\n:\n \ngroups | groupTemplates | devices | deviceTemplates | policies\n,\n\n    \nevent\n:\n \ncreate | modify | delete\n,\n\n    \npayload\n:\n \nrefer to specific event below\n,\n\n    \nattributes\n:\n \n{\n\n        \nrefer\n \nto\n \nspecific\n \nevent\n \nbelow\n\n    \n}\n\n\n}\n\n\n\n\n\nDevice Events\n\n\nThe following events are published per device:\n\n\n\n\n\n\n\n\nEvent\n\n\nType\n\n\nEvent\n\n\nPayload\n\n\nAttributes\n\n\n\n\n\n\n\n\n\n\nDevice created\n\n\ndevices\n\n\ncreate\n\n\nDevice\n\n\nN/A\n\n\n\n\n\n\nDevice updated\n\n\ndevices\n\n\nmodify\n\n\nDevice (changed attributes)\n\n\nN/A\n\n\n\n\n\n\nDevice deleted\n\n\ndevices\n\n\ndelete\n\n\nDevice (pre delete)\n\n\nN/A\n\n\n\n\n\n\nDevice attached to group\n\n\ndevices\n\n\nmodify\n\n\nN/A\n\n\n{\"deviceId\":\"\", \"attachedToGroup\":\"\ngroupPath>\", \"relationship\":\"\nname>\" }\n\n\n\n\n\n\nDevice detached from group\n\n\ndevices\n\n\nmodify\n\n\nN/A\n\n\n{\"deviceId\":\"\", \"detachedFromGroup\":\"\ngroupPath>\", \"relationship\":\"\nname>\" }\n\n\n\n\n\n\nDevice attached to another device\n\n\ndevices\n\n\nmodify\n\n\nN/A\n\n\n{\"deviceId\":\"\", \"attachedToDevice\":\"\notherDeviceId>\", \"relationship\":\"\nname>\" }\n\n\n\n\n\n\nDevice detached from another device\n\n\ndevices\n\n\nmodify\n\n\nN/A\n\n\n{\"deviceId\":\"\", \"detachedFromDevice\":\"\notherDeviceId>\", \"relationship\":\"\nname>\" }\n\n\n\n\n\n\nDevice component created\n\n\ndevices\n\n\ncreate\n\n\nDevice (the component)\n\n\n{\"deviceId\":\"\nparentDeviceId>\", \"componentId\":\"\" }\n\n\n\n\n\n\nDevice component updated\n\n\ndevices\n\n\nmodify\n\n\nDevice (the component, changed attributes)\n\n\n{\"deviceId\":\"\nparentDeviceId\\\", \"componentId\":\"\" }\n\n\n\n\n\n\nDevice component deleted\n\n\ndevices\n\n\ndelete\n\n\nN/A\n\n\n{\"deviceId\":\"\nparentDeviceId\\\", \"componentId\":\"\" }\n\n\n\n\n\n\n\n\nGroup Events\n\n\nThe following events are published per group:\n\n\n\n\n\n\n\n\nEvent\n\n\nType\n\n\nEvent\n\n\nPayload\n\n\nAttributes\n\n\n\n\n\n\n\n\n\n\nGroup created\n\n\ngroups\n\n\ncreate\n\n\nGroup\n\n\nN/A\n\n\n\n\n\n\nGroup updated\n\n\ngroups\n\n\nmodify\n\n\nGroup (changed attributes)\n\n\nN/A\n\n\n\n\n\n\nGroup deleted\n\n\ngroups\n\n\ndelete\n\n\nGroup (pre delete)\n\n\nN/A\n\n\n\n\n\n\n\n\nPolicy Events\n\n\nThe following events are published per policy:\n\n\n\n\n\n\n\n\nEvent\n\n\nType\n\n\nEvent\n\n\nPayload\n\n\nAttributes\n\n\n\n\n\n\n\n\n\n\nPolicy created\n\n\npolicies\n\n\ncreate\n\n\nPolicy\n\n\nN/A\n\n\n\n\n\n\nPolicy updated\n\n\npolicies\n\n\nmodify\n\n\nPolicy (changed attributes)\n\n\nN/A\n\n\n\n\n\n\nPolicy deleted\n\n\npolicies\n\n\ndelete\n\n\nPolicy (pre delete)\n\n\nN/A\n\n\n\n\n\n\n\n\nDevice Template Events\n\n\nThe following events are published per device template:\n\n\n\n\n\n\n\n\nEvent\n\n\nType\n\n\nEvent\n\n\nPayload\n\n\nAttributes\n\n\n\n\n\n\n\n\n\n\nDevice Template created\n\n\ndeviceTemplates\n\n\ncreate\n\n\nTemplate\n\n\nN/A\n\n\n\n\n\n\nDevice Template updated\n\n\ndeviceTemplates\n\n\nmodify\n\n\nTemplate (changed attributes)\n\n\nN/A\n\n\n\n\n\n\nDevice Template published\n\n\ndeviceTemplates\n\n\nmodify\n\n\nN/A\n\n\n{ \"status\":\"published\" }\n\n\n\n\n\n\nDevice Template deleted\n\n\ndeviceTemplates\n\n\ndelete\n\n\nTemplate (pre-delete)\n\n\nN/A\n\n\n\n\n\n\n\n\nGroup Template Events\n\n\nThe following events are published per group template:\n\n\n\n\n\n\n\n\nEvent\n\n\nType\n\n\nEvent\n\n\nPayload\n\n\nAttributes\n\n\n\n\n\n\n\n\n\n\nGroup Template created\n\n\ngroupTemplates\n\n\ncreate\n\n\nTemplate\n\n\nN/A\n\n\n\n\n\n\nGroup Template updated\n\n\ngroupTemplates\n\n\nmodify\n\n\nTemplate (changed attributes)\n\n\nN/A\n\n\n\n\n\n\nGroup Template published\n\n\ngroupTemplates\n\n\nmodify\n\n\nN/A\n\n\n{ \"status\":\"published\" }\n\n\n\n\n\n\nGroup Template deleted\n\n\ngroupTemplates\n\n\ndelete\n\n\nTemplate (pre-delete)\n\n\nN/A", 
            "title": "ASSET LIBRARY EVENTS"
        }, 
        {
            "location": "/projects/assetlibrary/events/#asset-library-events", 
            "text": "The asset library publishes messages to configurable MQTT topics on certain events taking place.", 
            "title": "ASSET LIBRARY EVENTS"
        }, 
        {
            "location": "/projects/assetlibrary/events/#configuration", 
            "text": "By default, the MQTT event topics are confgured as follows, but may be overridden per deployment:  events : \n   groups : \n     topic :   cdf/assetlibrary/events/groups/{objectId}/{event} \n   devices : \n     topic :   cdf/assetlibrary/events/devices/{objectId}/{event} \n   policies : \n     topic :   cdf/assetlibrary/events/policies/{objectId}/{event} \n   groupTemplates : \n     topic :   cdf/assetlibrary/events/groupTemplates/{objectId}/{event} \n   deviceTemplates : \n     topic :   cdf/assetlibrary/events/deviceTemplates/{objectId}/{event}   {objectId}  represents the unique identifier as follows:   groups:   groupPath  devices:  deviceId  policies:  policyId  groupTemplates:  templateId  deviceTemplates:  templateId", 
            "title": "Configuration"
        }, 
        {
            "location": "/projects/assetlibrary/events/#events", 
            "text": "The payload for the MQTT message is as follows:  { \n     objectId :   groupPath | deviceId | policyId | templateId , \n     type :   groups | groupTemplates | devices | deviceTemplates | policies , \n     event :   create | modify | delete , \n     payload :   refer to specific event below , \n     attributes :   { \n         refer   to   specific   event   below \n     }  }", 
            "title": "Events"
        }, 
        {
            "location": "/projects/assetlibrary/events/#device-events", 
            "text": "The following events are published per device:     Event  Type  Event  Payload  Attributes      Device created  devices  create  Device  N/A    Device updated  devices  modify  Device (changed attributes)  N/A    Device deleted  devices  delete  Device (pre delete)  N/A    Device attached to group  devices  modify  N/A  {\"deviceId\":\"\", \"attachedToGroup\":\" groupPath>\", \"relationship\":\" name>\" }    Device detached from group  devices  modify  N/A  {\"deviceId\":\"\", \"detachedFromGroup\":\" groupPath>\", \"relationship\":\" name>\" }    Device attached to another device  devices  modify  N/A  {\"deviceId\":\"\", \"attachedToDevice\":\" otherDeviceId>\", \"relationship\":\" name>\" }    Device detached from another device  devices  modify  N/A  {\"deviceId\":\"\", \"detachedFromDevice\":\" otherDeviceId>\", \"relationship\":\" name>\" }    Device component created  devices  create  Device (the component)  {\"deviceId\":\" parentDeviceId>\", \"componentId\":\"\" }    Device component updated  devices  modify  Device (the component, changed attributes)  {\"deviceId\":\" parentDeviceId\\\", \"componentId\":\"\" }    Device component deleted  devices  delete  N/A  {\"deviceId\":\" parentDeviceId\\\", \"componentId\":\"\" }", 
            "title": "Device Events"
        }, 
        {
            "location": "/projects/assetlibrary/events/#group-events", 
            "text": "The following events are published per group:     Event  Type  Event  Payload  Attributes      Group created  groups  create  Group  N/A    Group updated  groups  modify  Group (changed attributes)  N/A    Group deleted  groups  delete  Group (pre delete)  N/A", 
            "title": "Group Events"
        }, 
        {
            "location": "/projects/assetlibrary/events/#policy-events", 
            "text": "The following events are published per policy:     Event  Type  Event  Payload  Attributes      Policy created  policies  create  Policy  N/A    Policy updated  policies  modify  Policy (changed attributes)  N/A    Policy deleted  policies  delete  Policy (pre delete)  N/A", 
            "title": "Policy Events"
        }, 
        {
            "location": "/projects/assetlibrary/events/#device-template-events", 
            "text": "The following events are published per device template:     Event  Type  Event  Payload  Attributes      Device Template created  deviceTemplates  create  Template  N/A    Device Template updated  deviceTemplates  modify  Template (changed attributes)  N/A    Device Template published  deviceTemplates  modify  N/A  { \"status\":\"published\" }    Device Template deleted  deviceTemplates  delete  Template (pre-delete)  N/A", 
            "title": "Device Template Events"
        }, 
        {
            "location": "/projects/assetlibrary/events/#group-template-events", 
            "text": "The following events are published per group template:     Event  Type  Event  Payload  Attributes      Group Template created  groupTemplates  create  Template  N/A    Group Template updated  groupTemplates  modify  Template (changed attributes)  N/A    Group Template published  groupTemplates  modify  N/A  { \"status\":\"published\" }    Group Template deleted  groupTemplates  delete  Template (pre-delete)  N/A", 
            "title": "Group Template Events"
        }, 
        {
            "location": "/projects/assetlibrary/fine-grained-access-control/", 
            "text": "ASSET LIBRARY FINE-GRAINED ACCESS CONTROL\n\n\nHigh Level Approach\n\n\nFine-grained access control is supported in \nfull\n mode only.\n\n\nA user\u2019s allowed access to group hierarchies, and their allowed operations on these hierarchies, is managed via an external IdP (such as Cognito).\n\n\nWhen constructing a data model within Asset Library, devices and groups are organized into group hierarchies.  Each group within a hierarchy is identified by a unique group path.  When fine-grained access control is enabled for an Asset Library deployment, the IdP will allow for CRUD method operations and group paths to be added to an identities claims.  These claims will be passed to the Asset Library as part of the identities JWT token, with the JWT token being first validated by an API Gateway custom authorizer.\n\n\nWithin Asset Library, any attempted access to a device or group will be validated by traversing all outgoing relations to the device/group.  Only operations on devices/groups that belong to group hiersrchies that are present in the identities claims, along with the allowed access level, will be performed.\n\n\nDetailed Approach\n\n\nExample graph\n\n\nLet\u2019s take an example of a graph that we will refer to in the following sections:\n\n\n\n\nThis example has a concept of multi-tenancy (multiple companies at the top level represented as groups).  Printers are the modeled devices, with the printers being shared across the different companies.  Access to the printers is managed per company via company specific pools represented as groups.  Each company can also have its own tag groups.  Tags are used to group devices for searching, whereas pool groups are used as authorization to specific devices.  The naming and structure of these groups is irrelevant.\n\n\nThe following are the authorization constraints that need to be applied for the example:\n\n\n\n\nUsers within a company can only see printers that are assigned to pool groups that they have access to\n\n\nUsers can search for devices associated with tags associated with their company\n\n\n\n\nExample Asset Library Data Model Configuration\n\n\nIn the above example, we configure tenants (companies) as a top level group in the hierarchy. \n\n\nTemplate:\n\n{\n\n    \ntemplateId\n:\n \ncompany\n,\n\n    \ncategory\n:\n \ngroup\n,\n\n    \nproperties\n:\n \n{\n\n        \nclassification\n:\n \n{\n\n            \ntype\n:\n \nstring\n,\n\n            \nenum\n:\n \n[\nSuper\n,\nEndCustomer\n,\nReseller\n]\n\n        \n}\n\n    \n},\n\n    \nrelations\n:\n \n{},\n\n    \nrequired\n:\n \n[\nclassification\n]\n\n\n}\n\n\n\n\nExample:\n\n \n{\n\n    \nattributes\n:\n \n{\n\n        \nclassification\n:\n \nSuper\n\n    \n},\n\n    \ncategory\n:\n \ngroup\n,\n\n    \ntemplateId\n:\n \ncompany\n,\n\n    \nparentPath\n:\n \n/\n,\n\n    \nname\n:\n \nAcme Systems\n,\n\n    \ngroupPath\n:\n \n/acme systems\n\n\n}\n\n\n\n\nNext level, we configure 2 root groups to act as containers for tags and pools respectively.  Their parent being a company group.  This will allow us to restrict access at different levels of group hierarchies:\n\n\nExample:\n\n{\n\n    \nattributes\n:\n \n{},\n\n    \ncategory\n:\n \ngroup\n,\n\n    \ntemplateId\n:\n \nroot\n,\n\n    \nname\n:\n \ntags\n,\n\n    \ngroupPath\n:\n \n/acme systems/tags\n,\n\n    \nparentPath\n:\n \n/acem systems\n\n\n}\n \n\n{\n\n    \nattributes\n:\n \n{},\n\n    \ncategory\n:\n \ngroup\n,\n\n    \ntemplateId\n:\n \nroot\n,\n\n    \nname\n:\n \npools\n,\n\n    \ngroupPath\n:\n \n/acme systems/pools\n,\n\n    \nparentPath\n:\n \n/acem systems\n\n\n}\n\n\n\n\nThe next level in our example we have tags specific to a company.  Tags are used in searching across devices:\n\n\nTemplate:\n\n{\n\n    \ntemplateId\n:\n \ntag\n,\n\n    \ncategory\n:\n \ngroup\n,\n\n    \nproperties\n:\n \n{},\n\n    \nrelations\n:\n \n{\n\n        \nout\n:\n \n{\n\n            \ntagged\n:\n \n[\nprinter\n]\n\n        \n}\n\n    \n},\n\n    \nrequired\n:\n \n[]\n\n\n}\n\n\n\n\nExample:\n\n{\n\n    \nattributes\n:\n \n{},\n\n    \ncategory\n:\n \ngroup\n,\n\n    \ntemplateId\n:\n \ntag\n,\n\n    \nname\n:\n \nPriority\n,\n\n    \ngroupPath\n:\n \n/acme systems/tags/priority\n,\n\n    \nparentPath\n:\n \n/acme systems/tags\n\n\n}\n\n\n\n\nAt the same level of tags, we also have printer pools:\n\n\nTemplate:\n\n{\n\n    \ntemplateId\n:\n \nprinterpool\n,\n\n    \ncategory\n:\n \ngroup\n,\n\n    \nproperties\n:\n \n{},\n\n    \nrelations\n:\n \n{\n\n        \nin\n:\n \n{\n\n            \npool\n:\n \n[\n\n                \nprinter\n\n            \n]\n\n        \n}\n\n    \n},\n\n    \nrequired\n:\n \n[]\n\n\n}\n\n\n\n\nExample:\n\n{\n\n    \nattributes\n:\n \n{},\n\n    \ncategory\n:\n \ngroup\n,\n\n    \ntemplateId\n:\n \nprinterpool\n,\n\n    \nname\n:\n \nPublic\n,\n\n    \ngroupPath\n:\n \n/acme systems/pools/public\n,\n\n    \nparentPath\n:\n \n/acme systems/pools\n\n\n}\n\n\n\n\nAt the bottom level we have the printers (devices) which are associated with a companies tags and pools.  Note that the printerpool group has an outgoing relation, so it is this group hierarchy that will be traversed to carry out authorization checks.  Tags are incoming relations, therefore are used for grouping only. \n\n\nTemplate:\n\n{\n\n    \ntemplateId\n:\n \nprinter\n,\n\n    \ncategory\n:\n \ndevice\n,\n\n    \nproperties\n:\n \n{\n\n        \nproduct\n:\n \n{\n\n            \ntype\n:\n \nstring\n\n        \n},\n\n        \nmodel\n:\n \n{\n\n            \ntype\n:\n \nstring\n\n        \n},\n\n        \nserialNumber\n:\n \n{\n\n            \ntype\n:\n \nstring\n\n        \n}\n\n    \n},\n\n    \nrelations\n:\n \n{\n\n        \nout\n:\n \n{\n\n            \npool\n:\n \n[\n\n                \nprinterpool\n\n            \n]\n\n        \n},\n\n        \nin\n:\n \n{\n\n            \ntagged\n:\n \n[\n\n                \ntag\n\n            \n]\n\n        \n}\n\n    \n},\n\n    \nrequired\n:\n \n[\nmodel\n,\nserialNumber\n]\n\n\n}\n\n\n\n\nExample:\n\n{\n\n    \ngroups\n:\n \n{\n\n        \npool\n:\n \n[\n\n            \n/acme systems/pools/public\n\n        \n],\n\n        \ntagged\n:\n \n[\n\n            \n/acme systems/tags/priority\n\n        \n]\n\n    \n},\n\n    \nattributes\n:\n \n{\n\n        \nproduct\n:\n \nAcme Pro Line\n,\n\n        \nserialNumber\n:\n \nABC123\n,\n\n        \nmodel\n:\n \n4001\n\n    \n},\n\n    \ncategory\n:\n \ndevice\n,\n\n    \ntemplateId\n:\n \nprinter\n,\n\n    \nstate\n:\n \nactive\n,\n\n    \ndeviceId\n:\n \nprinter_a\n\n\n}\n\n\n\n\nIdP Configuration\n\n\nThe external IdP should allow for the configuring of claims by specifying a group path along with allowed operations.  The following represent example custom claims where the claim key is \ncdf_al\n, and the claim value is an array of group paths along with allowed claim access levels: \u2018C\u2019reate, \u2019R\u2019ead, \u2019U\u2019pdate, \u2019D\u2019elete, or \u2019*\u2018 as a shortcut for full privileges:\n\n\n\n\n\n\n\n\nRole\n\n\nDescription\n\n\nCustom Claims\n\n\n\n\n\n\n\n\n\n\nSuper Administrator\n\n\nFull privileges to entire Asset Library\n\n\n\"cdf_al\": [\"/:*\"]\n\n\n\n\n\n\nCompany Administrator\n\n\nFull privileges to a specific tenant\n\n\n\"cdf_al\": [\"/acme solutions/my llc/:*\"]\n\n\n\n\n\n\nSuper User\n\n\nAble to manage tags, and manage a specific pool of printers\n\n\n\"cdf_al\": [\"/acme solutions/tags:\n\",\"/acme solutions/pools/public:\n\"]\n\n\n\n\n\n\nUser\n\n\nAble to use tags, and use printers from a specific pool\n\n\n\"cdf_al\": [\"/acme solutions/tags:R\",\"/acme solutions/pools/public:R\"]\n\n\n\n\n\n\n\n\nAn example (decrypted) JWT payload generated by the IdP including the custom claims would be:\n\n{\n\n  \niss\n:\n \nSome IdP\n,\n\n  \niat\n:\n \n1570654016\n,\n\n  \nexp\n:\n \n1602190016\n,\n\n  \ncdf_al\n:\n \n[\n/acme solutions/tags:R\n,\n \n/acme solutions/pools/public:R\n]\n\n\n}\n\n\n\n\nAsset Library Authorization Checks\n\n\nAuthorization checks via supplied JWT tokens are configurable via feature toggles per installation.  By default, for backwards compatability, fine-grained access control is disabled.\n\n\nIf enabled, an API Gateway Custom Authorizer is deployed and configured for use with the Asset Library with the sole responsibility of verifying the supplied JWT (structure checks, signature verification, standard claims, expiration, etc).  If trusted, the request will be forwarded to the Asset Library.\n\n\nAs fine-grained access controls needs to be carried out at the group/device level within the group hierarchies, it is not possible to perform the authorization checks within the service layer as the service layer has no knowledge of a groups/devices hierarchy.  The authorization checks are carried out in the data layer to allow for fast and efficient checks.\n\n\nAll of the device/group REST API\u2019s start with a specific device/group in context.  For these types of queries, a preliminary query can be executed to see if a user has access to the device/group in context via one of its hierarchy as follows:\n\n\nPsuedo code:\n\n1\n. Lookup matching group claims:\n    \n1\n. Starting with the device\n        \n1\n. Navigate all outgoing links through all related hierarchies \nuntil\n one of the paths defined in a claim is found\n        \n2\n. Return these matched group paths to the Asset Library\n\n2\n. Compare matched group claims:\n    \n1\n. For each returned matched group, compare the required authorization level with the authorization level claimed\n\n3\n. If authorized, proceed as normal\n\n\n\nExample Gremlin query to satisfy item 1 above using a traversal query looking for exact matches:\n\ng\n.\nV\n(\ndevice___20000-30091278003\n).\n\n      \nuntil\n(\n\n         \nhas\n(\ngroupPath\n,\nwithin\n(\n/acme systems/pools/public\n))\n\n      \n).\n\n      \nrepeat\n(\nout\n()).\nvalues\n(\ngroupPath\n)\n\n\n\n\nThe search REST API behaves in a different manner to the devices/groups.  Instead of starting with a specific device/group in context, it searches across all devices/groups.  For this, a Gremlin \nmatch\n command is performed to ensure returned devices/groups are part of a group hierarchy the user has access to.\n\n\nExample Gremlin query adding a match statement to the existing search query, ensuring the returned devices/groups can be accessible via the allowed public and private pool for customer Acme Systems:\n\n\nsql\ng.V().as('a').\n match(\n   .as('a').hasLabel('printer'),\n   .as('a').until(hasId('group___/acme systems/pools/public', 'group___/acme systems/pools/private')).repeat(__.out())\n )\n\n\nAsset Library REST API Updates\n\n\nAny REST API actions deemed as not allowed due to failed authorization checks will return \n403 Forbidden\n.\n\n\nPrior to this new feature, only outgoing relations from devices to group hierarchies were allowed.  Due to this, there was no need to identify incoming vs outgoing relations in the device related REST API responses.  As we now need to differentiate, a version 2 of the API (\napplication/vnd.aws-cdf-v2.0+json\n) is supported that identifies incoming vs outgoing separately.  The existing version 1 of the API remaina as-is.", 
            "title": "ASSET LIBRARY FINE-GRAINED ACCESS CONTROL"
        }, 
        {
            "location": "/projects/assetlibrary/fine-grained-access-control/#asset-library-fine-grained-access-control", 
            "text": "", 
            "title": "ASSET LIBRARY FINE-GRAINED ACCESS CONTROL"
        }, 
        {
            "location": "/projects/assetlibrary/fine-grained-access-control/#high-level-approach", 
            "text": "Fine-grained access control is supported in  full  mode only.  A user\u2019s allowed access to group hierarchies, and their allowed operations on these hierarchies, is managed via an external IdP (such as Cognito).  When constructing a data model within Asset Library, devices and groups are organized into group hierarchies.  Each group within a hierarchy is identified by a unique group path.  When fine-grained access control is enabled for an Asset Library deployment, the IdP will allow for CRUD method operations and group paths to be added to an identities claims.  These claims will be passed to the Asset Library as part of the identities JWT token, with the JWT token being first validated by an API Gateway custom authorizer.  Within Asset Library, any attempted access to a device or group will be validated by traversing all outgoing relations to the device/group.  Only operations on devices/groups that belong to group hiersrchies that are present in the identities claims, along with the allowed access level, will be performed.", 
            "title": "High Level Approach"
        }, 
        {
            "location": "/projects/assetlibrary/fine-grained-access-control/#detailed-approach", 
            "text": "", 
            "title": "Detailed Approach"
        }, 
        {
            "location": "/projects/assetlibrary/fine-grained-access-control/#example-graph", 
            "text": "Let\u2019s take an example of a graph that we will refer to in the following sections:   This example has a concept of multi-tenancy (multiple companies at the top level represented as groups).  Printers are the modeled devices, with the printers being shared across the different companies.  Access to the printers is managed per company via company specific pools represented as groups.  Each company can also have its own tag groups.  Tags are used to group devices for searching, whereas pool groups are used as authorization to specific devices.  The naming and structure of these groups is irrelevant.  The following are the authorization constraints that need to be applied for the example:   Users within a company can only see printers that are assigned to pool groups that they have access to  Users can search for devices associated with tags associated with their company", 
            "title": "Example graph"
        }, 
        {
            "location": "/projects/assetlibrary/fine-grained-access-control/#example-asset-library-data-model-configuration", 
            "text": "In the above example, we configure tenants (companies) as a top level group in the hierarchy.   Template: { \n     templateId :   company , \n     category :   group , \n     properties :   { \n         classification :   { \n             type :   string , \n             enum :   [ Super , EndCustomer , Reseller ] \n         } \n     }, \n     relations :   {}, \n     required :   [ classification ]  }   Example:   { \n     attributes :   { \n         classification :   Super \n     }, \n     category :   group , \n     templateId :   company , \n     parentPath :   / , \n     name :   Acme Systems , \n     groupPath :   /acme systems  }   Next level, we configure 2 root groups to act as containers for tags and pools respectively.  Their parent being a company group.  This will allow us to restrict access at different levels of group hierarchies:  Example: { \n     attributes :   {}, \n     category :   group , \n     templateId :   root , \n     name :   tags , \n     groupPath :   /acme systems/tags , \n     parentPath :   /acem systems  }   { \n     attributes :   {}, \n     category :   group , \n     templateId :   root , \n     name :   pools , \n     groupPath :   /acme systems/pools , \n     parentPath :   /acem systems  }   The next level in our example we have tags specific to a company.  Tags are used in searching across devices:  Template: { \n     templateId :   tag , \n     category :   group , \n     properties :   {}, \n     relations :   { \n         out :   { \n             tagged :   [ printer ] \n         } \n     }, \n     required :   []  }   Example: { \n     attributes :   {}, \n     category :   group , \n     templateId :   tag , \n     name :   Priority , \n     groupPath :   /acme systems/tags/priority , \n     parentPath :   /acme systems/tags  }   At the same level of tags, we also have printer pools:  Template: { \n     templateId :   printerpool , \n     category :   group , \n     properties :   {}, \n     relations :   { \n         in :   { \n             pool :   [ \n                 printer \n             ] \n         } \n     }, \n     required :   []  }   Example: { \n     attributes :   {}, \n     category :   group , \n     templateId :   printerpool , \n     name :   Public , \n     groupPath :   /acme systems/pools/public , \n     parentPath :   /acme systems/pools  }   At the bottom level we have the printers (devices) which are associated with a companies tags and pools.  Note that the printerpool group has an outgoing relation, so it is this group hierarchy that will be traversed to carry out authorization checks.  Tags are incoming relations, therefore are used for grouping only.   Template: { \n     templateId :   printer , \n     category :   device , \n     properties :   { \n         product :   { \n             type :   string \n         }, \n         model :   { \n             type :   string \n         }, \n         serialNumber :   { \n             type :   string \n         } \n     }, \n     relations :   { \n         out :   { \n             pool :   [ \n                 printerpool \n             ] \n         }, \n         in :   { \n             tagged :   [ \n                 tag \n             ] \n         } \n     }, \n     required :   [ model , serialNumber ]  }   Example: { \n     groups :   { \n         pool :   [ \n             /acme systems/pools/public \n         ], \n         tagged :   [ \n             /acme systems/tags/priority \n         ] \n     }, \n     attributes :   { \n         product :   Acme Pro Line , \n         serialNumber :   ABC123 , \n         model :   4001 \n     }, \n     category :   device , \n     templateId :   printer , \n     state :   active , \n     deviceId :   printer_a  }", 
            "title": "Example Asset Library Data Model Configuration"
        }, 
        {
            "location": "/projects/assetlibrary/fine-grained-access-control/#idp-configuration", 
            "text": "The external IdP should allow for the configuring of claims by specifying a group path along with allowed operations.  The following represent example custom claims where the claim key is  cdf_al , and the claim value is an array of group paths along with allowed claim access levels: \u2018C\u2019reate, \u2019R\u2019ead, \u2019U\u2019pdate, \u2019D\u2019elete, or \u2019*\u2018 as a shortcut for full privileges:     Role  Description  Custom Claims      Super Administrator  Full privileges to entire Asset Library  \"cdf_al\": [\"/:*\"]    Company Administrator  Full privileges to a specific tenant  \"cdf_al\": [\"/acme solutions/my llc/:*\"]    Super User  Able to manage tags, and manage a specific pool of printers  \"cdf_al\": [\"/acme solutions/tags: \",\"/acme solutions/pools/public: \"]    User  Able to use tags, and use printers from a specific pool  \"cdf_al\": [\"/acme solutions/tags:R\",\"/acme solutions/pools/public:R\"]     An example (decrypted) JWT payload generated by the IdP including the custom claims would be: { \n   iss :   Some IdP , \n   iat :   1570654016 , \n   exp :   1602190016 , \n   cdf_al :   [ /acme solutions/tags:R ,   /acme solutions/pools/public:R ]  }", 
            "title": "IdP Configuration"
        }, 
        {
            "location": "/projects/assetlibrary/fine-grained-access-control/#asset-library-authorization-checks", 
            "text": "Authorization checks via supplied JWT tokens are configurable via feature toggles per installation.  By default, for backwards compatability, fine-grained access control is disabled.  If enabled, an API Gateway Custom Authorizer is deployed and configured for use with the Asset Library with the sole responsibility of verifying the supplied JWT (structure checks, signature verification, standard claims, expiration, etc).  If trusted, the request will be forwarded to the Asset Library.  As fine-grained access controls needs to be carried out at the group/device level within the group hierarchies, it is not possible to perform the authorization checks within the service layer as the service layer has no knowledge of a groups/devices hierarchy.  The authorization checks are carried out in the data layer to allow for fast and efficient checks.  All of the device/group REST API\u2019s start with a specific device/group in context.  For these types of queries, a preliminary query can be executed to see if a user has access to the device/group in context via one of its hierarchy as follows:  Psuedo code: 1 . Lookup matching group claims:\n     1 . Starting with the device\n         1 . Navigate all outgoing links through all related hierarchies  until  one of the paths defined in a claim is found\n         2 . Return these matched group paths to the Asset Library 2 . Compare matched group claims:\n     1 . For each returned matched group, compare the required authorization level with the authorization level claimed 3 . If authorized, proceed as normal  Example Gremlin query to satisfy item 1 above using a traversal query looking for exact matches: g . V ( device___20000-30091278003 ). \n       until ( \n          has ( groupPath , within ( /acme systems/pools/public )) \n       ). \n       repeat ( out ()). values ( groupPath )   The search REST API behaves in a different manner to the devices/groups.  Instead of starting with a specific device/group in context, it searches across all devices/groups.  For this, a Gremlin  match  command is performed to ensure returned devices/groups are part of a group hierarchy the user has access to.  Example Gremlin query adding a match statement to the existing search query, ensuring the returned devices/groups can be accessible via the allowed public and private pool for customer Acme Systems:  sql\ng.V().as('a').\n match(\n   .as('a').hasLabel('printer'),\n   .as('a').until(hasId('group___/acme systems/pools/public', 'group___/acme systems/pools/private')).repeat(__.out())\n )", 
            "title": "Asset Library Authorization Checks"
        }, 
        {
            "location": "/projects/assetlibrary/fine-grained-access-control/#asset-library-rest-api-updates", 
            "text": "Any REST API actions deemed as not allowed due to failed authorization checks will return  403 Forbidden .  Prior to this new feature, only outgoing relations from devices to group hierarchies were allowed.  Due to this, there was no need to identify incoming vs outgoing relations in the device related REST API responses.  As we now need to differentiate, a version 2 of the API ( application/vnd.aws-cdf-v2.0+json ) is supported that identifies incoming vs outgoing separately.  The existing version 1 of the API remaina as-is.", 
            "title": "Asset Library REST API Updates"
        }, 
        {
            "location": "/projects/assetlibrary/modes/", 
            "text": "ASSET LIBRARY MODES\n\n\nIntroduction\n\n\nThe Asset Library is capable of running in one of two modes:  \nfull\n and \nlite\n.\n\n\nThe \nlite\n version uses The AWS IoT Device Registry to store all devices and groups data, whereas the \nfull\n version utilizes AWS Neptune to augment the AWS IoT Device Registry to provide more advanced data modelling features.\n\n\nThe mode is determined via a comfiguration property that is to be provided at the time of deployment.  The following describes the differences in functionality between the two modes.\n\n\nSupported Functionality by REST API\n\n\nThe following table indicates which REST API's are available in which mode:\n\n\nDevices\n\n\n\n\n\n\n\n\nEndpoint\n\n\nDescription\n\n\nfull\n mode\n\n\nlite\n mode\n\n\n\n\n\n\n\n\n\n\nPOST /devices\n\n\nAdds a new device to the Asset Library\n\n\n\u2705 (adding to a default parent group if none provided)\n\n\n\u2705 (creating components not supported, and no default parent group set if none provided)\n\n\n\n\n\n\nPOST /bulkdevices\n\n\nAdds a batch of devices to the Asset Library\n\n\n\u2705\n\n\n\u2705 (see \nPOST /devices\n)\n\n\n\n\n\n\nPATCH /bulkdevices\n\n\nUpdates a batch of existing devices\n\n\n\u2705\n\n\n\u26d4\n\n\n\n\n\n\nGET /devices/{deviceId}\n\n\nFind a device by ID\n\n\n\u2705\n\n\n\u2705\n\n\n\n\n\n\nDELETE /devices/{deviceId}\n\n\nDelete a device\n\n\n\u2705\n\n\n\u2705\n\n\n\n\n\n\nPATCH /devices/{deviceId}\n\n\nPerforms a partial update of an existing device\n\n\n\u2705\n\n\n\u2705 (supports optimistic locking by providing an optional \nexpectedVersion\n.  If not provided, the latest version of the device will be updated)\n\n\n\n\n\n\nPUT /devices/{deviceId}/{relationship}/groups/{groupPath}\n\n\nAssociates a device to a a group, giving context to its relationship\n\n\n\u2705\n\n\n\u2705 (does not support providing context to the relationship - only supported value for \nrelatiobship\n is \ngroup\n)\n\n\n\n\n\n\nDELETE /devices/{deviceId}/{relationship}/groups/{groupPath}\n\n\nRemoves a device from an associated group\n\n\n\u2705\n\n\n\u2705 (only supported value for \nrelationship\n is \ngroup\n)\n\n\n\n\n\n\nPUT /devices/{deviceId}/{relationship}/devices/{otherDeviceId}\n\n\nAssociates a device to another device, giving context to its relationship\n\n\n\u2705\n\n\n\u26d4\n\n\n\n\n\n\nDELETE /devices/{deviceId}/{relationship}/devices/{otherDeviceId}\n\n\nRemoves a device from an associated device\n\n\n\u2705\n\n\n\u26d4\n\n\n\n\n\n\nPOST /devices/{deviceId}/components\n\n\nCreates a new component and adds to the device\n\n\n\u2705\n\n\n\u26d4\n\n\n\n\n\n\nPATCH /devices/{deviceId}/components/{componentId}\n\n\nUpdates the component of a device\n\n\n\u2705\n\n\n\u26d4\n\n\n\n\n\n\nDELETE /devices/{deviceId}/components/{componentId}\n\n\nDeletes a component of a device\n\n\n\u2705\n\n\n\u26d4\n\n\n\n\n\n\n\n\nGroups\n\n\n\n\n\n\n\n\nEndpoint\n\n\nDescription\n\n\nfull\n mode\n\n\nlite\n mode\n\n\n\n\n\n\n\n\n\n\nPOST /groups\n\n\nAdds a new group to the device library as a child of the \nparentPath\n as specified in the request body\n\n\n\u2705\n\n\n\u2705 (specifying a parent is optional, specifying a template is not supported, and linking groups to other groups not supported)\n\n\n\n\n\n\nPOST /bulkgroups\n\n\nAdds a batch of new group to the asset library as a child of the \nparentPath\n as specified in the request body\n\n\n\u2705\n\n\n\u2705 (see \nPOST /groups\n)\n\n\n\n\n\n\nGET /groups/{groupPath}\n\n\nFind group by Group's path\n\n\n\u2705\n\n\n\u2705\n\n\n\n\n\n\nDELETE /groups/{groupPath}\n\n\nDelete group with supplied path\n\n\n\u2705\n\n\n\u2705\n\n\n\n\n\n\nPATCH /groups/{groupPath}\n\n\nUpdate an existing group's attributes, including changing its parent group\n\n\n\u2705\n\n\n\u2705 (see \nPOST /groups\n)\n\n\n\n\n\n\nGET /groups/{groupPath}/members/devices\n\n\nList device members of group for supplied Group name\n\n\n\u2705\n\n\n\u2705 (filtering by template or state not supported)\n\n\n\n\n\n\nGET /groups/{groupPath}/members/groups\n\n\nList group members of group for supplied Group name\n\n\n\u2705\n\n\n\u2705 (filtering by template not supported)\n\n\n\n\n\n\nGET /groups/{groupPath}/memberships\n\n\nList all ancestor groups of a specific group\n\n\n\u2705\n\n\n\u2705\n\n\n\n\n\n\nPUT /groups/{sourceGroupPath}/{relationship}/groups/{targetGroupPath}\n\n\nAssociates a group with another group, giving context to its relationship\n\n\n\u2705\n\n\n\u26d4\n\n\n\n\n\n\nDELETE /groups/{sourceGroupPath}/{relationship}/groups/{targetGroupPath}\n\n\nRemoves a group from an associated group\n\n\n\u2705\n\n\n\u26d4\n\n\n\n\n\n\n\n\nDevice Templates\n\n\n\n\n\n\n\n\nEndpoint\n\n\nDescription\n\n\nfull\n mode\n\n\nlite\n mode\n\n\n\n\n\n\n\n\n\n\nPOST /templates/devices/{templateId}\n\n\nRegisters a new device template within the system, using the JSON Schema standard to define the device template attributes and constraints\n\n\n\u2705\n\n\n\u2705 (string types supported only, defining allowed relations to other group types not supported, and required attributes not supported)\n\n\n\n\n\n\nGET /templates/devices/{templateId}\n\n\nFind device template by ID\n\n\n\u2705\n\n\n\u2705\n\n\n\n\n\n\nPATCH /templates/devices/{templateId}\n\n\nUpdate an existing device template\n\n\n\u2705\n\n\n\u2705 (see \nPOST /templates/devices/{templateId}\n)\n\n\n\n\n\n\nDELETE /templates/devices/{templateId}\n\n\nDeletes an existing device template\n\n\n\u2705\n\n\n\u2705 (deleting a template will deprecate the Thing Type, not delete it)\n\n\n\n\n\n\nPUT /templates/devices/{templateId}/publish\n\n\nPublishes an existing device template\n\n\n\u2705\n\n\n\u26d4\n\n\n\n\n\n\n\n\nGroup Templates\n\n\n\n\n\n\n\n\nEndpoint\n\n\nDescription\n\n\nfull\n mode\n\n\nlite\n mode\n\n\n\n\n\n\n\n\n\n\nPOST /templates/groups/{templateId}\n\n\nRegisters a new group template within the system, using the JSON Schema standard to define the group template attributes and constraints\n\n\n\u2705\n\n\n\u26d4\n\n\n\n\n\n\nGET /templates/groups/{templateId}\n\n\nFind group template by ID\n\n\n\u2705\n\n\n\u26d4\n\n\n\n\n\n\nPATCH /templates/groups/{templateId}\n\n\nUpdate an existing group template\n\n\n\u2705\n\n\n\u26d4\n\n\n\n\n\n\nDELETE /templates/groups/{templateId}\n\n\nDeletes an existing group template\n\n\n\u2705\n\n\n\u26d4\n\n\n\n\n\n\nPUT /templates/groups/{templateId}/publish\n\n\nPublishes an existing group template\n\n\n\u2705\n\n\n\u26d4\n\n\n\n\n\n\n\n\nDevice Profiles\n\n\n\n\n\n\n\n\nEndpoint\n\n\nDescription\n\n\nfull\n mode\n\n\nlite\n mode\n\n\n\n\n\n\n\n\n\n\nPOST /profiles/device/{templateId}\n\n\nAdds a new device profile for a specific template\n\n\n\u2705\n\n\n\u26d4\n\n\n\n\n\n\nGET /profiles/device/{templateId}\n\n\nReturn all device profiles for a specific template\n\n\n\u2705\n\n\n\u26d4\n\n\n\n\n\n\nGET /profiles/device/{templateId}/{profileId}\n\n\nRetrieve a device profile\n\n\n\u2705\n\n\n\u26d4\n\n\n\n\n\n\nDELETE /profiles/device/{templateId}/{profileId}\n\n\nDelete a specific device profile\n\n\n\u2705\n\n\n\u26d4\n\n\n\n\n\n\nPATCH /profiles/device/{templateId}/{profileId}\n\n\nUpdate an existing device profile\n\n\n\u2705\n\n\n\u26d4\n\n\n\n\n\n\n\n\nGroup Profiles\n\n\n\n\n\n\n\n\nEndpoint\n\n\nDescription\n\n\nfull\n mode\n\n\nlite\n mode\n\n\n\n\n\n\n\n\n\n\nPOST /profiles/group/{templateId}\n\n\nAdds a new group profile for a specific template\n\n\n\u2705\n\n\n\u26d4\n\n\n\n\n\n\nGET /profiles/group/{templateId}\n\n\nReturn all group profiles for a specific template\n\n\n\u2705\n\n\n\u26d4\n\n\n\n\n\n\nGET /profiles/group/{templateId}/{profileId}\n\n\nRetrieve a group profile\n\n\n\u2705\n\n\n\u26d4\n\n\n\n\n\n\nDELETE /profiles/group/{templateId}/{profileId}\n\n\nDelete a specific group profile\n\n\n\u2705\n\n\n\u26d4\n\n\n\n\n\n\nPATCH /profiles/group/{templateId}/{profileId}\n\n\nUpdate an existing group profile\n\n\n\u2705\n\n\n\u26d4\n\n\n\n\n\n\n\n\nPolicies\n\n\n\n\n\n\n\n\nEndpoint\n\n\nDescription\n\n\nfull\n mode\n\n\nlite\n mode\n\n\n\n\n\n\n\n\n\n\nPOST /policies\n\n\nCreates a new \nPolicy\n, and applies it to the provided \nGroups\n\n\n\u2705\n\n\n\u26d4\n\n\n\n\n\n\nGET /policies\n\n\nList policies, optionally filtered by policy type\n\n\n\u2705\n\n\n\u26d4\n\n\n\n\n\n\nGET /policies/inherited\n\n\nReturns all inherited \nPolicies\n for a \nDevice\n or set of \nGroups\n where the \nDevice\n/\nGroups\n are associated with all the hierarchies that the \nPolicy\n applies to. Either \ndeviceId\n or \ngroupPath\n must be provided\n\n\n\u2705\n\n\n\u26d4\n\n\n\n\n\n\nPATCH /policies/{policyId}\n\n\nUpdate the attributes of an existing policy\n\n\n\u2705\n\n\n\u26d4\n\n\n\n\n\n\nDELETE /policies/{policyId}\n\n\nDelete an existing policy\n\n\n\u2705\n\n\n\u26d4\n\n\n\n\n\n\nGET /policies/{policyId}\n\n\nRetrieve a specific policy\n\n\n\u2705\n\n\n\u26d4\n\n\n\n\n\n\n\n\nSearch\n\n\n\n\n\n\n\n\nEndpoint\n\n\nDescription\n\n\nfull\n mode\n\n\nlite\n mode\n\n\n\n\n\n\n\n\n\n\nGET /search\n\n\nSearch for groups and devices\n\n\n\u2705\n\n\n\u2705\n\n\n\n\n\n\n\n\nSupported Functionality by Area\n\n\nThe following table describes the differences in functionality between the \nfull\n and \nlite\n modes by area:\n\n\nDevices\n\n\n\n\n\n\n\n\nDescription\n\n\nfull\n mode\n\n\nlite\n mode\n\n\n\n\n\n\n\n\n\n\nAttributes\n\n\nUnlimited attributes managed via a template, supporting string, number, and boolean types.  Key and value unlimited length.\n\n\nNo templates, maximum 50, string types only.  Maximum 128 characters key, and maximum 800 characters value\n\n\n\n\n\n\nValues\n\n\nNo limits\n\n\nAlphanumeric characters plus \n_.,@/:#-\n allowed only (no spaces)\n\n\n\n\n\n\nRequired attributes\n\n\nSupported\n\n\nNot supported\n\n\n\n\n\n\nDevice components\n\n\nSupported\n\n\nNot supported\n\n\n\n\n\n\nDefining relationship names for linked groups\n\n\nSupported\n\n\nNot supported\n\n\n\n\n\n\nLinking devices to other devices\n\n\nSupported\n\n\nNot supported\n\n\n\n\n\n\n\n\nDevice Templates\n\n\n\n\n\n\n\n\nDescription\n\n\nfull\n mode\n\n\nlite\n mode\n\n\n\n\n\n\n\n\n\n\nAttributes\n\n\nUnlimited attributes, supporting string, number, and boolean types.  Key and bvalue unlimited length.\n\n\nMaximum 3 attribtues per Thing Type\n\n\n\n\n\n\nUpdating device templates\n\n\nSupported\n\n\nNot supported\n\n\n\n\n\n\nRequired attributes\n\n\nSupported\n\n\nNot supported\n\n\n\n\n\n\nDefining allowed relations to groups\n\n\nSupported\n\n\nNot supported\n\n\n\n\n\n\nDefining allowed relations to devices\n\n\nSupported\n\n\nNot supported\n\n\n\n\n\n\n\n\nGroups\n\n\n\n\n\n\n\n\nDescription\n\n\nfull\n mode\n\n\nlite\n mode\n\n\n\n\n\n\n\n\n\n\nMembership\n\n\nDevices can belong to unlimited groups\n\n\nDevices can belong to a maximum of 10 groups, and cannot be added to more than 1 group within the same hierarchy\n\n\n\n\n\n\nMembers\n\n\nNo limits\n\n\nA group may not contain ore than 100 direct child groups\n\n\n\n\n\n\nHierarchy depth\n\n\nUnlimited\n\n\nMaximum 7\n\n\n\n\n\n\nAttributes\n\n\nUnlimited attributes managed via a template, supporting string, number, and boolean types.  Key and value unlimited length.\n\n\nNo templates, maximum 50, string types only.  Maximum 128 characters key, and maximum 800 characters value\n\n\n\n\n\n\nValues\n\n\nNo limits\n\n\nAlphanumeric characters plus \n_.,@/:#-\n allowed only (no spaces)\n\n\n\n\n\n\nRequired attributes\n\n\nSupported\n\n\nNot supported\n\n\n\n\n\n\nDefining relationship names for linked groups\n\n\nSupported\n\n\nNot supported\n\n\n\n\n\n\n\n\nGroup Templates\n\n\nNot supported in \nlite\n mode.\n\n\nPolicies\n\n\nNot supported in \nlite\n mode.\n\n\nDevice Profiles\n\n\nNot supported in \nlite\n mode.\n\n\nGroup Profiles\n\n\nNot supported in \nlite\n mode.\n\n\nSearch\n\n\n\n\n\n\n\n\nDescription\n\n\nfull\n mode\n\n\nlite\n mode\n\n\n\n\n\n\n\n\n\n\nNo. query terms\n\n\nMaximum 2048 characters\n\n\nMaximum 2048 characters, and maximum 5 query terms per query\n\n\n\n\n\n\nNo. results\n\n\nUnlimited\n\n\nMaximm 500 per query\n\n\n\n\n\n\nAggregation\n\n\nSupported\n\n\nNot supported\n\n\n\n\n\n\nSearching by group ancestors\n\n\nSupported\n\n\nSupports filtering by direct linked groups only", 
            "title": "ASSET LIBRARY MODES"
        }, 
        {
            "location": "/projects/assetlibrary/modes/#asset-library-modes", 
            "text": "", 
            "title": "ASSET LIBRARY MODES"
        }, 
        {
            "location": "/projects/assetlibrary/modes/#introduction", 
            "text": "The Asset Library is capable of running in one of two modes:   full  and  lite .  The  lite  version uses The AWS IoT Device Registry to store all devices and groups data, whereas the  full  version utilizes AWS Neptune to augment the AWS IoT Device Registry to provide more advanced data modelling features.  The mode is determined via a comfiguration property that is to be provided at the time of deployment.  The following describes the differences in functionality between the two modes.", 
            "title": "Introduction"
        }, 
        {
            "location": "/projects/assetlibrary/modes/#supported-functionality-by-rest-api", 
            "text": "The following table indicates which REST API's are available in which mode:", 
            "title": "Supported Functionality by REST API"
        }, 
        {
            "location": "/projects/assetlibrary/modes/#devices", 
            "text": "Endpoint  Description  full  mode  lite  mode      POST /devices  Adds a new device to the Asset Library  \u2705 (adding to a default parent group if none provided)  \u2705 (creating components not supported, and no default parent group set if none provided)    POST /bulkdevices  Adds a batch of devices to the Asset Library  \u2705  \u2705 (see  POST /devices )    PATCH /bulkdevices  Updates a batch of existing devices  \u2705  \u26d4    GET /devices/{deviceId}  Find a device by ID  \u2705  \u2705    DELETE /devices/{deviceId}  Delete a device  \u2705  \u2705    PATCH /devices/{deviceId}  Performs a partial update of an existing device  \u2705  \u2705 (supports optimistic locking by providing an optional  expectedVersion .  If not provided, the latest version of the device will be updated)    PUT /devices/{deviceId}/{relationship}/groups/{groupPath}  Associates a device to a a group, giving context to its relationship  \u2705  \u2705 (does not support providing context to the relationship - only supported value for  relatiobship  is  group )    DELETE /devices/{deviceId}/{relationship}/groups/{groupPath}  Removes a device from an associated group  \u2705  \u2705 (only supported value for  relationship  is  group )    PUT /devices/{deviceId}/{relationship}/devices/{otherDeviceId}  Associates a device to another device, giving context to its relationship  \u2705  \u26d4    DELETE /devices/{deviceId}/{relationship}/devices/{otherDeviceId}  Removes a device from an associated device  \u2705  \u26d4    POST /devices/{deviceId}/components  Creates a new component and adds to the device  \u2705  \u26d4    PATCH /devices/{deviceId}/components/{componentId}  Updates the component of a device  \u2705  \u26d4    DELETE /devices/{deviceId}/components/{componentId}  Deletes a component of a device  \u2705  \u26d4", 
            "title": "Devices"
        }, 
        {
            "location": "/projects/assetlibrary/modes/#groups", 
            "text": "Endpoint  Description  full  mode  lite  mode      POST /groups  Adds a new group to the device library as a child of the  parentPath  as specified in the request body  \u2705  \u2705 (specifying a parent is optional, specifying a template is not supported, and linking groups to other groups not supported)    POST /bulkgroups  Adds a batch of new group to the asset library as a child of the  parentPath  as specified in the request body  \u2705  \u2705 (see  POST /groups )    GET /groups/{groupPath}  Find group by Group's path  \u2705  \u2705    DELETE /groups/{groupPath}  Delete group with supplied path  \u2705  \u2705    PATCH /groups/{groupPath}  Update an existing group's attributes, including changing its parent group  \u2705  \u2705 (see  POST /groups )    GET /groups/{groupPath}/members/devices  List device members of group for supplied Group name  \u2705  \u2705 (filtering by template or state not supported)    GET /groups/{groupPath}/members/groups  List group members of group for supplied Group name  \u2705  \u2705 (filtering by template not supported)    GET /groups/{groupPath}/memberships  List all ancestor groups of a specific group  \u2705  \u2705    PUT /groups/{sourceGroupPath}/{relationship}/groups/{targetGroupPath}  Associates a group with another group, giving context to its relationship  \u2705  \u26d4    DELETE /groups/{sourceGroupPath}/{relationship}/groups/{targetGroupPath}  Removes a group from an associated group  \u2705  \u26d4", 
            "title": "Groups"
        }, 
        {
            "location": "/projects/assetlibrary/modes/#device-templates", 
            "text": "Endpoint  Description  full  mode  lite  mode      POST /templates/devices/{templateId}  Registers a new device template within the system, using the JSON Schema standard to define the device template attributes and constraints  \u2705  \u2705 (string types supported only, defining allowed relations to other group types not supported, and required attributes not supported)    GET /templates/devices/{templateId}  Find device template by ID  \u2705  \u2705    PATCH /templates/devices/{templateId}  Update an existing device template  \u2705  \u2705 (see  POST /templates/devices/{templateId} )    DELETE /templates/devices/{templateId}  Deletes an existing device template  \u2705  \u2705 (deleting a template will deprecate the Thing Type, not delete it)    PUT /templates/devices/{templateId}/publish  Publishes an existing device template  \u2705  \u26d4", 
            "title": "Device Templates"
        }, 
        {
            "location": "/projects/assetlibrary/modes/#group-templates", 
            "text": "Endpoint  Description  full  mode  lite  mode      POST /templates/groups/{templateId}  Registers a new group template within the system, using the JSON Schema standard to define the group template attributes and constraints  \u2705  \u26d4    GET /templates/groups/{templateId}  Find group template by ID  \u2705  \u26d4    PATCH /templates/groups/{templateId}  Update an existing group template  \u2705  \u26d4    DELETE /templates/groups/{templateId}  Deletes an existing group template  \u2705  \u26d4    PUT /templates/groups/{templateId}/publish  Publishes an existing group template  \u2705  \u26d4", 
            "title": "Group Templates"
        }, 
        {
            "location": "/projects/assetlibrary/modes/#device-profiles", 
            "text": "Endpoint  Description  full  mode  lite  mode      POST /profiles/device/{templateId}  Adds a new device profile for a specific template  \u2705  \u26d4    GET /profiles/device/{templateId}  Return all device profiles for a specific template  \u2705  \u26d4    GET /profiles/device/{templateId}/{profileId}  Retrieve a device profile  \u2705  \u26d4    DELETE /profiles/device/{templateId}/{profileId}  Delete a specific device profile  \u2705  \u26d4    PATCH /profiles/device/{templateId}/{profileId}  Update an existing device profile  \u2705  \u26d4", 
            "title": "Device Profiles"
        }, 
        {
            "location": "/projects/assetlibrary/modes/#group-profiles", 
            "text": "Endpoint  Description  full  mode  lite  mode      POST /profiles/group/{templateId}  Adds a new group profile for a specific template  \u2705  \u26d4    GET /profiles/group/{templateId}  Return all group profiles for a specific template  \u2705  \u26d4    GET /profiles/group/{templateId}/{profileId}  Retrieve a group profile  \u2705  \u26d4    DELETE /profiles/group/{templateId}/{profileId}  Delete a specific group profile  \u2705  \u26d4    PATCH /profiles/group/{templateId}/{profileId}  Update an existing group profile  \u2705  \u26d4", 
            "title": "Group Profiles"
        }, 
        {
            "location": "/projects/assetlibrary/modes/#policies", 
            "text": "Endpoint  Description  full  mode  lite  mode      POST /policies  Creates a new  Policy , and applies it to the provided  Groups  \u2705  \u26d4    GET /policies  List policies, optionally filtered by policy type  \u2705  \u26d4    GET /policies/inherited  Returns all inherited  Policies  for a  Device  or set of  Groups  where the  Device / Groups  are associated with all the hierarchies that the  Policy  applies to. Either  deviceId  or  groupPath  must be provided  \u2705  \u26d4    PATCH /policies/{policyId}  Update the attributes of an existing policy  \u2705  \u26d4    DELETE /policies/{policyId}  Delete an existing policy  \u2705  \u26d4    GET /policies/{policyId}  Retrieve a specific policy  \u2705  \u26d4", 
            "title": "Policies"
        }, 
        {
            "location": "/projects/assetlibrary/modes/#search", 
            "text": "Endpoint  Description  full  mode  lite  mode      GET /search  Search for groups and devices  \u2705  \u2705", 
            "title": "Search"
        }, 
        {
            "location": "/projects/assetlibrary/modes/#supported-functionality-by-area", 
            "text": "The following table describes the differences in functionality between the  full  and  lite  modes by area:", 
            "title": "Supported Functionality by Area"
        }, 
        {
            "location": "/projects/assetlibrary/modes/#devices_1", 
            "text": "Description  full  mode  lite  mode      Attributes  Unlimited attributes managed via a template, supporting string, number, and boolean types.  Key and value unlimited length.  No templates, maximum 50, string types only.  Maximum 128 characters key, and maximum 800 characters value    Values  No limits  Alphanumeric characters plus  _.,@/:#-  allowed only (no spaces)    Required attributes  Supported  Not supported    Device components  Supported  Not supported    Defining relationship names for linked groups  Supported  Not supported    Linking devices to other devices  Supported  Not supported", 
            "title": "Devices"
        }, 
        {
            "location": "/projects/assetlibrary/modes/#device-templates_1", 
            "text": "Description  full  mode  lite  mode      Attributes  Unlimited attributes, supporting string, number, and boolean types.  Key and bvalue unlimited length.  Maximum 3 attribtues per Thing Type    Updating device templates  Supported  Not supported    Required attributes  Supported  Not supported    Defining allowed relations to groups  Supported  Not supported    Defining allowed relations to devices  Supported  Not supported", 
            "title": "Device Templates"
        }, 
        {
            "location": "/projects/assetlibrary/modes/#groups_1", 
            "text": "Description  full  mode  lite  mode      Membership  Devices can belong to unlimited groups  Devices can belong to a maximum of 10 groups, and cannot be added to more than 1 group within the same hierarchy    Members  No limits  A group may not contain ore than 100 direct child groups    Hierarchy depth  Unlimited  Maximum 7    Attributes  Unlimited attributes managed via a template, supporting string, number, and boolean types.  Key and value unlimited length.  No templates, maximum 50, string types only.  Maximum 128 characters key, and maximum 800 characters value    Values  No limits  Alphanumeric characters plus  _.,@/:#-  allowed only (no spaces)    Required attributes  Supported  Not supported    Defining relationship names for linked groups  Supported  Not supported", 
            "title": "Groups"
        }, 
        {
            "location": "/projects/assetlibrary/modes/#group-templates_1", 
            "text": "Not supported in  lite  mode.", 
            "title": "Group Templates"
        }, 
        {
            "location": "/projects/assetlibrary/modes/#policies_1", 
            "text": "Not supported in  lite  mode.", 
            "title": "Policies"
        }, 
        {
            "location": "/projects/assetlibrary/modes/#device-profiles_1", 
            "text": "Not supported in  lite  mode.", 
            "title": "Device Profiles"
        }, 
        {
            "location": "/projects/assetlibrary/modes/#group-profiles_1", 
            "text": "Not supported in  lite  mode.", 
            "title": "Group Profiles"
        }, 
        {
            "location": "/projects/assetlibrary/modes/#search_1", 
            "text": "Description  full  mode  lite  mode      No. query terms  Maximum 2048 characters  Maximum 2048 characters, and maximum 5 query terms per query    No. results  Unlimited  Maximm 500 per query    Aggregation  Supported  Not supported    Searching by group ancestors  Supported  Supports filtering by direct linked groups only", 
            "title": "Search"
        }, 
        {
            "location": "/projects/assetlibrary/overview/", 
            "text": "ASSET LIBRARY OVERVIEW\n\n\nIntroduction\n\n\nThe Asset Library service is a device registry that allows one to manage their fleet of devices placed within multiple hierarchical groups.  Each group within a hierarchy can represent something meaningful to your business such as location, device types, firmware versions, etc.\n\n\nGroups\n\n\nThe hierarchies within Asset Library are represented as Groups.  Each Group has a single parent, but can comprise of many groups and/or devices as its children.\n\n\nEach Group has the following fixed attributes: \n\n\n\n\ngroupPath\n : a unique identifier of a group, including all its parent groups within the hierarchy\n\n\ntemplateId\n : a schema that defines the allowed properties and relations for the group\n\n\nname\n : the name of the group (used along with the \nparentPath\n to define the \ngroupPath\n\n\nparentPath\n : the path of the group's immediate parent\n\n\ndescription\n : a description of the group\n\n\n\n\nGroups can be related to other groups via their \nrelations\n attribute, which includes the type of the relationship along with an array of linked group paths.\n\n\nDifferent Group Templates can be created to align with ones business, with each Group Template augmenting the above list of fixed attributes with its own attributes, as well as specifiying which group to group and group to device relations are allowed.  An example Group Template could be a \nSite\n, with its \naddress\n being an attribute, and a \nlocated_at\n relationship to a Group Template representing a physical location as follows:\n\n\nFor more information regardng configuring templates, refer to \nTemplates\n.\n\n\nSample Group Template\nThe following sample represents the template for the group \nMyCustomGroup\n, which comprises of 2 attribute:  \ncolor\n (required) and \nsize\n (optional), and an allowed relation to the \nMyOtherGroup\n group.\n\n{\n    \nname\n: \nmycustomgroup\n,\n    \nproperties\n: {\n        \ncolor\n: {\ntype\n: \nstring\n},\n        \nsize\n: {\ntype\n: \nnumber\n}\n    },\n    \nrelations\n: {\n        \nout\n: {\n            \nlocated_at\n: [\n                \nmyothergroup\n\n            ]\n        }\n    },\n    \nrequired\n: [\ncolor\n]\n}\n\n\n\n\n\nSample Group\nThe following sample represents an instance of a Group of the above template \nMyCustomGroup\n:\n\n{\n    \ntemplateId\n: \nmycustomgroup\n,\n    \nparentPath\n: \n/parent1\n,\n    \nname\n: \ngroup1\n,\n\n    \ngroups\n: {\n        \nlocated_at\n: [\n/anotherhierarchy/group2\n]\n    },\n\n    \nattributes\n: {\n        \ncolor\n: \nBlack\n,\n        \nsize\n: 3\n    }\n}\n\n\n\n\n\nDevices\n\n\nLikewise, Device Templates can be created to represent the different types of devices within your fleet, each with their own attributes.\n\n\nDevices can be associated with any number of groups via their Template definitions.\n\n\nDevice can also be associated with other devices, either by specfying a device as a component of another device, or defining a custom relationship between devices via its template.  A device component cannot exist in isolation.\n\n\nA Device Template has the same format as a Group Template with the addition of a \ncomponents\n attribute.\n\n\nEach Device has the following fixed attributes:  \ndeviceId\n, \ntemplateId\n, \ndescription\n, \nawsIotThingArn\n, \nimageUrl\n, \nconnected\n and \nstate\n.\n\n\nFor more information regardng configuring templates, refer to \nTemplates\n.\n\n\nSample Device Template\nThe following sample represents the template for the device \nSensor\n, which comprises of 2 attribute:  \nfirmware\n (required) and \nversion\n (number), with an allowed relation to the \nMyCustomGroup\n group.\n\n{\n    \nname\n: \nsensor\n,\n    \nproperties\n: {\n        \nfirmware\n: {\ntype\n: \nstring\n},\n        \nversion\n: {\ntype\n: \nnumber\n}\n    },\n    \nrelations\n: {\n        \nout\n: {\n            \ninstalled_at\n: [\n                \nmycustomgroup\n\n            ]\n        }\n    },\n    \nrequired\n: [\nfirmware\n]\n}\n\n\n\n\n\nSample Device\nThe following sample represents an instance of a Device of the above template \nSensor\n:\n\n{\n    \ndeviceId\n: \nsensor001\n,\n    \ntemplateId\n: \nsensor\n,\n    \ngroups\n: {\n        \ninstalled_at\n: [\n/parent1/group1\n]\n    },\n    \nattributes\n: {\n        \nfirmware\n: \nF001\n,\n        \nversion\n: 341\n    }\n}\n\n\n\n\n\nPolicies\n\n\nA Policy represents an object that can be associated with any number of hierarchies, and is then inherited by devices that are also associated with all the same hierarchies that the policy applies to.  An example of policies could be around definining how to provision a device by specifying which provisining templates to use as follows:\n\n\nScenario 1\n\n\nA hierarchy represents a location.  A default permissive policy is applied to group \n/location\n with a more restrictive policy applied to \n/location/china\n.\n\n\nGroups:\n\n\n\n\n/location/usa/colorado/denver/factory1\n\n\n/location/china/northern/beijing/factory2\n\n\n\n\nPolicies:\n\n\n\n\npolicy_permissive\n associated with \n/location\n\n\npolicy_restrictive\n associated with \n/location/china\n\n\n\n\nDevices:\n\n\n\n\ndevice001\n associated with group \n/location/usa/colorado/denver/factory1\n\n\ndevice002\n associated with group \n/location/china/northern/beijing/factory2\n\n\n\n\nIn the example above, retrieving the list of policies for \ndevice001\n would return \npolicy_permissive\n, whereas retrieiving the policy list for \ndevice002\n will be the chain \npolicy_restrictive\n then \npolicy_permissive\n, with the consuming application containing the business logic for which policy to use (e.g. use \npolicy_permissive\n as that's associated with the lowest level group \n/location/china\n).\n\n\nScenario 2\n\n\nHierarchies represent location and supplier.  A default permissive policy is applied to group \n/location\n and \n/supplier\n with a more restrictive policies applied to combinations of \n/location/china\n and \n/supplier/supplier2\n.\n\n\nGroups:\n\n\n\n\n/location/usa/colorado/denver\n\n\n/location/china/northern/beijing\n\n\n/supplier/supplier1\n\n\n/supplier/supplier2\n\n\n\n\nPolicies:\n\n\n\n\npolicy_permissive\n associated with \n/location\n\n\npolicy_restrictive\n associated with \n/location/china\n and \n/supplier/supplier2\n\n\n\n\nDevices:\n\n\n\n\ndevice001\n associated with groups \n/location/usa/colorado/denver\n and \n/supplier/supplier1\n\n\ndevice002\n associated with groups \n/location/china/northern/denver\n and \n/supplier/supplier2\n\n\ndevice003\n associated with groups \n/location/china/northern/beijing\n and \n/supplier/supplier1\n\n\ndevice004\n associated with groups \n/location/china/northern/beijing\n and \n/supplier/supplier2\n\n\n\n\nIn the example above, retrieving the list of policies for \ndevice001\n, \ndevice002\n and \ndevice003\n would return \npolicy_permissive\n, whereas retrieiving the policy list for \ndevice004\n will be the chain \npolicy_restrictive\n then \npolicy_permissive\n, with the consuming application containing the business logic for which policy to use.\n\n\nLimits\n\n\nThe following are the \ndefault\n limits for the Asset Library (per region):\n\n\n\n\n\n\n\n\nResource or Operation\n\n\nLimit\n\n\n\n\n\n\n\n\n\n\nNo. Group/Device types\n\n\n30\n\n\n\n\n\n\nNo. attributes per Group/Device type\n\n\n1000\n\n\n\n\n\n\nNo. required attributes per Group.Device\n\n\n30\n\n\n\n\n\n\nNo. unique indexes per Group/Device\n\n\n3\n\n\n\n\n\n\nNo. non-unique indexes per Group/Device\n\n\nunlimited\n\n\n\n\n\n\nNo. Group levels deep\n\n\n15\n\n\n\n\n\n\n\n\nPerform the following steps to increase your limit for a region:\n\n\n\n\nGo to the \nAWS Support Center\n page, sign in, if necessary, and click Open a new case.\n\n\nUnder Regarding, select Service Limit Increase.\n\n\nUnder Limit Type, select AWS Directory Service.\n\n\nFill in all of the necessary fields in the form and click the button at the bottom of the page for your desired method of contact.", 
            "title": "ASSET LIBRARY OVERVIEW"
        }, 
        {
            "location": "/projects/assetlibrary/overview/#asset-library-overview", 
            "text": "", 
            "title": "ASSET LIBRARY OVERVIEW"
        }, 
        {
            "location": "/projects/assetlibrary/overview/#introduction", 
            "text": "The Asset Library service is a device registry that allows one to manage their fleet of devices placed within multiple hierarchical groups.  Each group within a hierarchy can represent something meaningful to your business such as location, device types, firmware versions, etc.", 
            "title": "Introduction"
        }, 
        {
            "location": "/projects/assetlibrary/overview/#groups", 
            "text": "The hierarchies within Asset Library are represented as Groups.  Each Group has a single parent, but can comprise of many groups and/or devices as its children.  Each Group has the following fixed attributes:    groupPath  : a unique identifier of a group, including all its parent groups within the hierarchy  templateId  : a schema that defines the allowed properties and relations for the group  name  : the name of the group (used along with the  parentPath  to define the  groupPath  parentPath  : the path of the group's immediate parent  description  : a description of the group   Groups can be related to other groups via their  relations  attribute, which includes the type of the relationship along with an array of linked group paths.  Different Group Templates can be created to align with ones business, with each Group Template augmenting the above list of fixed attributes with its own attributes, as well as specifiying which group to group and group to device relations are allowed.  An example Group Template could be a  Site , with its  address  being an attribute, and a  located_at  relationship to a Group Template representing a physical location as follows:  For more information regardng configuring templates, refer to  Templates .  Sample Group Template The following sample represents the template for the group  MyCustomGroup , which comprises of 2 attribute:   color  (required) and  size  (optional), and an allowed relation to the  MyOtherGroup  group. {\n     name :  mycustomgroup ,\n     properties : {\n         color : { type :  string },\n         size : { type :  number }\n    },\n     relations : {\n         out : {\n             located_at : [\n                 myothergroup \n            ]\n        }\n    },\n     required : [ color ]\n}   Sample Group The following sample represents an instance of a Group of the above template  MyCustomGroup : {\n     templateId :  mycustomgroup ,\n     parentPath :  /parent1 ,\n     name :  group1 ,\n\n     groups : {\n         located_at : [ /anotherhierarchy/group2 ]\n    },\n\n     attributes : {\n         color :  Black ,\n         size : 3\n    }\n}", 
            "title": "Groups"
        }, 
        {
            "location": "/projects/assetlibrary/overview/#devices", 
            "text": "Likewise, Device Templates can be created to represent the different types of devices within your fleet, each with their own attributes.  Devices can be associated with any number of groups via their Template definitions.  Device can also be associated with other devices, either by specfying a device as a component of another device, or defining a custom relationship between devices via its template.  A device component cannot exist in isolation.  A Device Template has the same format as a Group Template with the addition of a  components  attribute.  Each Device has the following fixed attributes:   deviceId ,  templateId ,  description ,  awsIotThingArn ,  imageUrl ,  connected  and  state .  For more information regardng configuring templates, refer to  Templates .  Sample Device Template The following sample represents the template for the device  Sensor , which comprises of 2 attribute:   firmware  (required) and  version  (number), with an allowed relation to the  MyCustomGroup  group. {\n     name :  sensor ,\n     properties : {\n         firmware : { type :  string },\n         version : { type :  number }\n    },\n     relations : {\n         out : {\n             installed_at : [\n                 mycustomgroup \n            ]\n        }\n    },\n     required : [ firmware ]\n}   Sample Device The following sample represents an instance of a Device of the above template  Sensor : {\n     deviceId :  sensor001 ,\n     templateId :  sensor ,\n     groups : {\n         installed_at : [ /parent1/group1 ]\n    },\n     attributes : {\n         firmware :  F001 ,\n         version : 341\n    }\n}", 
            "title": "Devices"
        }, 
        {
            "location": "/projects/assetlibrary/overview/#policies", 
            "text": "A Policy represents an object that can be associated with any number of hierarchies, and is then inherited by devices that are also associated with all the same hierarchies that the policy applies to.  An example of policies could be around definining how to provision a device by specifying which provisining templates to use as follows:  Scenario 1  A hierarchy represents a location.  A default permissive policy is applied to group  /location  with a more restrictive policy applied to  /location/china .  Groups:   /location/usa/colorado/denver/factory1  /location/china/northern/beijing/factory2   Policies:   policy_permissive  associated with  /location  policy_restrictive  associated with  /location/china   Devices:   device001  associated with group  /location/usa/colorado/denver/factory1  device002  associated with group  /location/china/northern/beijing/factory2   In the example above, retrieving the list of policies for  device001  would return  policy_permissive , whereas retrieiving the policy list for  device002  will be the chain  policy_restrictive  then  policy_permissive , with the consuming application containing the business logic for which policy to use (e.g. use  policy_permissive  as that's associated with the lowest level group  /location/china ).  Scenario 2  Hierarchies represent location and supplier.  A default permissive policy is applied to group  /location  and  /supplier  with a more restrictive policies applied to combinations of  /location/china  and  /supplier/supplier2 .  Groups:   /location/usa/colorado/denver  /location/china/northern/beijing  /supplier/supplier1  /supplier/supplier2   Policies:   policy_permissive  associated with  /location  policy_restrictive  associated with  /location/china  and  /supplier/supplier2   Devices:   device001  associated with groups  /location/usa/colorado/denver  and  /supplier/supplier1  device002  associated with groups  /location/china/northern/denver  and  /supplier/supplier2  device003  associated with groups  /location/china/northern/beijing  and  /supplier/supplier1  device004  associated with groups  /location/china/northern/beijing  and  /supplier/supplier2   In the example above, retrieving the list of policies for  device001 ,  device002  and  device003  would return  policy_permissive , whereas retrieiving the policy list for  device004  will be the chain  policy_restrictive  then  policy_permissive , with the consuming application containing the business logic for which policy to use.", 
            "title": "Policies"
        }, 
        {
            "location": "/projects/assetlibrary/overview/#limits", 
            "text": "The following are the  default  limits for the Asset Library (per region):     Resource or Operation  Limit      No. Group/Device types  30    No. attributes per Group/Device type  1000    No. required attributes per Group.Device  30    No. unique indexes per Group/Device  3    No. non-unique indexes per Group/Device  unlimited    No. Group levels deep  15     Perform the following steps to increase your limit for a region:   Go to the  AWS Support Center  page, sign in, if necessary, and click Open a new case.  Under Regarding, select Service Limit Increase.  Under Limit Type, select AWS Directory Service.  Fill in all of the necessary fields in the form and click the button at the bottom of the page for your desired method of contact.", 
            "title": "Limits"
        }, 
        {
            "location": "/projects/assetlibrary/profiles/", 
            "text": "ASSET LIBRARY:  Profiles\n\n\nIntroduction\n\n\nA \nprofile\n represents a set of default values and/or relations that may be applied to an instance of a specific device/group.\n\n\nManaging Profiles\n\n\nThe following endpoints are provided to manage profiles:\n\n\n\n\n\n\n\n\nEndpoint\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nPOST /profiles/[device|group]/{template}\n\n\nCreates a new profile\n\n\n\n\n\n\nPATCH /profiles/[device|group]/{template}/{name}\n\n\nUpdates an existing profile\n\n\n\n\n\n\nGET /profiles/[device|group]/{template}/{name}\n\n\nRetrieves a specific profile\n\n\n\n\n\n\nDELETE /profiles/[device|group]/{template}/{name}\n\n\nDeletes a specific profile\n\n\n\n\n\n\nGET /profiles/[device|group]/{template}\n\n\nReturns all profiles of a given template\n\n\n\n\n\n\n\n\nAn example of a device profile resource:\n\n\n{\n\n    \nprofileId\n:\n \nsimple\n,\n\n    \ntemplateId\n:\n \nedge\n,\n\n    \ngroups\n:\n \n{\n\n        \nmanufactured_by\n:\n \n[\n/supplier/sup123\n]\n\n    \n},\n\n    \nattributes\n:\n \n{\n\n        \nfirmware\n:\n \nF001\n,\n\n        \nstatus\n:\n \nunregistered\n\n    \n}\n\n\n}\n\n\n\n\n\nAn example of a group profile resource:\n\n\n{\n\n    \nprofileId\n:\n \nsimple\n,\n\n    \ntemplateId\n:\n \nengine\n,\n\n    \nparentPath\n:\n \n/engine\n,\n\n    \nattributes\n:\n \n{\n\n        \nlocation\n:\n \nwest\n\n    \n}\n\n\n}\n\n\n\n\n\nWhen creating/updating device/group profiles, their attributes/relations are validated against the schema of the provided template.\n\n\nApplying Profiles\n\n\nThe following endponts allow for applying profiles to a device/group by providing the \n?applyProfile\n query string parameter:\n\n\n\n\n\n\n\n\nEndpoint\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nPOST /devices?applyProfile=\n\n\nCreates a new device\n\n\n\n\n\n\nPATCH /devices/{deviceId}?applyProfile=\n\n\nUpdates an existing device\n\n\n\n\n\n\nPOST /bulkdevices?applyProfile=\n\n\nCreates a set of device\n\n\n\n\n\n\nPATCH /bulkdevices/{deviceId}?applyProfile=\n\n\nUpdates a set of existing device\n\n\n\n\n\n\nPOST /groups?applyProfile=\n\n\nCreates a new group\n\n\n\n\n\n\nPATCH /groups/{gorupPath}?applyProfile=\n\n\nUpdates an existing group\n\n\n\n\n\n\nPOST /bulkgroups?applyProfile=\n\n\nCreates a  new group\n\n\n\n\n\n\n\n\nIn the case of creating new devices/groups, when applying a profile the values of the profile are applied to the device/group first before applying any explicit provided attributes.\n\n\nIn the case of updating existing devices/groups, the same logic as above is applied with the exception that the attributes of the profile are only applied to the device/group whose attribute is not already set.  Profile relations, in contrast, are always applied by appending to the device/groups existing relations.\n\n\nOnce a profile has been applied, the attributes and relations of the merged device/group are validated against its template.\n\n\nDatabase Structure\n\n\nProfiles behave similar to device/group instances such that a vertex represents a profile of a given template, with attributes and relations conforming to the template.  The exception, what differs them from devices/groups, is that profiles have the label \nprofile\n allowing for inclusion/exclusion from queries as needed.", 
            "title": "ASSET LIBRARY:  Profiles"
        }, 
        {
            "location": "/projects/assetlibrary/profiles/#asset-library-profiles", 
            "text": "", 
            "title": "ASSET LIBRARY:  Profiles"
        }, 
        {
            "location": "/projects/assetlibrary/profiles/#introduction", 
            "text": "A  profile  represents a set of default values and/or relations that may be applied to an instance of a specific device/group.", 
            "title": "Introduction"
        }, 
        {
            "location": "/projects/assetlibrary/profiles/#managing-profiles", 
            "text": "The following endpoints are provided to manage profiles:     Endpoint  Description      POST /profiles/[device|group]/{template}  Creates a new profile    PATCH /profiles/[device|group]/{template}/{name}  Updates an existing profile    GET /profiles/[device|group]/{template}/{name}  Retrieves a specific profile    DELETE /profiles/[device|group]/{template}/{name}  Deletes a specific profile    GET /profiles/[device|group]/{template}  Returns all profiles of a given template     An example of a device profile resource:  { \n     profileId :   simple , \n     templateId :   edge , \n     groups :   { \n         manufactured_by :   [ /supplier/sup123 ] \n     }, \n     attributes :   { \n         firmware :   F001 , \n         status :   unregistered \n     }  }   An example of a group profile resource:  { \n     profileId :   simple , \n     templateId :   engine , \n     parentPath :   /engine , \n     attributes :   { \n         location :   west \n     }  }   When creating/updating device/group profiles, their attributes/relations are validated against the schema of the provided template.", 
            "title": "Managing Profiles"
        }, 
        {
            "location": "/projects/assetlibrary/profiles/#applying-profiles", 
            "text": "The following endponts allow for applying profiles to a device/group by providing the  ?applyProfile  query string parameter:     Endpoint  Description      POST /devices?applyProfile=  Creates a new device    PATCH /devices/{deviceId}?applyProfile=  Updates an existing device    POST /bulkdevices?applyProfile=  Creates a set of device    PATCH /bulkdevices/{deviceId}?applyProfile=  Updates a set of existing device    POST /groups?applyProfile=  Creates a new group    PATCH /groups/{gorupPath}?applyProfile=  Updates an existing group    POST /bulkgroups?applyProfile=  Creates a  new group     In the case of creating new devices/groups, when applying a profile the values of the profile are applied to the device/group first before applying any explicit provided attributes.  In the case of updating existing devices/groups, the same logic as above is applied with the exception that the attributes of the profile are only applied to the device/group whose attribute is not already set.  Profile relations, in contrast, are always applied by appending to the device/groups existing relations.  Once a profile has been applied, the attributes and relations of the merged device/group are validated against its template.", 
            "title": "Applying Profiles"
        }, 
        {
            "location": "/projects/assetlibrary/profiles/#database-structure", 
            "text": "Profiles behave similar to device/group instances such that a vertex represents a profile of a given template, with attributes and relations conforming to the template.  The exception, what differs them from devices/groups, is that profiles have the label  profile  allowing for inclusion/exclusion from queries as needed.", 
            "title": "Database Structure"
        }, 
        {
            "location": "/projects/assetlibrary/templates-developer/", 
            "text": "ASSET LIBRARY:  Templates (Developer)\n\n\nIntroduction\n\n\nThe following describes the implementation of the asset library templating.  Review the \nTemplates (User)\n page for details of how to use the templating features from a users point of view.\n\n\nSchema Validation\n\n\nJSON Schema (Draft 7)\n is being utilized to manage the validation of both the creation of the group/device templates, as well as instances of those templates.\n\n\nThere are 3 top-level categories of templates, each with their own JSON Schema:\n\n\n\n\nGroups (see \n/src/types/definitions/group.schema.json\n)\n\n\nDevices (see \n/src/types/definitions/device.schema.json\n)\n\n\nComponents (see \n/src/types/definitions/component.schema.json\n)\n\n\n\n\nWhen defining a custom type, the group/device template is validated against the JSON schema \n/src/types/definitions/specializedTypeDefinition.schema.json\n.\n\n\nWhen instances of a template are created/updated (e.g creating a new \nmote\n device) the top-level category JSON Schema (e.g. \ndevice\n) is merged with the schema definition of the custom template (e..g \nmote\n) in order to provide a template specific JSON schema to validate the group/device.\n\n\nWhen a device has been configured to allow components, an extra step is taken in the validation.  In addition to the custom template schema being merged with the device JSON Schema, the JSON Schema for each allowed component type is merged with it also, thus allowing for the validation of the creation of the device and its components in one step.\n\n\nDomain Model\n\n\nThe template information exposed via the API's is modelled as follows:\n\n\n\n\nThe data is stored in the database as follows:\n\n\nData Layer\n\n\nTemplates have a life cycle of \ndraft\n to \npublished\n, along with versioning included.  \n\n\nTypes are defined as a vertex labelled \ntype\n, with their corresponding versioned definitions defined as vertices labelled \ntypeDefintion\n.  There can be only two current definitions of a type:  \ndraft\n and \npublished\n, each associated to the type via a \ncurrent_definition\n edge.  Any old defintions are associated via an \nexpired_definition\n edge.\n\n\nThe life cycle of a group/device template as far as the database is concerned is as follows:\n\n\nStep 1:  A new template has been created\n\n\n\n\nA new \ntype\n vertex is created, and associated to the top level category via a \nsuper_type\n edge.  A new \ntype_definition\n vertex is created, and associated to the \ntype\n via a \ncurrent_definition\n edge.  The \ncurrent_definition\n edge has a status of \ndraft\n.\n\n\nStep 2:  A template has been published\n\n\n\n\nThe \nstatus\n of the \ncurrent_definition\n is updated from \ndraft\n to \npublished\n.\n\n\nStep 3:  A template is edited\n\n\n\n\nA new \ntypeDefinition\n vertex is created and associated to the \ntype\n vertex via a new \ncurrent_definition\n edge.  The \ncurrent_definition\n edge has a \nstatus\n of \ndraft\n.\n\n\nStep 4:  An edited template is published\n\n\n\n\nThe existing \ncurrent_definition\n edge that had a \nstatus\n of \npublished\n is deleted and replaced with a new \nexpired_definition\n edge.\n\n\nThe existing \ncurrent_definition\n edge that has a \nstatus\n of \ndraft\n is updated to a \nstatus\n of \npublished\n.\n\n\nStep 5:  A template is edited again\n\n\n\n\nA new \ntypeDefinition\n vertex is created and associated to the \ntype\n vertex via a new \ncurrent_definition\n edge.  The \ncurrent_definition\n edge has a \nstatus\n of \ndraft\n.\n\n\nStep 6 onwards...\n\n\nThe cycle is repeated.\n\n\nDeclared relations between templates\n\n\nWhen a template is declared with relations to other templates (e.g. a \nmote\n device can only be associated to a \nsite\n group via an \nlocated_at\n relationship), this relationship is defined on the type related vertices as follows:\n\n\n\n\nA new \nrelationship\n edge is added between the source and target templates.  This allows for fast and efficient validation of relationships at the database level.\n\n\nExample queries\n\n\nRetrieving the draft version of a template, including its defined relations:\n\n\ng\n.\nV\n(\ntype___mote\n).\nas\n(\ntype\n).\n\n    \noutE\n(\ncurrent_definition\n).\nhas\n(\nstatus\n,\n \ndraft\n).\ninV\n().\nas\n(\ndefinition\n).\n\n    \nproject\n(\ntype\n,\ndefinition\n,\nrelations\n).\n\n        \nby\n(\n__\n.\nselect\n(\ntype\n).\nvalueMap\n(\ntrue\n)).\n\n        \nby\n(\n__\n.\nselect\n(\ndefinition\n).\nvalueMap\n(\ntrue\n).\nfold\n()).\n\n        \nby\n(\n__\n.\nbothE\n(\nrelationship\n).\nvalueMap\n(\ntrue\n).\nfold\n());", 
            "title": "ASSET LIBRARY:  Templates (Developer)"
        }, 
        {
            "location": "/projects/assetlibrary/templates-developer/#asset-library-templates-developer", 
            "text": "", 
            "title": "ASSET LIBRARY:  Templates (Developer)"
        }, 
        {
            "location": "/projects/assetlibrary/templates-developer/#introduction", 
            "text": "The following describes the implementation of the asset library templating.  Review the  Templates (User)  page for details of how to use the templating features from a users point of view.", 
            "title": "Introduction"
        }, 
        {
            "location": "/projects/assetlibrary/templates-developer/#schema-validation", 
            "text": "JSON Schema (Draft 7)  is being utilized to manage the validation of both the creation of the group/device templates, as well as instances of those templates.  There are 3 top-level categories of templates, each with their own JSON Schema:   Groups (see  /src/types/definitions/group.schema.json )  Devices (see  /src/types/definitions/device.schema.json )  Components (see  /src/types/definitions/component.schema.json )   When defining a custom type, the group/device template is validated against the JSON schema  /src/types/definitions/specializedTypeDefinition.schema.json .  When instances of a template are created/updated (e.g creating a new  mote  device) the top-level category JSON Schema (e.g.  device ) is merged with the schema definition of the custom template (e..g  mote ) in order to provide a template specific JSON schema to validate the group/device.  When a device has been configured to allow components, an extra step is taken in the validation.  In addition to the custom template schema being merged with the device JSON Schema, the JSON Schema for each allowed component type is merged with it also, thus allowing for the validation of the creation of the device and its components in one step.", 
            "title": "Schema Validation"
        }, 
        {
            "location": "/projects/assetlibrary/templates-developer/#domain-model", 
            "text": "The template information exposed via the API's is modelled as follows:   The data is stored in the database as follows:", 
            "title": "Domain Model"
        }, 
        {
            "location": "/projects/assetlibrary/templates-developer/#data-layer", 
            "text": "Templates have a life cycle of  draft  to  published , along with versioning included.    Types are defined as a vertex labelled  type , with their corresponding versioned definitions defined as vertices labelled  typeDefintion .  There can be only two current definitions of a type:   draft  and  published , each associated to the type via a  current_definition  edge.  Any old defintions are associated via an  expired_definition  edge.  The life cycle of a group/device template as far as the database is concerned is as follows:", 
            "title": "Data Layer"
        }, 
        {
            "location": "/projects/assetlibrary/templates-developer/#step-1-a-new-template-has-been-created", 
            "text": "A new  type  vertex is created, and associated to the top level category via a  super_type  edge.  A new  type_definition  vertex is created, and associated to the  type  via a  current_definition  edge.  The  current_definition  edge has a status of  draft .", 
            "title": "Step 1:  A new template has been created"
        }, 
        {
            "location": "/projects/assetlibrary/templates-developer/#step-2-a-template-has-been-published", 
            "text": "The  status  of the  current_definition  is updated from  draft  to  published .", 
            "title": "Step 2:  A template has been published"
        }, 
        {
            "location": "/projects/assetlibrary/templates-developer/#step-3-a-template-is-edited", 
            "text": "A new  typeDefinition  vertex is created and associated to the  type  vertex via a new  current_definition  edge.  The  current_definition  edge has a  status  of  draft .", 
            "title": "Step 3:  A template is edited"
        }, 
        {
            "location": "/projects/assetlibrary/templates-developer/#step-4-an-edited-template-is-published", 
            "text": "The existing  current_definition  edge that had a  status  of  published  is deleted and replaced with a new  expired_definition  edge.  The existing  current_definition  edge that has a  status  of  draft  is updated to a  status  of  published .", 
            "title": "Step 4:  An edited template is published"
        }, 
        {
            "location": "/projects/assetlibrary/templates-developer/#step-5-a-template-is-edited-again", 
            "text": "A new  typeDefinition  vertex is created and associated to the  type  vertex via a new  current_definition  edge.  The  current_definition  edge has a  status  of  draft .", 
            "title": "Step 5:  A template is edited again"
        }, 
        {
            "location": "/projects/assetlibrary/templates-developer/#step-6-onwards", 
            "text": "The cycle is repeated.", 
            "title": "Step 6 onwards..."
        }, 
        {
            "location": "/projects/assetlibrary/templates-developer/#declared-relations-between-templates", 
            "text": "When a template is declared with relations to other templates (e.g. a  mote  device can only be associated to a  site  group via an  located_at  relationship), this relationship is defined on the type related vertices as follows:   A new  relationship  edge is added between the source and target templates.  This allows for fast and efficient validation of relationships at the database level.", 
            "title": "Declared relations between templates"
        }, 
        {
            "location": "/projects/assetlibrary/templates-developer/#example-queries", 
            "text": "Retrieving the draft version of a template, including its defined relations:  g . V ( type___mote ). as ( type ). \n     outE ( current_definition ). has ( status ,   draft ). inV (). as ( definition ). \n     project ( type , definition , relations ). \n         by ( __ . select ( type ). valueMap ( true )). \n         by ( __ . select ( definition ). valueMap ( true ). fold ()). \n         by ( __ . bothE ( relationship ). valueMap ( true ). fold ());", 
            "title": "Example queries"
        }, 
        {
            "location": "/projects/assetlibrary/templates-user/", 
            "text": "ASSET LIBRARY:  Templates (User)\n\n\nIntroduction\n\n\nAll groups and devices created within the Asset Library must confirm to a template.  A template represents a custom group or device type, with a schema that defines the attributes it may contain, along with the allowed relations a group or device may have between each other.  \n\n\nIn addition, a device can be classified as a component which is a special type of device that can only exist when it is part of a larger device assembly.  A real world example could be a robotic arm that is represented as a Thing in AWS IoT, which itself is comprised of multiple sensors that are also represented as individual Things within AWS IoT.\n\n\nLifecycle\n\n\nWhen creating a new template for the first time, the template will have a status of \ndraft\n.  Only when the template is published (its status becomes \npublished\n) will the template be available for use.\n\n\nWhen updating an existing template, the \ndraft\n version will be updated if one exists.  If not, a new \ndraft\n version is created.  It is not possible to update \npublished\n schemas.  Instead, \ndraft\n versions must be published in order to release changes.\n\n\nGroup Templates\n\n\nGroup templates are defined using the following endpoints:\n\n\n\n\n\n\n\n\nEndpoint\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nPOST /templates/group/{templateId}\n\n\nCreates a new group template\n\n\n\n\n\n\nPATCH /templates/group/{templateId}\n\n\nUpdates an existing group template\n\n\n\n\n\n\nPUT /templates/group/{templateId}/publish\n\n\nPublishes a draft group template, making the template live\n\n\n\n\n\n\nGET /templates/group?status={draft|published}\n\n\nReturns a list of all group templates for the given status\n\n\n\n\n\n\nGET /templates/group/{templateId}?status={draft|published}\n\n\nReturns a specific version of a specific group template\n\n\n\n\n\n\nDELETE /templates/group/{templateId}?status={draft|published}\n\n\nDeletes a specific version of a specific group template\n\n\n\n\n\n\n\n\nAll group templates automatically inherit the following attributes:\n\n\n\n\ngroupPath\n : a unique identifier of a group, including all its parent groups within the hierarchy\n\n\ntemplateId\n : a schema that defines the allowed properties and relations for the group\n\n\nname\n : the name of the group (used along with the \nparentPath\n to define the \ngroupPath\n\n\nparentPath\n : the path of the group's immediate parent\n\n\ndescription\n : a description of the group\n\n\n\n\nAn example to define a custom group template \nsite\n with a single required attribute \naddress\n of type \nstring\n is as follows:\n\n\nPOST\n \n/templates/group/site\n\n\n\n{\n\n    \nproperties\n:\n \n{\n\n        \naddress\n:\n \n{\ntype\n:\n \nstring\n}\n\n    \n},\n\n    \nrequired\n:\n \n[\naddress\n]\n\n\n}\n\n\n\n\n\nWhen viewing/creating/updating a group, any custom properties defined for the template are accessible beneath the \nattributes\n key.  The example given above for adding \naddress\n as a property would be represented as the following:\n\n\n{\n\n    \ntemplateId\n:\n \nsite\n,\n\n    \nparentPath\n:\n \n/location\n,\n\n    \nname\n:\n \nManufacturing\n,\n\n\n    \nattributes\n:\n \n{\n\n        \naddress\n:\n \n123 Somewhere Street\n\n    \n}\n\n\n}\n\n\n\n\n\nDevice Templates\n\n\nGroup templates are defined using the following endpoints:\n\n\n\n\n\n\n\n\nEndpoint\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nPOST /templates/device/{templateId}\n\n\nCreates a new device template\n\n\n\n\n\n\nPATCH /templates/device/{templateId}\n\n\nUpdates an existing device template\n\n\n\n\n\n\nPUT /templates/device/{templateId}/publish\n\n\nPublishes a draft device template, making the template live\n\n\n\n\n\n\nGET /templates/device?status={draft|published}\n\n\nReturns a list of all device templates for the given status\n\n\n\n\n\n\nGET /templates/device/{templateId}?status={draft|published}\n\n\nReturns a specific version of a specific device template\n\n\n\n\n\n\nDELETE /templates/device/{templateId}?status={draft|published}\n\n\nDeletes a specific version of a specific device template\n\n\n\n\n\n\n\n\nAll device templates automatically inherit the following attributes:\n\n\n\n\ndeviceId\n : a unique identifier for the device\n\n\ntemplateId\n : a schema that defines the allowed properties and relations for the device\n\n\nname\n : the name of the device\n\n\ndescription\n : a description of the device\n\n\nimageUrl\n : URL of an image representation of the device\n\n\nawsIotThingArn\n : The Thing Arn representing the device, if registered within AWS IoT\n\n\nstatus\n : lifecycle status\n\n\n\n\nIn addition, the allowed relations between the device and group, along with types of components, may be defined for a device.\n\n\nThe following example describes how to create the device template \nmote\n with two attributes (one mandatory), is allowed to be associated with the group template \nsite\n by means of the relationship \nlocated_at\n, and allows for components to be added of the template \nsensor\n:\n\n\nPOST\n \n/templates/device/mote\n\n\n\n{\n\n    \nproperties\n:\n \n{\n\n        \nlength\n:\n \n{\ntype\n:\n \nnumber\n},\n\n        \nwidth\n:\n \n{\ntype\n:\n \nnumber\n}\n\n    \n},\n\n    \nrequired\n:\n \n[\nlength\n],\n\n    \nrelations\n:\n \n{\n\n        \nout\n:\n \n{\n\n            \nlocated_at\n:\n \n[\nsite\n]\n\n        \n}\n\n    \n},\n\n    \ncomponents\n:\n \n[\nsensor\n]\n\n\n}\n\n\n\n\n\nWhen viewing/creating/updating a device, any custom properties defined for the template are accessible beneath the \nattributes\n key.  The example given above for defining a template would be represented as the following:\n\n\n{\n\n    \ngroups\n:\n \n{\n\n        \nlocated_at\n:\n \n/location/manufacturing\n\n    \n},\n\n    \nattributes\n:\n \n{\n\n        \nlength\n:\n \n112\n,\n\n        \nwidth\n:\n \n22\n\n    \n},\n\n    \ncategory\n:\n \ndevice\n,\n\n    \ntemplateId\n:\n \nmyCustomDeviceType\n,\n\n    \ndeviceId\n:\n \ndevice-001\n,\n\n    \ncomponents\n:\n \n[\n \n]\n\n\n}\n\n\n\n\n\nDefining Properties\n\n\nBoth device and group templates support defining \nproperties\n, which represents a list of fields along with a type.  These properties are defined in the style of \nJSON Schema draft-07\n.\n\n\nTypes may be defined as \ninteger\n, \nnumber\n, \nstring\n or \nboolean\n.\n\n\nThe following represents the supported keywords for the different types:\n\n\nnumber / integer keywords\n\n\nA \nnumber\n represents a JSON style 64-bit double precision floating point number, following the international IEEE 754 standard.\n\n\nAn \ninteger\n represents a whole number.\n\n\nWhen defining a type as a \nnumber\n or \ninteger\n, the following additional keywords are supported:\n\n\n\n\n\n\n\n\nKeyword\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nminimum\n\n\nThe minimum allowed value, including this defined value.\n\n\n\n\n\n\nexclusiveMinimum\n\n\nThe minimum allowed value, excluding this defined value.\n\n\n\n\n\n\nmaximum\n\n\nThe maximum allowed value, including this defined value.\n\n\n\n\n\n\nexclusiveMaximum\n\n\nThe maximum allowed value, excluding this defined value.\n\n\n\n\n\n\nmultipleOf\n\n\nA valid value must be a multiple of this value.\n\n\n\n\n\n\n\n\nExamples:\n\n\n{\n\n    \nproperties\n:\n \n{\n\n        \nheight\n:\n \n{\n\n            \ntype\n:\n \ninteger\n,\n\n            \nminimum\n:\n \n5\n,\n\n            \nmaximum\n:\n \n50\n,\n\n            \nmultipleOf\n:\n \n5\n\n        \n}\n\n    \n}\n\n\n}\n\n\n\n\n\nstring keywords\n\n\nWhen defining a type as a \nstring\n, the following additional keywords are supported:\n\n\n\n\n\n\n\n\nKeyword\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmaxLength\n\n\nMaximum allowed length\n\n\n\n\n\n\nminLength\n\n\nMinimum allowed length\n\n\n\n\n\n\npattern\n\n\nA regular experssion to validate the value\n\n\n\n\n\n\nformat\n\n\nA pre-defined format.  Supported formats are \ndate\n, \ndate-time\n, \nuri\n, \nemail\n, \nhostname\n, \nipv4\n and \nipv6\n\n\n\n\n\n\n\n\nExamples:\n\n\n{\n\n    \nproperties\n:\n \n{\n\n        \ncode\n:\n \n{\n\n            \ntype\n:\n \nstring\n,\n\n            \nminLength\n:\n \n5\n,\n\n            \nmaxLength\n:\n \n20\n\n        \n},\n\n        \npayloadFormat\n:\n \n{\n\n            \ntype\n:\n \nstring\n,\n\n            \npattern\n:\n \n[abc]+\n\n        \n},\n\n        \ninstalledDate\n:\n \n{\n\n            \ntype\n:\n \nstring\n,\n\n            \nformat\n:\n \ndate\n\n        \n}\n\n    \n}\n\n\n}\n\n\n\n\n\nkeywords common to all types\n\n\nThe following keywords are supported by all types:\n\n\n\n\n\n\n\n\nKeyword\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nenum\n\n\nA list of allowed values (of any type)\n\n\n\n\n\n\n\n\nExamples:\n\n\n{\n\n    \nproperties\n:\n \n{\n\n        \ncolor\n:\n \n{\n\n            \ntype\n:\n \nstring\n,\n\n            \nenum\n:\n \n[\nred\n,\namber\n,\ngreen\n]\n\n        \n}\n\n    \n}\n\n\n}\n\n\n\n\n\nCompound keywords\n\n\nThe following keywords can be used together with other keywords to define more complex constraints:\n\n\n\n\n\n\n\n\nKeyword\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nnot\n\n\nThe data is valid if it is invalid according to this keyword\n\n\n\n\n\n\noneOf\n\n\nThe data is valid if it matches exactly one of the schemas as defined by this array\n\n\n\n\n\n\nanyOf\n\n\nThe data is valid if it matches one or more of the schemas as defined by this array\n\n\n\n\n\n\nallOf\n\n\nThe data is valid if it matches all of the schemas as defined by this array\n\n\n\n\n\n\n\n\nExamples:\n\n\n{\n\n    \nproperties\n:\n \n{\n\n        \nerrorCode\n:\n \n{\n\n            \nnot\n:\n \n{\n\n                \ntype\n:\n \nstring\n\n            \n}\n\n        \n},\n\n        \npcmCode\n:\n \n{\n\n            \noneOf\n:\n \n[\n\n                \n{\n \nmaximum\n:\n \n10\n \n},\n\n                \n{\n \ntype\n:\n \ninteger\n \n}\n\n            \n]\n\n        \n},\n\n        \npcmAction\n:\n \n{\n\n            \nanyOf\n:\n \n[\n\n                \n{\n \nminimum\n:\n \n1000\n \n},\n\n                \n{\n \ntype\n:\n \ninteger\n \n}\n\n            \n]\n\n        \n},\n\n        \ntimeInterval\n:\n \n{\n\n            \nallOf\n:\n \n[\n\n                \n{\n \nminimum\n:\n \n1000\n \n},\n\n                \n{\n \ntype\n:\n \ninteger\n \n}\n\n            \n]\n\n        \n}\n\n    \n}\n\n\n}\n\n\n\n\n\nDefining relations\n\n\nDevices may be associated with one or more groups.  These associations are created by defining the relationship type and target group type as part of the device template.\n\n\nAs an example, the following device template for a custom \nmote\n type will allow this type of device to be associated with the \nsite\n template via the \nlocated_at\n relationship:\n\n\n{\n\n    \nproperties\n:\n \n{\n\n        \ncode\n:\n \n{\ntype\n:\n \nstring\n}\n\n    \n},\n\n    \nrelations\n:\n \n{\n\n        \nout\n:\n \n{\n\n            \nlocated_at\n:\n \n[\nsite\n]\n\n        \n}\n\n    \n}\n\n\n}\n\n\n\n\n\nOnce a relationship has been defined on a device template, it will also be visible when viewing the corresponding group template.  To follow the same example, the template for the custom \nsite\n group will be returned as follows:\n\n\n{\n\n    \nproperties\n:\n \n{\n\n        \naddress\n:\n \n{\ntype\n:\n \nstring\n}\n\n    \n},\n\n    \nrelations\n:\n \n{\n\n        \nin\n:\n \n{\n\n            \nlocated_at\n:\n \n[\nmote\n]\n\n        \n}\n\n    \n}\n\n\n}\n\n\n\n\n\nOnce the relationship has been defined, the following endpoints may be utilized to create the relationships between different instances of those types:\n\n\n\n\n\n\n\n\nEndpoint\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nPUT /devices/{deviceId}/{relationship}/groups/{groupPath}\n\n\nAssociates a device to a group via a specific relationship\n\n\n\n\n\n\nDELETE /devices/{deviceId}/{relationship}/groups/{groupPath}\n\n\nRemoves a specific association between a device and group\n\n\n\n\n\n\n\n\nDefining Components\n\n\nDevices may contain other devices represented as components.  Components are a special classification of a device in which components cannot exist by themselves.  They must form part of an assembly which is represented as a parent device.\n\n\nTo allow a device to contain components, the type must be specified in the device template.  As an example, the following device template will allow components to be added of the \nsensor\n device template:\n\n\n{\n\n    \nproperties\n:\n \n{\n\n        \ncode\n:\n \n{\ntype\n:\n \nstring\n}\n\n    \n},\n\n    \ncomponents\n:\n \n[\nsensor\n]\n\n\n}\n\n\n\n\n\nOnce a component has been defined, the following endpoints may be used to manage components:\n\n\n\n\n\n\n\n\nEndpoint\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nPOST /devices\n\n\nWhen creating a new device, if the \ncomponents\n attribute has been provided in the body (representing a list of devices), each of these components will be created and associated with the parent device\n\n\n\n\n\n\nGET /devices/{deviceId}?expandComponents={true\\|false}\n\n\nIf \nexpandComponents\n is true, all components associated with the device will be returned\n\n\n\n\n\n\nPOST /devices/{deviceId}/components\n\n\nAdds a new component to an existing device\n\n\n\n\n\n\nPATCH /devices/{deviceId}/components/{componentId}\n\n\nUpdates an existing component of an existing device\n\n\n\n\n\n\nDELETE /devices/{deviceId}/components/{componentId}\n\n\nDeletes an existing component of an existing device", 
            "title": "ASSET LIBRARY:  Templates (User)"
        }, 
        {
            "location": "/projects/assetlibrary/templates-user/#asset-library-templates-user", 
            "text": "", 
            "title": "ASSET LIBRARY:  Templates (User)"
        }, 
        {
            "location": "/projects/assetlibrary/templates-user/#introduction", 
            "text": "All groups and devices created within the Asset Library must confirm to a template.  A template represents a custom group or device type, with a schema that defines the attributes it may contain, along with the allowed relations a group or device may have between each other.    In addition, a device can be classified as a component which is a special type of device that can only exist when it is part of a larger device assembly.  A real world example could be a robotic arm that is represented as a Thing in AWS IoT, which itself is comprised of multiple sensors that are also represented as individual Things within AWS IoT.", 
            "title": "Introduction"
        }, 
        {
            "location": "/projects/assetlibrary/templates-user/#lifecycle", 
            "text": "When creating a new template for the first time, the template will have a status of  draft .  Only when the template is published (its status becomes  published ) will the template be available for use.  When updating an existing template, the  draft  version will be updated if one exists.  If not, a new  draft  version is created.  It is not possible to update  published  schemas.  Instead,  draft  versions must be published in order to release changes.", 
            "title": "Lifecycle"
        }, 
        {
            "location": "/projects/assetlibrary/templates-user/#group-templates", 
            "text": "Group templates are defined using the following endpoints:     Endpoint  Description      POST /templates/group/{templateId}  Creates a new group template    PATCH /templates/group/{templateId}  Updates an existing group template    PUT /templates/group/{templateId}/publish  Publishes a draft group template, making the template live    GET /templates/group?status={draft|published}  Returns a list of all group templates for the given status    GET /templates/group/{templateId}?status={draft|published}  Returns a specific version of a specific group template    DELETE /templates/group/{templateId}?status={draft|published}  Deletes a specific version of a specific group template     All group templates automatically inherit the following attributes:   groupPath  : a unique identifier of a group, including all its parent groups within the hierarchy  templateId  : a schema that defines the allowed properties and relations for the group  name  : the name of the group (used along with the  parentPath  to define the  groupPath  parentPath  : the path of the group's immediate parent  description  : a description of the group   An example to define a custom group template  site  with a single required attribute  address  of type  string  is as follows:  POST   /templates/group/site  { \n     properties :   { \n         address :   { type :   string } \n     }, \n     required :   [ address ]  }   When viewing/creating/updating a group, any custom properties defined for the template are accessible beneath the  attributes  key.  The example given above for adding  address  as a property would be represented as the following:  { \n     templateId :   site , \n     parentPath :   /location , \n     name :   Manufacturing , \n\n     attributes :   { \n         address :   123 Somewhere Street \n     }  }", 
            "title": "Group Templates"
        }, 
        {
            "location": "/projects/assetlibrary/templates-user/#device-templates", 
            "text": "Group templates are defined using the following endpoints:     Endpoint  Description      POST /templates/device/{templateId}  Creates a new device template    PATCH /templates/device/{templateId}  Updates an existing device template    PUT /templates/device/{templateId}/publish  Publishes a draft device template, making the template live    GET /templates/device?status={draft|published}  Returns a list of all device templates for the given status    GET /templates/device/{templateId}?status={draft|published}  Returns a specific version of a specific device template    DELETE /templates/device/{templateId}?status={draft|published}  Deletes a specific version of a specific device template     All device templates automatically inherit the following attributes:   deviceId  : a unique identifier for the device  templateId  : a schema that defines the allowed properties and relations for the device  name  : the name of the device  description  : a description of the device  imageUrl  : URL of an image representation of the device  awsIotThingArn  : The Thing Arn representing the device, if registered within AWS IoT  status  : lifecycle status   In addition, the allowed relations between the device and group, along with types of components, may be defined for a device.  The following example describes how to create the device template  mote  with two attributes (one mandatory), is allowed to be associated with the group template  site  by means of the relationship  located_at , and allows for components to be added of the template  sensor :  POST   /templates/device/mote  { \n     properties :   { \n         length :   { type :   number }, \n         width :   { type :   number } \n     }, \n     required :   [ length ], \n     relations :   { \n         out :   { \n             located_at :   [ site ] \n         } \n     }, \n     components :   [ sensor ]  }   When viewing/creating/updating a device, any custom properties defined for the template are accessible beneath the  attributes  key.  The example given above for defining a template would be represented as the following:  { \n     groups :   { \n         located_at :   /location/manufacturing \n     }, \n     attributes :   { \n         length :   112 , \n         width :   22 \n     }, \n     category :   device , \n     templateId :   myCustomDeviceType , \n     deviceId :   device-001 , \n     components :   [   ]  }", 
            "title": "Device Templates"
        }, 
        {
            "location": "/projects/assetlibrary/templates-user/#defining-properties", 
            "text": "Both device and group templates support defining  properties , which represents a list of fields along with a type.  These properties are defined in the style of  JSON Schema draft-07 .  Types may be defined as  integer ,  number ,  string  or  boolean .  The following represents the supported keywords for the different types:", 
            "title": "Defining Properties"
        }, 
        {
            "location": "/projects/assetlibrary/templates-user/#number-integer-keywords", 
            "text": "A  number  represents a JSON style 64-bit double precision floating point number, following the international IEEE 754 standard.  An  integer  represents a whole number.  When defining a type as a  number  or  integer , the following additional keywords are supported:     Keyword  Description      minimum  The minimum allowed value, including this defined value.    exclusiveMinimum  The minimum allowed value, excluding this defined value.    maximum  The maximum allowed value, including this defined value.    exclusiveMaximum  The maximum allowed value, excluding this defined value.    multipleOf  A valid value must be a multiple of this value.     Examples:  { \n     properties :   { \n         height :   { \n             type :   integer , \n             minimum :   5 , \n             maximum :   50 , \n             multipleOf :   5 \n         } \n     }  }", 
            "title": "number / integer keywords"
        }, 
        {
            "location": "/projects/assetlibrary/templates-user/#string-keywords", 
            "text": "When defining a type as a  string , the following additional keywords are supported:     Keyword  Description      maxLength  Maximum allowed length    minLength  Minimum allowed length    pattern  A regular experssion to validate the value    format  A pre-defined format.  Supported formats are  date ,  date-time ,  uri ,  email ,  hostname ,  ipv4  and  ipv6     Examples:  { \n     properties :   { \n         code :   { \n             type :   string , \n             minLength :   5 , \n             maxLength :   20 \n         }, \n         payloadFormat :   { \n             type :   string , \n             pattern :   [abc]+ \n         }, \n         installedDate :   { \n             type :   string , \n             format :   date \n         } \n     }  }", 
            "title": "string keywords"
        }, 
        {
            "location": "/projects/assetlibrary/templates-user/#keywords-common-to-all-types", 
            "text": "The following keywords are supported by all types:     Keyword  Description      enum  A list of allowed values (of any type)     Examples:  { \n     properties :   { \n         color :   { \n             type :   string , \n             enum :   [ red , amber , green ] \n         } \n     }  }", 
            "title": "keywords common to all types"
        }, 
        {
            "location": "/projects/assetlibrary/templates-user/#compound-keywords", 
            "text": "The following keywords can be used together with other keywords to define more complex constraints:     Keyword  Description      not  The data is valid if it is invalid according to this keyword    oneOf  The data is valid if it matches exactly one of the schemas as defined by this array    anyOf  The data is valid if it matches one or more of the schemas as defined by this array    allOf  The data is valid if it matches all of the schemas as defined by this array     Examples:  { \n     properties :   { \n         errorCode :   { \n             not :   { \n                 type :   string \n             } \n         }, \n         pcmCode :   { \n             oneOf :   [ \n                 {   maximum :   10   }, \n                 {   type :   integer   } \n             ] \n         }, \n         pcmAction :   { \n             anyOf :   [ \n                 {   minimum :   1000   }, \n                 {   type :   integer   } \n             ] \n         }, \n         timeInterval :   { \n             allOf :   [ \n                 {   minimum :   1000   }, \n                 {   type :   integer   } \n             ] \n         } \n     }  }", 
            "title": "Compound keywords"
        }, 
        {
            "location": "/projects/assetlibrary/templates-user/#defining-relations", 
            "text": "Devices may be associated with one or more groups.  These associations are created by defining the relationship type and target group type as part of the device template.  As an example, the following device template for a custom  mote  type will allow this type of device to be associated with the  site  template via the  located_at  relationship:  { \n     properties :   { \n         code :   { type :   string } \n     }, \n     relations :   { \n         out :   { \n             located_at :   [ site ] \n         } \n     }  }   Once a relationship has been defined on a device template, it will also be visible when viewing the corresponding group template.  To follow the same example, the template for the custom  site  group will be returned as follows:  { \n     properties :   { \n         address :   { type :   string } \n     }, \n     relations :   { \n         in :   { \n             located_at :   [ mote ] \n         } \n     }  }   Once the relationship has been defined, the following endpoints may be utilized to create the relationships between different instances of those types:     Endpoint  Description      PUT /devices/{deviceId}/{relationship}/groups/{groupPath}  Associates a device to a group via a specific relationship    DELETE /devices/{deviceId}/{relationship}/groups/{groupPath}  Removes a specific association between a device and group", 
            "title": "Defining relations"
        }, 
        {
            "location": "/projects/assetlibrary/templates-user/#defining-components", 
            "text": "Devices may contain other devices represented as components.  Components are a special classification of a device in which components cannot exist by themselves.  They must form part of an assembly which is represented as a parent device.  To allow a device to contain components, the type must be specified in the device template.  As an example, the following device template will allow components to be added of the  sensor  device template:  { \n     properties :   { \n         code :   { type :   string } \n     }, \n     components :   [ sensor ]  }   Once a component has been defined, the following endpoints may be used to manage components:     Endpoint  Description      POST /devices  When creating a new device, if the  components  attribute has been provided in the body (representing a list of devices), each of these components will be created and associated with the parent device    GET /devices/{deviceId}?expandComponents={true\\|false}  If  expandComponents  is true, all components associated with the device will be returned    POST /devices/{deviceId}/components  Adds a new component to an existing device    PATCH /devices/{deviceId}/components/{componentId}  Updates an existing component of an existing device    DELETE /devices/{deviceId}/components/{componentId}  Deletes an existing component of an existing device", 
            "title": "Defining Components"
        }, 
        {
            "location": "/projects/assetlibrary-history/assetlibraryhistory-swagger/", 
            "text": "Connected Device Framework: Asset Library History\n\n\nThe Asset Library History service tracks changes to all devices, groups, policies, and templates within the Asset Library.\n\n\nVersion: 1.0.0\n\n\n/{category}\n\n\nGET\n\n\nSummary:\n\n\nList all events of a given category\n\n\nDescription:\n\n\nList all events of a given category\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nLocated in\n\n\nDescription\n\n\nRequired\n\n\nSchema\n\n\n\n\n\n\n\n\n\n\ncategory\n\n\npath\n\n\nAsset Library category\n\n\nYes\n\n\nstring\n\n\n\n\n\n\ntimeFrom\n\n\nquery\n\n\nOnly display category events since this time\n\n\nNo\n\n\ndateTime\n\n\n\n\n\n\ntimeTo\n\n\nquery\n\n\nOnly display category events prior to this time\n\n\nNo\n\n\ndateTime\n\n\n\n\n\n\nuser\n\n\nquery\n\n\nOnly display category events authored by this user\n\n\nNo\n\n\nstring\n\n\n\n\n\n\nevent\n\n\nquery\n\n\nOnly display category events of this type\n\n\nNo\n\n\nstring\n\n\n\n\n\n\nsort\n\n\nquery\n\n\nSort order\n\n\nNo\n\n\nstring\n\n\n\n\n\n\ntoken\n\n\nquery\n\n\nPagination token\n\n\nNo\n\n\nbinary\n\n\n\n\n\n\nlimit\n\n\nquery\n\n\nMaximum no. events to return\n\n\nNo\n\n\nnumber (int32)\n\n\n\n\n\n\n\n\nResponses\n\n\n\n\n\n\n\n\nCode\n\n\nDescription\n\n\nSchema\n\n\n\n\n\n\n\n\n\n\n200\n\n\nOK\n\n\nEvents\n\n\n\n\n\n\n400\n\n\n\n\n\n\n\n\n\n\n404\n\n\n\n\n\n\n\n\n\n\n\n\n/{category}/{objectId}\n\n\nGET\n\n\nSummary:\n\n\nList all events of a specific Asset Library object\n\n\nDescription:\n\n\nList all events of a specific Asset Library object\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nLocated in\n\n\nDescription\n\n\nRequired\n\n\nSchema\n\n\n\n\n\n\n\n\n\n\ncategory\n\n\npath\n\n\nAsset Library category\n\n\nYes\n\n\nstring\n\n\n\n\n\n\nobjectId\n\n\npath\n\n\nAsset Library object id (deviceId, groupPath, policyId, or templateId)\n\n\nYes\n\n\nstring\n\n\n\n\n\n\ntimeAt\n\n\nquery\n\n\nReturn the known state of a specific object at this time\n\n\nNo\n\n\ndateTime\n\n\n\n\n\n\ntimeFrom\n\n\nquery\n\n\nOnly display category events since this time\n\n\nNo\n\n\ndateTime\n\n\n\n\n\n\ntimeTo\n\n\nquery\n\n\nOnly display category events prior to this time\n\n\nNo\n\n\ndateTime\n\n\n\n\n\n\nuser\n\n\nquery\n\n\nOnly display category events authored by this user\n\n\nNo\n\n\nstring\n\n\n\n\n\n\nevent\n\n\nquery\n\n\nOnly display category events of this type\n\n\nNo\n\n\nstring\n\n\n\n\n\n\nsort\n\n\nquery\n\n\nSort order\n\n\nNo\n\n\nstring\n\n\n\n\n\n\ntoken\n\n\nquery\n\n\nPagination token\n\n\nNo\n\n\nbinary\n\n\n\n\n\n\nlimit\n\n\nquery\n\n\nMaximum no. events to return\n\n\nNo\n\n\nnumber (int32)\n\n\n\n\n\n\n\n\nResponses\n\n\n\n\n\n\n\n\nCode\n\n\nDescription\n\n\nSchema\n\n\n\n\n\n\n\n\n\n\n200\n\n\nOK\n\n\nEvents\n\n\n\n\n\n\n400\n\n\n\n\n\n\n\n\n\n\n404\n\n\n\n\n\n\n\n\n\n\n\n\nModels\n\n\nEvent\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nobjectId\n\n\nstring\n\n\nDeviceId, groupPath, policyId or templateId of the object.\n\n\nNo\n\n\n\n\n\n\ntype\n\n\nstring\n\n\ncategory of object.\n\n\nNo\n\n\n\n\n\n\ntime\n\n\ndateTime\n\n\nDate/time of event.\n\n\nNo\n\n\n\n\n\n\nevent\n\n\nstring\n\n\nEvent type.\n\n\nNo\n\n\n\n\n\n\nuser\n\n\nstring\n\n\nUser who authored the change.\n\n\nNo\n\n\n\n\n\n\nstate\n\n\nobject\n\n\nFull json representation of the object (e.g. a Device) at the time the change was made.\n\n\nNo\n\n\n\n\n\n\n\n\nEvents\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nresults\n\n\n[ \nEvent\n ]\n\n\n\n\nNo\n\n\n\n\n\n\npagination\n\n\nobject\n\n\n\n\nNo\n\n\n\n\n\n\n\n\nError\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nmessage\n\n\nstring\n\n\n\n\nNo", 
            "title": "Connected Device Framework: Asset Library History"
        }, 
        {
            "location": "/projects/assetlibrary-history/assetlibraryhistory-swagger/#connected-device-framework-asset-library-history", 
            "text": "The Asset Library History service tracks changes to all devices, groups, policies, and templates within the Asset Library.", 
            "title": "Connected Device Framework: Asset Library History"
        }, 
        {
            "location": "/projects/assetlibrary-history/assetlibraryhistory-swagger/#version-100", 
            "text": "", 
            "title": "Version: 1.0.0"
        }, 
        {
            "location": "/projects/assetlibrary-history/assetlibraryhistory-swagger/#category", 
            "text": "", 
            "title": "/{category}"
        }, 
        {
            "location": "/projects/assetlibrary-history/assetlibraryhistory-swagger/#get", 
            "text": "", 
            "title": "GET"
        }, 
        {
            "location": "/projects/assetlibrary-history/assetlibraryhistory-swagger/#summary", 
            "text": "List all events of a given category", 
            "title": "Summary:"
        }, 
        {
            "location": "/projects/assetlibrary-history/assetlibraryhistory-swagger/#description", 
            "text": "List all events of a given category", 
            "title": "Description:"
        }, 
        {
            "location": "/projects/assetlibrary-history/assetlibraryhistory-swagger/#parameters", 
            "text": "Name  Located in  Description  Required  Schema      category  path  Asset Library category  Yes  string    timeFrom  query  Only display category events since this time  No  dateTime    timeTo  query  Only display category events prior to this time  No  dateTime    user  query  Only display category events authored by this user  No  string    event  query  Only display category events of this type  No  string    sort  query  Sort order  No  string    token  query  Pagination token  No  binary    limit  query  Maximum no. events to return  No  number (int32)", 
            "title": "Parameters"
        }, 
        {
            "location": "/projects/assetlibrary-history/assetlibraryhistory-swagger/#responses", 
            "text": "Code  Description  Schema      200  OK  Events    400      404", 
            "title": "Responses"
        }, 
        {
            "location": "/projects/assetlibrary-history/assetlibraryhistory-swagger/#categoryobjectid", 
            "text": "", 
            "title": "/{category}/{objectId}"
        }, 
        {
            "location": "/projects/assetlibrary-history/assetlibraryhistory-swagger/#get_1", 
            "text": "", 
            "title": "GET"
        }, 
        {
            "location": "/projects/assetlibrary-history/assetlibraryhistory-swagger/#summary_1", 
            "text": "List all events of a specific Asset Library object", 
            "title": "Summary:"
        }, 
        {
            "location": "/projects/assetlibrary-history/assetlibraryhistory-swagger/#description_1", 
            "text": "List all events of a specific Asset Library object", 
            "title": "Description:"
        }, 
        {
            "location": "/projects/assetlibrary-history/assetlibraryhistory-swagger/#parameters_1", 
            "text": "Name  Located in  Description  Required  Schema      category  path  Asset Library category  Yes  string    objectId  path  Asset Library object id (deviceId, groupPath, policyId, or templateId)  Yes  string    timeAt  query  Return the known state of a specific object at this time  No  dateTime    timeFrom  query  Only display category events since this time  No  dateTime    timeTo  query  Only display category events prior to this time  No  dateTime    user  query  Only display category events authored by this user  No  string    event  query  Only display category events of this type  No  string    sort  query  Sort order  No  string    token  query  Pagination token  No  binary    limit  query  Maximum no. events to return  No  number (int32)", 
            "title": "Parameters"
        }, 
        {
            "location": "/projects/assetlibrary-history/assetlibraryhistory-swagger/#responses_1", 
            "text": "Code  Description  Schema      200  OK  Events    400      404", 
            "title": "Responses"
        }, 
        {
            "location": "/projects/assetlibrary-history/assetlibraryhistory-swagger/#models", 
            "text": "", 
            "title": "Models"
        }, 
        {
            "location": "/projects/assetlibrary-history/assetlibraryhistory-swagger/#event", 
            "text": "Name  Type  Description  Required      objectId  string  DeviceId, groupPath, policyId or templateId of the object.  No    type  string  category of object.  No    time  dateTime  Date/time of event.  No    event  string  Event type.  No    user  string  User who authored the change.  No    state  object  Full json representation of the object (e.g. a Device) at the time the change was made.  No", 
            "title": "Event"
        }, 
        {
            "location": "/projects/assetlibrary-history/assetlibraryhistory-swagger/#events", 
            "text": "Name  Type  Description  Required      results  [  Event  ]   No    pagination  object   No", 
            "title": "Events"
        }, 
        {
            "location": "/projects/assetlibrary-history/assetlibraryhistory-swagger/#error", 
            "text": "Name  Type  Description  Required      message  string   No", 
            "title": "Error"
        }, 
        {
            "location": "/projects/assetlibrary-history/overview/", 
            "text": "ASSET LIBRARY HISTORY OVERVIEW\n\n\nIntroduction\n\n\nThe Asset Library History service is an optional service that stores all changes made to Asset Library resources (devices, groups, policies and/or templates).\n\n\nSubscribing to Events\n\n\nThe Asset Library broadcasts \nevents\n which the Asset Library subcribes to.  Upon receiving, the event is stored in its datastore for later retrieval.\n\n\nREST API\n\n\nThe following endpoints are exposed:\n\n\n\n\n\n\n\n\nEndpoint\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nGET /{type}/{objectId}?timeAt=\ntimeFrom=\ntimeTo=\nuser=\nevent=\nsort=\ntoken=\nlimit=\n\n\nReturns the events for a specific object.\n\n\n\n\n\n\nGET /{type}?timeFrom=\ntimeTo=\nuser=\nevent=\nsort=\ntoken=\nlimit=\n\n\nReturns all configuration changes of a specific object type.\n\n\n\n\n\n\n\n\n\n\n{type}\n represents the type of resource:  \ndevices\n, \ngroups\n, \ndeviceTemplates\n, \ngroupTemplates\n or \npolicies\n.\n\n\n{objectId}\n represents the unique identifier for the type of object, e.g. \ndeviceId\n for devices, or \ngroupPath\n for groups.\n\n\n?timeAt\n represents the state as at a specific time.\n\n\n?timeFrom\n and \n?timeTo\n represent a date/time range.\n\n\n?user\n represents the author of changes.\n\n\n?event\n represents the evet type, one of \ncreate\n, \nmodify\n or \ndelete\n.\n\n\n?sort\n represents a sort order, e.g. \n?sort=time::asc\n.\n\n\n?token\n and \n?limit\n allow for paginating.\n\n\n\n\nExample endpoint usage:\n\n\nReturning the configuration for device \ndevice001\n as of \n05/01/2018\n\n\nGET /devices/device001?timeAt\n=\n2018\n-05-01T00:00:00+00:00\n\n\n\n\n{\n\n    \nevents\n:\n \n[{\n\n        \ntime\n:\n \n2018-02-21T03:45:05+00:00\n,\n\n        \nauthor\n:\n \ndeanhart\n,\n\n        \neventType\n:\n \nmodify\n,\n\n\n        \ndevice\n:\n \n{\n\n            \ndevice\n\n        \n}\n\n    \n}]\n\n\n}\n\n\n\n\n\nReturning the latest known event for device \ndevice001\n:\n\n\nGET /devices/device001\n\n\n\n\n{\n\n    \nevents\n:\n \n[{\n\n        \ntime\n:\n \n2018-02-21T03:45:05+00:00\n,\n\n        \nauthor\n:\n \ndeanhart\n,\n\n        \neventType\n:\n \nmodify\n,\n\n\n        \ndevice\n:\n \n{\n\n            \ndevice\n\n        \n}\n\n    \n}]\n\n\n}\n\n\n\n\n\nReturning all configuration changes for the group \n/supplier/sup123\n since \n02/01/2018\n\n\nGET /groups/%2fsupplier%2fsup123?timeFrom\n=\n2018\n-05-01T00:00:00+00:00\nsort\n=\ntime::desc\n\n\n\n\n{\n\n    \nevents\n:\n \n[{\n\n        \ntime\n:\n \n2018-06-21T03:45:05+00:00\n,\n\n        \nauthor\n:\n \ndeanhart\n,\n\n        \neventType\n:\n \nmodify\n,\n\n\n        \ngroup\n:\n \n{\n\n            \ngroup\n\n        \n}\n\n    \n},\n \n{\n\n        \ntime\n:\n \n2018-05-20T00:15:00+00:00\n,\n\n        \nauthor\n:\n \ndeanhart\n,\n\n        \neventType\n:\n \nmodify\n,\n\n\n        \ngroup\n:\n \n{\n\n            \ngroup\n\n        \n}\n\n    \n}],\n\n\n    \npagination\n:\n \n{\n\n        \ntoken\n:\n \na1b2c3d4e5f6\n\n    \n}\n\n\n}\n\n\n\n\n\nDetermining when a specific device was deleted\n\n\nGET /devices/device123?event\n=\ndelete\n\n\n\n\n{\n\n    \nevents\n:\n \n[{\n\n        \ntime\n:\n \n2018-06-21T03:45:05+00:00\n,\n\n        \nauthor\n:\n \ndeanhart\n,\n\n        \neventType\n:\n \ndelete\n,\n\n\n        \ndevice\n:\n \n{\n\n            \ndevice\n\n        \n}\n\n    \n}]\n\n\n}\n\n\n\n\n\nReturning all configuration changes of \ndevices\n between \n03/15/2018\n and \n04/15/2018\n performed by \ndeanhart\n, limiting the result size returned\n\n\nGET /devices?timeFrom\n=\n2018\n-03-15T00:00:00+00:00\ntimeTo\n=\n2018\n-04-15T00:00:00+00:00\nuser\n=\ndeanhart\nsort\n=\ntime::desc\nlimit\n=\n2\n\n\n\n\n\n{\n\n    \nevents\n:\n \n[{\n\n        \nupdatedAt\n:\n \n2018-03-21T03:45:05+00:00\n,\n\n        \nupdatedBy\n:\n \ndeanhart\n,\n\n        \neventType\n:\n \nmodify\n,\n\n\n        \ngroup\n:\n \n{\n\n            \ngroup\n\n        \n}\n\n    \n},\n \n{\n\n        \nupdatedAt\n:\n \n2018-03-20T00:15:00+00:00\n,\n\n        \nupdatedBy\n:\n \ndeanhart\n,\n\n        \neventType\n:\n \nmodify\n,\n\n\n        \ngroup\n:\n \n{\n\n            \ngroup\n\n        \n}\n\n    \n}],\n\n\n    \npagination\n:\n \n{\n\n        \ntoken\n:\n \na1b2c3d4e5f6\n\n    \n}\n\n\n}\n\n\n\n\n\nDatastore\n\n\nDynamoDB is the datastore serving the Asset Library History service.  A single DynamoDB table exists as follows:\n\n\nPrimary Key:\n\n\n\n\nPartition key:  {objectId}\n\n\nSort key:  'latest' | {time}\n\n\n\n\nAttributes:\n\n\n\n\ntype: string  (devices | groups | policies | deviceTemplates | groupTemplates)\n\n\ntime: string  (ISO-8601 UTC date formatted as a string)\n\n\nevent: string  (create | modify | delete)\n\n\nuser: string\n\n\nstate: string  (full json snapshot of the domain object, such as a \ndevice\n)\n\n\n\n\nGSI:\n\n\n\n\nPartition key:  {type}\n\n\nSort key:  {time}\n\n\n\n\nThe above partition/sort keys allow for the following queries to be made:\n\n\n\n\nReturning the configuration for device \ndevice001\n as of \n05/01/2018\n:\n\n\n\n\n--table-name \ntableName\n \n\\\n\n--key-condition-expression \nobjectId = :deviceId AND time BETWEEN :from AND :to\n \n\\\n\n--expression-attribute-values  \n{\n:deviceId\n:{\nS\n:\ndevice001\n}, \n:from\n:{\nS\n:\n2018-05-01T00:00:00+00:00\n}, \n:to\n:{\nS\n:\n2018-05-01T23:59:59+00:00\n}}\n\n\n\n\n\n\n\nReturning the latest known event for device \ndevice001\n:\n\n\n\n\n--table-name \ntableName\n \n\\\n\n--key-condition-expression \nobjectId = :deviceId AND time = :version\n \n\\\n\n--expression-attribute-values  \n{\n:deviceId\n:{\nS\n:\ndevice001\n}, \n:version\n:{\nS\n:\nlatest\n}}\n\n\n\n\n\n\n\nReturning all configuration changes for the group \n/supplier/sup123\n since \n02/01/2018\n:\n\n\n\n\n--table-name \ntableName\n \n\\\n\n--key-condition-expression \nobjectId = :groupPath AND time \n= :time\n \n\\\n\n--expression-attribute-values  \n{\n:groupPath\n:{\nS\n:\n/supplier/sup123\n}, \n:time\n:{\nS\n:\n2018-02-01\n}}\n\n\n\n\n\n\n\nDetermining when a specific device was deleted:\n\n\n\n\n--table-name \ntableName\n \n\\\n\n--key-condition-expression \nobjectId = :deviceId\n \n\\\n\n--filter-expression \n#e = :event\n \n\\\n\n--expression-attribute-names \n{\n#e\n: \nevent\n}\n \n\\\n\n--expression-attribute-values  \n{\n:deviceId\n:{\nS\n:\ndevice001\n}, \n:event\n:{\nS\n:\ndelete\n}}\n\n\n\n\n\n\n\nReturning all configuration changes of \ndevices\n between \n03/15/2018\n and \n04/15/2018\n performed by \ndeanhart\n:\n\n\n\n\n--table-name \ntableName\n \n\\\n\n--index-name \ngsi-name\n \n\\\n\n--key-condition-expression \ntype = :type AND time BETWEEN :from AND :to\n \n\\\n\n--filter-expression \n#a = :author\n \n\\\n\n--expression-attribute-names \n{\n#a\n: \nauthor\n}\n \n\\\n\n--expression-attribute-values  \n{\n:type\n:{\nS\n:\ndevices\n}, \n:from\n:{\nS\n:\n2018-05-01T00:00:00+00:00\n}, \n:to\n:{\nS\n:\n2018-05-01T23:59:59+00:00\n}, \n:author\n:{\nS\n:\ndeanhart\n}}\n\n\n\n\n\nTaking Action on Events\n\n\nThe Asset Library History service subcribes to the Asset Library published \nevents\n via an AWS Iot Rule.  The action taken for each event is as follows:\n\n\nNote: the \nsaved\n action below involves writing both a new event item with timestamp set appropriately, along with replicating the item to the \nlatest\n item.\n\n\n\n\n\n\n\n\nEvent\n\n\nActions\n\n\n\n\n\n\n\n\n\n\nDevice created\n\n\nSaved\n\n\n\n\n\n\nDevice updated\n\n\nLatest version retrieved, changed attributes updated, saved\n\n\n\n\n\n\nDevice deleted\n\n\nSaved\n\n\n\n\n\n\nDevice attached to group\n\n\nLatest version retrieved, groups attribute updated, saved\n\n\n\n\n\n\nDevice detached from group\n\n\nLatest version retrieved, groups attribute updated, saved\n\n\n\n\n\n\nDevice attached to another device\n\n\nLatest version retrieved of both devices affected, changed attributes updated, saved\n\n\n\n\n\n\nDevice detached from another device\n\n\nLatest version retrieved of both devices affected, changed attributes updated, saved\n\n\n\n\n\n\nDevice component created\n\n\nComponent saved.  Latest version of parent retrieved, component list updated, saved\n\n\n\n\n\n\nDevice component updated\n\n\nLatest version retrieved, changed attributes updated, saved\n\n\n\n\n\n\nDevice component deleted\n\n\nComponent saved.  Latest version of parent retrieved, component list updated, saved\n\n\n\n\n\n\nGroup created\n\n\nSaved\n\n\n\n\n\n\nGroup updated\n\n\nLatest version retrieved, changed attributes updated, saved\n\n\n\n\n\n\nGroup deleted\n\n\nSaved\n\n\n\n\n\n\nPolicy created\n\n\nSaved\n\n\n\n\n\n\nPolicy updated\n\n\nLatest version retrieved, changed attributes updated, saved\n\n\n\n\n\n\nPolicy deleted\n\n\nSaved\n\n\n\n\n\n\nDevice Template created\n\n\nSaved\n\n\n\n\n\n\nDevice Template updated\n\n\nLatest version retrieved, changed attributes updated, saved\n\n\n\n\n\n\nDevice Template published\n\n\nLatest version retrieved, changed attributes updated, saved\n\n\n\n\n\n\nDevice Template deleted\n\n\nSaved\n\n\n\n\n\n\nGroup Template created\n\n\nSaved\n\n\n\n\n\n\nGroup Template updated\n\n\nLatest version retrieved, changed attributes updated, saved\n\n\n\n\n\n\nGroup Template published\n\n\nLatest version retrieved, changed attributes updated, saved\n\n\n\n\n\n\nGroup Template deleted\n\n\nSaved", 
            "title": "ASSET LIBRARY HISTORY OVERVIEW"
        }, 
        {
            "location": "/projects/assetlibrary-history/overview/#asset-library-history-overview", 
            "text": "", 
            "title": "ASSET LIBRARY HISTORY OVERVIEW"
        }, 
        {
            "location": "/projects/assetlibrary-history/overview/#introduction", 
            "text": "The Asset Library History service is an optional service that stores all changes made to Asset Library resources (devices, groups, policies and/or templates).", 
            "title": "Introduction"
        }, 
        {
            "location": "/projects/assetlibrary-history/overview/#subscribing-to-events", 
            "text": "The Asset Library broadcasts  events  which the Asset Library subcribes to.  Upon receiving, the event is stored in its datastore for later retrieval.", 
            "title": "Subscribing to Events"
        }, 
        {
            "location": "/projects/assetlibrary-history/overview/#rest-api", 
            "text": "The following endpoints are exposed:     Endpoint  Description      GET /{type}/{objectId}?timeAt= timeFrom= timeTo= user= event= sort= token= limit=  Returns the events for a specific object.    GET /{type}?timeFrom= timeTo= user= event= sort= token= limit=  Returns all configuration changes of a specific object type.      {type}  represents the type of resource:   devices ,  groups ,  deviceTemplates ,  groupTemplates  or  policies .  {objectId}  represents the unique identifier for the type of object, e.g.  deviceId  for devices, or  groupPath  for groups.  ?timeAt  represents the state as at a specific time.  ?timeFrom  and  ?timeTo  represent a date/time range.  ?user  represents the author of changes.  ?event  represents the evet type, one of  create ,  modify  or  delete .  ?sort  represents a sort order, e.g.  ?sort=time::asc .  ?token  and  ?limit  allow for paginating.", 
            "title": "REST API"
        }, 
        {
            "location": "/projects/assetlibrary-history/overview/#example-endpoint-usage", 
            "text": "", 
            "title": "Example endpoint usage:"
        }, 
        {
            "location": "/projects/assetlibrary-history/overview/#returning-the-configuration-for-device-device001-as-of-05012018", 
            "text": "GET /devices/device001?timeAt = 2018 -05-01T00:00:00+00:00  { \n     events :   [{ \n         time :   2018-02-21T03:45:05+00:00 , \n         author :   deanhart , \n         eventType :   modify , \n\n         device :   { \n             device \n         } \n     }]  }", 
            "title": "Returning the configuration for device device001 as of 05/01/2018"
        }, 
        {
            "location": "/projects/assetlibrary-history/overview/#returning-the-latest-known-event-for-device-device001", 
            "text": "GET /devices/device001  { \n     events :   [{ \n         time :   2018-02-21T03:45:05+00:00 , \n         author :   deanhart , \n         eventType :   modify , \n\n         device :   { \n             device \n         } \n     }]  }", 
            "title": "Returning the latest known event for device device001:"
        }, 
        {
            "location": "/projects/assetlibrary-history/overview/#returning-all-configuration-changes-for-the-group-suppliersup123-since-02012018", 
            "text": "GET /groups/%2fsupplier%2fsup123?timeFrom = 2018 -05-01T00:00:00+00:00 sort = time::desc  { \n     events :   [{ \n         time :   2018-06-21T03:45:05+00:00 , \n         author :   deanhart , \n         eventType :   modify , \n\n         group :   { \n             group \n         } \n     },   { \n         time :   2018-05-20T00:15:00+00:00 , \n         author :   deanhart , \n         eventType :   modify , \n\n         group :   { \n             group \n         } \n     }], \n\n     pagination :   { \n         token :   a1b2c3d4e5f6 \n     }  }", 
            "title": "Returning all configuration changes for the group /supplier/sup123 since 02/01/2018"
        }, 
        {
            "location": "/projects/assetlibrary-history/overview/#determining-when-a-specific-device-was-deleted", 
            "text": "GET /devices/device123?event = delete  { \n     events :   [{ \n         time :   2018-06-21T03:45:05+00:00 , \n         author :   deanhart , \n         eventType :   delete , \n\n         device :   { \n             device \n         } \n     }]  }", 
            "title": "Determining when a specific device was deleted"
        }, 
        {
            "location": "/projects/assetlibrary-history/overview/#returning-all-configuration-changes-of-devices-between-03152018-and-04152018-performed-by-deanhart-limiting-the-result-size-returned", 
            "text": "GET /devices?timeFrom = 2018 -03-15T00:00:00+00:00 timeTo = 2018 -04-15T00:00:00+00:00 user = deanhart sort = time::desc limit = 2   { \n     events :   [{ \n         updatedAt :   2018-03-21T03:45:05+00:00 , \n         updatedBy :   deanhart , \n         eventType :   modify , \n\n         group :   { \n             group \n         } \n     },   { \n         updatedAt :   2018-03-20T00:15:00+00:00 , \n         updatedBy :   deanhart , \n         eventType :   modify , \n\n         group :   { \n             group \n         } \n     }], \n\n     pagination :   { \n         token :   a1b2c3d4e5f6 \n     }  }", 
            "title": "Returning all configuration changes of devices between 03/15/2018 and 04/15/2018 performed by deanhart, limiting the result size returned"
        }, 
        {
            "location": "/projects/assetlibrary-history/overview/#datastore", 
            "text": "DynamoDB is the datastore serving the Asset Library History service.  A single DynamoDB table exists as follows:  Primary Key:   Partition key:  {objectId}  Sort key:  'latest' | {time}   Attributes:   type: string  (devices | groups | policies | deviceTemplates | groupTemplates)  time: string  (ISO-8601 UTC date formatted as a string)  event: string  (create | modify | delete)  user: string  state: string  (full json snapshot of the domain object, such as a  device )   GSI:   Partition key:  {type}  Sort key:  {time}   The above partition/sort keys allow for the following queries to be made:   Returning the configuration for device  device001  as of  05/01/2018 :   --table-name  tableName   \\ \n--key-condition-expression  objectId = :deviceId AND time BETWEEN :from AND :to   \\ \n--expression-attribute-values   { :deviceId :{ S : device001 },  :from :{ S : 2018-05-01T00:00:00+00:00 },  :to :{ S : 2018-05-01T23:59:59+00:00 }}    Returning the latest known event for device  device001 :   --table-name  tableName   \\ \n--key-condition-expression  objectId = :deviceId AND time = :version   \\ \n--expression-attribute-values   { :deviceId :{ S : device001 },  :version :{ S : latest }}    Returning all configuration changes for the group  /supplier/sup123  since  02/01/2018 :   --table-name  tableName   \\ \n--key-condition-expression  objectId = :groupPath AND time  = :time   \\ \n--expression-attribute-values   { :groupPath :{ S : /supplier/sup123 },  :time :{ S : 2018-02-01 }}    Determining when a specific device was deleted:   --table-name  tableName   \\ \n--key-condition-expression  objectId = :deviceId   \\ \n--filter-expression  #e = :event   \\ \n--expression-attribute-names  { #e :  event }   \\ \n--expression-attribute-values   { :deviceId :{ S : device001 },  :event :{ S : delete }}    Returning all configuration changes of  devices  between  03/15/2018  and  04/15/2018  performed by  deanhart :   --table-name  tableName   \\ \n--index-name  gsi-name   \\ \n--key-condition-expression  type = :type AND time BETWEEN :from AND :to   \\ \n--filter-expression  #a = :author   \\ \n--expression-attribute-names  { #a :  author }   \\ \n--expression-attribute-values   { :type :{ S : devices },  :from :{ S : 2018-05-01T00:00:00+00:00 },  :to :{ S : 2018-05-01T23:59:59+00:00 },  :author :{ S : deanhart }}", 
            "title": "Datastore"
        }, 
        {
            "location": "/projects/assetlibrary-history/overview/#taking-action-on-events", 
            "text": "The Asset Library History service subcribes to the Asset Library published  events  via an AWS Iot Rule.  The action taken for each event is as follows:  Note: the  saved  action below involves writing both a new event item with timestamp set appropriately, along with replicating the item to the  latest  item.     Event  Actions      Device created  Saved    Device updated  Latest version retrieved, changed attributes updated, saved    Device deleted  Saved    Device attached to group  Latest version retrieved, groups attribute updated, saved    Device detached from group  Latest version retrieved, groups attribute updated, saved    Device attached to another device  Latest version retrieved of both devices affected, changed attributes updated, saved    Device detached from another device  Latest version retrieved of both devices affected, changed attributes updated, saved    Device component created  Component saved.  Latest version of parent retrieved, component list updated, saved    Device component updated  Latest version retrieved, changed attributes updated, saved    Device component deleted  Component saved.  Latest version of parent retrieved, component list updated, saved    Group created  Saved    Group updated  Latest version retrieved, changed attributes updated, saved    Group deleted  Saved    Policy created  Saved    Policy updated  Latest version retrieved, changed attributes updated, saved    Policy deleted  Saved    Device Template created  Saved    Device Template updated  Latest version retrieved, changed attributes updated, saved    Device Template published  Latest version retrieved, changed attributes updated, saved    Device Template deleted  Saved    Group Template created  Saved    Group Template updated  Latest version retrieved, changed attributes updated, saved    Group Template published  Latest version retrieved, changed attributes updated, saved    Group Template deleted  Saved", 
            "title": "Taking Action on Events"
        }, 
        {
            "location": "/projects/auth-devicecert/overview/", 
            "text": "CUSTOM DEVICE AUTHORIZER\n\n\nA custom authorizer service provides you to control access to REST API methods. This is utilized by the facade endpoint for device level communication.\n\n\nThis custom authorizer is useful for constrained devices which are incapable of using the \nAWS IoT Credentials Provider\n to obtain temporary AWS credentials using the device's X.509 certificate.  Note that the AWS IoT Credentials Provider method is the recommended approach where possible.\n\n\nIntroduction\n\n\nThe custom authorizer service utilizes \nAPI Gateway Custom Authorizer\n. A Lambda based authorizer uses information described by headers (\ndeviceCert\n and \ndeviceId\n) to then validate whether the device certificate was signed by the registered CA certificate.\n\n\nFor a valid policy, API Gateway caches the returned policy, associated with the incoming source request parameters. It then uses the cached policy for the current and subsequent requests, over a pre-configured time-to-live (TTL) period of 300 seconds.\n\n\nThe request to the device custom authorizer requires the following two http headers setting:\n\n\ndeviceid: \n device id \n\ndevicecert: \n device certificate \n\n\n\n\n\nAn example of the headers as follows:\n\n\ndeviceid: edsn001\ndevicecert: -----BEGIN CERTIFICATE-----\\nMIIDWjCCAkICCQCHBZwUBuqWrTANBgkqhkiG9w0BAQsFADCBiDELMAkGA1UEBhMC\\nVVMxCzAJBgNVBAgMAkNPMQ8wDQYDVQQHDAZEZW52ZXIxEDAOBgNVBAoMB0N1bW1p\\nbnMxEDAOBgNVBAsMB0VuZ2luZXMxFjAUBgNVBAMMDSouY3VtbWlucy5jb20xHzAd\\nBgkqhkiG9w0BCQEWEGluZm9AY3VtbWlucy5jb20wHhcNMTgwNzEyMTU1NjQwWhcN\\nMTkwNzEyMTU1NjQwWjBVMQswCQYDVQQGEwJVUzELMAkGA1UECAwCQ0ExDzANBgNV\\nBAoMBm1hcmluZTESMBAGA1UECwwJZXF1aXBtZW50MRQwEgYDVQQDDAtjdW1taW5z\\nLmNvbTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBANU5kNASl7cFq6u\\/\\nFHALUlR6U77FLc2lQx5DZzXGimDQZXzQ68oBC1kRSv1oxCBzK889r7Awj\\/4xcvVO\\nUPudS9etP6gpMb2af0UinLN5eM0AMjUsdipqBJGbkDMS2RCD+tXsJHKUUVhlp+yO\\ncdQs+dd7s5sWIg8IUMHuMPSHl6hkOYStlkx7+WdPTliS2\\/OjClHjcWi0G0BtCgu6\\nwV2p7OjVo68741Jl8aQ0N9yEU4mHJiES7JkbsVZWgf46FDUHDCOTeeZHV6EHoJ6R\\n\\/9fLT2eGFtFez8HjWB6KLwA1mRk3DdRHx4iRV5NvoY44JxxTJj1Lc71v4bye0aul\\ni0rdQGkCAwEAATANBgkqhkiG9w0BAQsFAAOCAQEAiOpehqcOU8FVU2dPO8a6+R6u\\n62O27q7djQgtnQ4\\/KudiYz6JrYolEO8waC5m+4xjqZJ+WcnF8RU9jSWsnsdNL3E6\\nfVQ65N8Fx\\/9NRmborrWuVhAOGH0XJzaNHUbhHNThlYazAquF5QpS4TWqnJyl+tTy\\nB7EH24hj7j3ghjccnr3bN4\\/NfKZ9IBtXaDj9CVIcX91K+ZgbkhLo\\/Tn\\/iUHvjvbJ\\nTCz+5rb0BTLzVV8kyp05OuVy21abUrERG3kzx4sHZ419Em9AeVZm+P8EifIBvYrV\\n\\/9pYhgyN0kJTpPu1Bin4y1UqHmDziddDQXbYBzLS5ov0nX3C\\/MeRO1IdsAdorw==\\n-----END CERTIFICATE-----", 
            "title": "CUSTOM DEVICE AUTHORIZER"
        }, 
        {
            "location": "/projects/auth-devicecert/overview/#custom-device-authorizer", 
            "text": "A custom authorizer service provides you to control access to REST API methods. This is utilized by the facade endpoint for device level communication.  This custom authorizer is useful for constrained devices which are incapable of using the  AWS IoT Credentials Provider  to obtain temporary AWS credentials using the device's X.509 certificate.  Note that the AWS IoT Credentials Provider method is the recommended approach where possible.", 
            "title": "CUSTOM DEVICE AUTHORIZER"
        }, 
        {
            "location": "/projects/auth-devicecert/overview/#introduction", 
            "text": "The custom authorizer service utilizes  API Gateway Custom Authorizer . A Lambda based authorizer uses information described by headers ( deviceCert  and  deviceId ) to then validate whether the device certificate was signed by the registered CA certificate.  For a valid policy, API Gateway caches the returned policy, associated with the incoming source request parameters. It then uses the cached policy for the current and subsequent requests, over a pre-configured time-to-live (TTL) period of 300 seconds.  The request to the device custom authorizer requires the following two http headers setting:  deviceid:   device id  \ndevicecert:   device certificate    An example of the headers as follows:  deviceid: edsn001\ndevicecert: -----BEGIN CERTIFICATE-----\\nMIIDWjCCAkICCQCHBZwUBuqWrTANBgkqhkiG9w0BAQsFADCBiDELMAkGA1UEBhMC\\nVVMxCzAJBgNVBAgMAkNPMQ8wDQYDVQQHDAZEZW52ZXIxEDAOBgNVBAoMB0N1bW1p\\nbnMxEDAOBgNVBAsMB0VuZ2luZXMxFjAUBgNVBAMMDSouY3VtbWlucy5jb20xHzAd\\nBgkqhkiG9w0BCQEWEGluZm9AY3VtbWlucy5jb20wHhcNMTgwNzEyMTU1NjQwWhcN\\nMTkwNzEyMTU1NjQwWjBVMQswCQYDVQQGEwJVUzELMAkGA1UECAwCQ0ExDzANBgNV\\nBAoMBm1hcmluZTESMBAGA1UECwwJZXF1aXBtZW50MRQwEgYDVQQDDAtjdW1taW5z\\nLmNvbTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBANU5kNASl7cFq6u\\/\\nFHALUlR6U77FLc2lQx5DZzXGimDQZXzQ68oBC1kRSv1oxCBzK889r7Awj\\/4xcvVO\\nUPudS9etP6gpMb2af0UinLN5eM0AMjUsdipqBJGbkDMS2RCD+tXsJHKUUVhlp+yO\\ncdQs+dd7s5sWIg8IUMHuMPSHl6hkOYStlkx7+WdPTliS2\\/OjClHjcWi0G0BtCgu6\\nwV2p7OjVo68741Jl8aQ0N9yEU4mHJiES7JkbsVZWgf46FDUHDCOTeeZHV6EHoJ6R\\n\\/9fLT2eGFtFez8HjWB6KLwA1mRk3DdRHx4iRV5NvoY44JxxTJj1Lc71v4bye0aul\\ni0rdQGkCAwEAATANBgkqhkiG9w0BAQsFAAOCAQEAiOpehqcOU8FVU2dPO8a6+R6u\\n62O27q7djQgtnQ4\\/KudiYz6JrYolEO8waC5m+4xjqZJ+WcnF8RU9jSWsnsdNL3E6\\nfVQ65N8Fx\\/9NRmborrWuVhAOGH0XJzaNHUbhHNThlYazAquF5QpS4TWqnJyl+tTy\\nB7EH24hj7j3ghjccnr3bN4\\/NfKZ9IBtXaDj9CVIcX91K+ZgbkhLo\\/Tn\\/iUHvjvbJ\\nTCz+5rb0BTLzVV8kyp05OuVy21abUrERG3kzx4sHZ419Em9AeVZm+P8EifIBvYrV\\n\\/9pYhgyN0kJTpPu1Bin4y1UqHmDziddDQXbYBzLS5ov0nX3C\\/MeRO1IdsAdorw==\\n-----END CERTIFICATE-----", 
            "title": "Introduction"
        }, 
        {
            "location": "/projects/bulkcerts/bulkcerts-swagger/", 
            "text": "Connected Device Framework: Bulk Certs\n\n\nREST API for bulk creating certificates.\n\n\nVersion: 1.0.0\n\n\n/certificates\n\n\nPOST\n\n\nSummary:\n\n\nCreates a batch of certificates.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nLocated in\n\n\nDescription\n\n\nRequired\n\n\nSchema\n\n\n\n\n\n\n\n\n\n\nbody\n\n\nbody\n\n\n\n\nYes\n\n\nBulkCertificatesTaskRequest\n\n\n\n\n\n\n\n\nResponses\n\n\n\n\n\n\n\n\nCode\n\n\nDescription\n\n\nSchema\n\n\n\n\n\n\n\n\n\n\n202\n\n\nCreated successfully\n\n\nBulkCertificatesTaskResponse\n\n\n\n\n\n\n400\n\n\n\n\n\n\n\n\n\n\n\n\n/certificates/{taskId}\n\n\nGET\n\n\nSummary:\n\n\nRetrieve a batch of pre-generated certificates (the outcome of a batch certificate creation task)\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nLocated in\n\n\nDescription\n\n\nRequired\n\n\nSchema\n\n\n\n\n\n\n\n\n\n\ntaskId\n\n\npath\n\n\nId of the bulk certificate creation task\n\n\nYes\n\n\nstring\n\n\n\n\n\n\n\n\nResponses\n\n\n\n\n\n\n\n\nCode\n\n\nDescription\n\n\nSchema\n\n\n\n\n\n\n\n\n\n\n200\n\n\nZipfile of certificates\n\n\nfile\n\n\n\n\n\n\n303\n\n\nIf certificate creation is still inprogress, a redirect to the certificate task status\n\n\n\n\n\n\n\n\n404\n\n\n\n\n\n\n\n\n\n\n\n\n/certificates/{taskId}/task\n\n\nGET\n\n\nSummary:\n\n\nRetrieve status of a bulk certificates task\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nLocated in\n\n\nDescription\n\n\nRequired\n\n\nSchema\n\n\n\n\n\n\n\n\n\n\ntaskId\n\n\npath\n\n\nId of the bulk certificate creation task\n\n\nYes\n\n\nstring\n\n\n\n\n\n\n\n\nResponses\n\n\n\n\n\n\n\n\nCode\n\n\nDescription\n\n\nSchema\n\n\n\n\n\n\n\n\n\n\n200\n\n\nPending\n\n\nBulkCertificatesTaskStatusResponse\n\n\n\n\n\n\n400\n\n\n\n\n\n\n\n\n\n\n404\n\n\n\n\n\n\n\n\n\n\n\n\n/supplier/{supplierId}/certificates\n\n\nPOST\n\n\nSummary:\n\n\nCreates a batch of certificates for a supplier, using a supplier's specific CA.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nLocated in\n\n\nDescription\n\n\nRequired\n\n\nSchema\n\n\n\n\n\n\n\n\n\n\nsupplierId\n\n\npath\n\n\nId supplier for which to create certificates\n\n\nYes\n\n\nstring\n\n\n\n\n\n\nbody\n\n\nbody\n\n\n\n\nYes\n\n\nBulkCertificatesTaskRequest\n\n\n\n\n\n\n\n\nResponses\n\n\n\n\n\n\n\n\nCode\n\n\nDescription\n\n\nSchema\n\n\n\n\n\n\n\n\n\n\n202\n\n\nCreated successfully\n\n\nBulkCertificatesTaskResponse\n\n\n\n\n\n\n400\n\n\n\n\n\n\n\n\n\n\n\n\nModels\n\n\nBulkCertificatesTaskRequest\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nquantity\n\n\nnumber\n\n\n\n\nNo\n\n\n\n\n\n\nregister\n\n\nboolean\n\n\n\n\nNo\n\n\n\n\n\n\n\n\nBulkCertificatesTaskResponse\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nBulkCertificatesTaskResponse\n\n\nobject\n\n\n\n\n\n\n\n\n\n\n\n\nBulkCertificatesTaskStatusResponse\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\ntaskId\n\n\nstring\n\n\nID of the bulk certificates creation task\n\n\nNo\n\n\n\n\n\n\nstatus\n\n\nstring\n\n\nstatus of the task\n\n\nNo\n\n\n\n\n\n\nbatchDate\n\n\nnumber\n\n\nbatch start date time\n\n\nNo\n\n\n\n\n\n\nchunksPending\n\n\nnumber\n\n\nnumber of certificate chunks yet to be completed\n\n\nNo\n\n\n\n\n\n\nchunksTotal\n\n\nnumber\n\n\ntotal number of chunks in this batch\n\n\nNo\n\n\n\n\n\n\n\n\nError\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nmessage\n\n\nstring\n\n\n\n\nNo", 
            "title": "Connected Device Framework: Bulk Certs"
        }, 
        {
            "location": "/projects/bulkcerts/bulkcerts-swagger/#connected-device-framework-bulk-certs", 
            "text": "REST API for bulk creating certificates.", 
            "title": "Connected Device Framework: Bulk Certs"
        }, 
        {
            "location": "/projects/bulkcerts/bulkcerts-swagger/#version-100", 
            "text": "", 
            "title": "Version: 1.0.0"
        }, 
        {
            "location": "/projects/bulkcerts/bulkcerts-swagger/#certificates", 
            "text": "", 
            "title": "/certificates"
        }, 
        {
            "location": "/projects/bulkcerts/bulkcerts-swagger/#post", 
            "text": "", 
            "title": "POST"
        }, 
        {
            "location": "/projects/bulkcerts/bulkcerts-swagger/#summary", 
            "text": "Creates a batch of certificates.", 
            "title": "Summary:"
        }, 
        {
            "location": "/projects/bulkcerts/bulkcerts-swagger/#parameters", 
            "text": "Name  Located in  Description  Required  Schema      body  body   Yes  BulkCertificatesTaskRequest", 
            "title": "Parameters"
        }, 
        {
            "location": "/projects/bulkcerts/bulkcerts-swagger/#responses", 
            "text": "Code  Description  Schema      202  Created successfully  BulkCertificatesTaskResponse    400", 
            "title": "Responses"
        }, 
        {
            "location": "/projects/bulkcerts/bulkcerts-swagger/#certificatestaskid", 
            "text": "", 
            "title": "/certificates/{taskId}"
        }, 
        {
            "location": "/projects/bulkcerts/bulkcerts-swagger/#get", 
            "text": "", 
            "title": "GET"
        }, 
        {
            "location": "/projects/bulkcerts/bulkcerts-swagger/#summary_1", 
            "text": "Retrieve a batch of pre-generated certificates (the outcome of a batch certificate creation task)", 
            "title": "Summary:"
        }, 
        {
            "location": "/projects/bulkcerts/bulkcerts-swagger/#parameters_1", 
            "text": "Name  Located in  Description  Required  Schema      taskId  path  Id of the bulk certificate creation task  Yes  string", 
            "title": "Parameters"
        }, 
        {
            "location": "/projects/bulkcerts/bulkcerts-swagger/#responses_1", 
            "text": "Code  Description  Schema      200  Zipfile of certificates  file    303  If certificate creation is still inprogress, a redirect to the certificate task status     404", 
            "title": "Responses"
        }, 
        {
            "location": "/projects/bulkcerts/bulkcerts-swagger/#certificatestaskidtask", 
            "text": "", 
            "title": "/certificates/{taskId}/task"
        }, 
        {
            "location": "/projects/bulkcerts/bulkcerts-swagger/#get_1", 
            "text": "", 
            "title": "GET"
        }, 
        {
            "location": "/projects/bulkcerts/bulkcerts-swagger/#summary_2", 
            "text": "Retrieve status of a bulk certificates task", 
            "title": "Summary:"
        }, 
        {
            "location": "/projects/bulkcerts/bulkcerts-swagger/#parameters_2", 
            "text": "Name  Located in  Description  Required  Schema      taskId  path  Id of the bulk certificate creation task  Yes  string", 
            "title": "Parameters"
        }, 
        {
            "location": "/projects/bulkcerts/bulkcerts-swagger/#responses_2", 
            "text": "Code  Description  Schema      200  Pending  BulkCertificatesTaskStatusResponse    400      404", 
            "title": "Responses"
        }, 
        {
            "location": "/projects/bulkcerts/bulkcerts-swagger/#suppliersupplieridcertificates", 
            "text": "", 
            "title": "/supplier/{supplierId}/certificates"
        }, 
        {
            "location": "/projects/bulkcerts/bulkcerts-swagger/#post_1", 
            "text": "", 
            "title": "POST"
        }, 
        {
            "location": "/projects/bulkcerts/bulkcerts-swagger/#summary_3", 
            "text": "Creates a batch of certificates for a supplier, using a supplier's specific CA.", 
            "title": "Summary:"
        }, 
        {
            "location": "/projects/bulkcerts/bulkcerts-swagger/#parameters_3", 
            "text": "Name  Located in  Description  Required  Schema      supplierId  path  Id supplier for which to create certificates  Yes  string    body  body   Yes  BulkCertificatesTaskRequest", 
            "title": "Parameters"
        }, 
        {
            "location": "/projects/bulkcerts/bulkcerts-swagger/#responses_3", 
            "text": "Code  Description  Schema      202  Created successfully  BulkCertificatesTaskResponse    400", 
            "title": "Responses"
        }, 
        {
            "location": "/projects/bulkcerts/bulkcerts-swagger/#models", 
            "text": "", 
            "title": "Models"
        }, 
        {
            "location": "/projects/bulkcerts/bulkcerts-swagger/#bulkcertificatestaskrequest", 
            "text": "Name  Type  Description  Required      quantity  number   No    register  boolean   No", 
            "title": "BulkCertificatesTaskRequest"
        }, 
        {
            "location": "/projects/bulkcerts/bulkcerts-swagger/#bulkcertificatestaskresponse", 
            "text": "Name  Type  Description  Required      BulkCertificatesTaskResponse  object", 
            "title": "BulkCertificatesTaskResponse"
        }, 
        {
            "location": "/projects/bulkcerts/bulkcerts-swagger/#bulkcertificatestaskstatusresponse", 
            "text": "Name  Type  Description  Required      taskId  string  ID of the bulk certificates creation task  No    status  string  status of the task  No    batchDate  number  batch start date time  No    chunksPending  number  number of certificate chunks yet to be completed  No    chunksTotal  number  total number of chunks in this batch  No", 
            "title": "BulkCertificatesTaskStatusResponse"
        }, 
        {
            "location": "/projects/bulkcerts/bulkcerts-swagger/#error", 
            "text": "Name  Type  Description  Required      message  string   No", 
            "title": "Error"
        }, 
        {
            "location": "/projects/bulkcerts/overview/", 
            "text": "BULK CERTS REST API\n\n\nIntroduction\n\n\nThe bulk certs service allows for the creation of large batches of X.509 certificates, and optionally register them with AWS IoT.\n\n\nWhen a batch is requested, a task is created to track the creation of certificates.  Upon task creation, the creation call is returned immediately to the caller.  The task itself is then split in smaller chunks to allow for quick processing.  Once all chunks are complete, the overall task is complete, and the certificates can be downloaded as a single zip file.\n\n\nRegistering an IoT CA\n\n\nTo create certificates, \nbulkcertificates\n uses a CA certificate registered with AWS IoT. To sign these certificates, \nbulkcertificates\n needs the CA certificate as well as the corresponding private key. \nBulk Certificates\n retrieves the CA certificate directly from AWS IoT and retrieves the private key from AWS Systems Manager as an encrypted secure string. To allow for this the following steps need to be done:\n\n\nRegister your CA with AWS IoT\n\n\nRefer to \nthis document\n for registering your CA. If you are testing, there are instructions in this document for creating a test CA certificate.\n\n\nCreate a KMS Key for encrypting/decrypting the CA private key\n\n\nKMS is used to encrypt the CA private key for storage in SSM. To do so, a KMS key is required. This can be done in the KMS console by creating a customer-managed key.\n\n\nUpload your CA private key to SSM as a secure string\n\n\nThe following AWS CLI command uploads a private key file to SSM. It is recommended to use the CLI rather than copy pasting into the console to avoid formatting issues in the console.\n\n\nNote\n: By convention, \ncdf-bulkcerts\n expects the SSM parameter name in the format \ncdf-ca-key-\nCA KEY ID\n, where the ID is the CA certificate ID when it is registered in AWS IoT.\n\n\naws --profile \nPROFILE\n --region \nREGION\n ssm put-parameter --type SecureString --key-id \nKMS KEY ID\n --name cdf-ca-key-\nCA KEY ID\n --value file://rootCA.key --overwrite", 
            "title": "BULK CERTS REST API"
        }, 
        {
            "location": "/projects/bulkcerts/overview/#bulk-certs-rest-api", 
            "text": "", 
            "title": "BULK CERTS REST API"
        }, 
        {
            "location": "/projects/bulkcerts/overview/#introduction", 
            "text": "The bulk certs service allows for the creation of large batches of X.509 certificates, and optionally register them with AWS IoT.  When a batch is requested, a task is created to track the creation of certificates.  Upon task creation, the creation call is returned immediately to the caller.  The task itself is then split in smaller chunks to allow for quick processing.  Once all chunks are complete, the overall task is complete, and the certificates can be downloaded as a single zip file.", 
            "title": "Introduction"
        }, 
        {
            "location": "/projects/bulkcerts/overview/#registering-an-iot-ca", 
            "text": "To create certificates,  bulkcertificates  uses a CA certificate registered with AWS IoT. To sign these certificates,  bulkcertificates  needs the CA certificate as well as the corresponding private key.  Bulk Certificates  retrieves the CA certificate directly from AWS IoT and retrieves the private key from AWS Systems Manager as an encrypted secure string. To allow for this the following steps need to be done:", 
            "title": "Registering an IoT CA"
        }, 
        {
            "location": "/projects/bulkcerts/overview/#register-your-ca-with-aws-iot", 
            "text": "Refer to  this document  for registering your CA. If you are testing, there are instructions in this document for creating a test CA certificate.", 
            "title": "Register your CA with AWS IoT"
        }, 
        {
            "location": "/projects/bulkcerts/overview/#create-a-kms-key-for-encryptingdecrypting-the-ca-private-key", 
            "text": "KMS is used to encrypt the CA private key for storage in SSM. To do so, a KMS key is required. This can be done in the KMS console by creating a customer-managed key.", 
            "title": "Create a KMS Key for encrypting/decrypting the CA private key"
        }, 
        {
            "location": "/projects/bulkcerts/overview/#upload-your-ca-private-key-to-ssm-as-a-secure-string", 
            "text": "The following AWS CLI command uploads a private key file to SSM. It is recommended to use the CLI rather than copy pasting into the console to avoid formatting issues in the console.  Note : By convention,  cdf-bulkcerts  expects the SSM parameter name in the format  cdf-ca-key- CA KEY ID , where the ID is the CA certificate ID when it is registered in AWS IoT.  aws --profile  PROFILE  --region  REGION  ssm put-parameter --type SecureString --key-id  KMS KEY ID  --name cdf-ca-key- CA KEY ID  --value file://rootCA.key --overwrite", 
            "title": "Upload your CA private key to SSM as a secure string"
        }, 
        {
            "location": "/projects/certificateactivator/overview/", 
            "text": "CERTIFICATE ACTIVATOR\n\n\nIntroduction\n\n\nThe CDF Certificate Activator service links the Just In Time Registration (JITR) functionality of AWS IoT with the CDF provisioning flow(s). It includes a rule which invokes a Lambda function based on JITR events emitted from AWS IoT.\n\n\nDependencies\n\n\n\n\nIt is assumed that the Asset Library is running in \nfull\n mode which supports profiles, with a profile created for the \ntemplateId\n in context\n\n\nIt is assumed that the Asset Library is running in \nfull\n mode which supports inherited documents, with a provisioning template configured and associated with group hierarcies as required\n\n\nIt is assumed that the provisioning template requires \nThingName\n and \nCertificateId\n as parameters\n\n\n\n\nLimitations\n\n\nKnown limitations which may require customizing the implementation:\n\n\n\n\nThe \ntemplateId\n and \ndeviceId\n are stored as \n${templateId}::{deviceId}\n within the certificate's CN (common name) field, which according to RFC5280 is limited to 64 characters.  If the combination of those 2 attributes exceeds the known limit, an alternate method would be required (such as linking to an alternate data store) to store these values", 
            "title": "CERTIFICATE ACTIVATOR"
        }, 
        {
            "location": "/projects/certificateactivator/overview/#certificate-activator", 
            "text": "", 
            "title": "CERTIFICATE ACTIVATOR"
        }, 
        {
            "location": "/projects/certificateactivator/overview/#introduction", 
            "text": "The CDF Certificate Activator service links the Just In Time Registration (JITR) functionality of AWS IoT with the CDF provisioning flow(s). It includes a rule which invokes a Lambda function based on JITR events emitted from AWS IoT.", 
            "title": "Introduction"
        }, 
        {
            "location": "/projects/certificateactivator/overview/#dependencies", 
            "text": "It is assumed that the Asset Library is running in  full  mode which supports profiles, with a profile created for the  templateId  in context  It is assumed that the Asset Library is running in  full  mode which supports inherited documents, with a provisioning template configured and associated with group hierarcies as required  It is assumed that the provisioning template requires  ThingName  and  CertificateId  as parameters", 
            "title": "Dependencies"
        }, 
        {
            "location": "/projects/certificateactivator/overview/#limitations", 
            "text": "Known limitations which may require customizing the implementation:   The  templateId  and  deviceId  are stored as  ${templateId}::{deviceId}  within the certificate's CN (common name) field, which according to RFC5280 is limited to 64 characters.  If the combination of those 2 attributes exceeds the known limit, an alternate method would be required (such as linking to an alternate data store) to store these values", 
            "title": "Limitations"
        }, 
        {
            "location": "/projects/certificatevendor/overview/", 
            "text": "CERTIFICATE VENDOR\n\n\nIntroduction\n\n\nThe certificate vendor manages the rotation of certificates involving a number of moving parts across CDF and AWS IoT.\n\n\nThere are two flows for certificate rotation. In the fist case, device certificates are pre-created and registered before the rotation request. In this case the device requests a new certificate and is vended an S3 presigned URL in order to download the certificate package. In the second case, the device provides the certificate vendor service a CSR. In this way the device can request an updated certificate while keeping the private key on the device. The certificate vendor then uses a CA certificate registered with AWS IoT to create a device certificate from the CSR and return this certificate to the device.\n\n\nPre-Requisites\n\n\nPre-created Certificates\n\n\nA certificate package comprising of the certificate, public key and private key is to be created and registered with AWS IoT.  This certificate package is to be zipped, and stored in S3 with the name of the zip matching the name of the intended device.  The certificateId is associated with the certificate package by setting the \nx-amz-meta-certificateid\n S3 user metadata attribute of the zip file.\n\n\nCertificate Creation with a Device CSR\n\n\nA CA certificate needs to be registered with AWS IoT. In addtion, the CA private key needs to be encrypted and stored in EC2 Parameter store so the certificate vendor service can sign device certificates using the CA.\n\n\nAuto-deploy\n\n\nThe following resources are automatically created by the deployment script, and utilized by this flow:\n\n\nA Thing Group (default named \ncdfRotateCertificates\n).  Add devices to this group that require certificates rotating.\n\n\nUsing cdf-commands a command template is created to define the structure of an AWS IoT Job to request devices to rotate certificates.  Again using cdf-commands a command is created of the template to create an continuous AWS IoT Job targeting the rotateCertificates Thing Group.  Both the template and command creation is handled by the platform deployment script.\n\n\nExample cdf-commands template:\n\n{\n\n    \ntemplateId\n:\n \nRotateCertificates\n,\n\n    \ndescription\n:\n \nRotate certificate of targetted devices\n,\n\n    \noperation\n \n:\n \nRotateCertificates\n,\n\n    \ndocument\n:\n \n{\\\nsubscribeTopic\\\n:\\\n${cdf:parameters:subscribeTopic}\\\n,\\\npublishTopic\\\n:\\\n${cdf:parameters:publishTopic}\\\n}\n,\n\n    \nrequiredDocumentParameters\n:\n \n[\n\n        \nsubscribeTopic\n,\n\n        \npublishTopic\n\n    \n]\n\n\n}\n\n\n\n\nExample cdf-commands command:\n\n\n\n\n{rotateCertificatesThingGroupArn} and {deviceActivationRuleName} are injected by the deployment script\n\n\n{thingName} is replaced on the device side by the device itself\n\n\n\n\n{\n\n \ntemplateId\n:\n \nRotateCertificates\n,\n\n \ntargets\n:\n \n[\n{rotateCertificatesThingGroupArn}\n],\n\n \ntype\n:\n \nCONTINUOUS\n,\n\n \nrolloutMaximumPerMinute\n:\n \n120\n,\n\n \ndocumentParameters\n:\n \n{\n\n        \nsubscribeTopic\n:\ncdf/certificates/{thingName}/+\n,\n\n        \npublishTopic\n:\n$aws/rules/{deviceActivationRuleName}/cdf/certificates/{thingName}\n\n    \n}\n\n\n}\n\n\n\n\n\nCertificate Rotation Flow\n\n\nAs part of the device startup sequence it should subscribe to AWS IoT jobs.  \n\n\nAdd the device to the \ncdfRotateCertificates\n Thing Group.  This will send a job to the targetted device which instructs the device to start the certificate rotation process.  The Job document contains the publish and subscribe topics for certificate rotation.  \n\n\nExample job document (the device to replace the {thingName} token):\n\n\n{\n   \n    \noperation\n:\n \nRotateCertificates\n,\n\n    \nsubscribeTopic\n:\ncdf/certificates/{thingName}/+\n,\n\n    \npublishTopic\n:\n$aws/rules/cdfcertificatevendordevelopmentMQTTRule1OS64259XAGQQ/cdf/certificates/{thingName}\n}\n\n\n}\n\n\n\n\n\nCertificate Vendor supports two methods of requesting certificates:\n\n\n\n\npre-created certificates which live in S3 and are returned vi presigned URL when the device does a \nget\n\n\na device does a \nget\n and supplies a CSR in the request - certificate vendor signs the certificate with an IoT registered CA and returns the certificate to the device via the MQTT response\n\n\n\n\nThe device sends a request to the cdf-certificate-vendor via the above publish topic.\n\n\nExample MQTT message body sent from the device to the AWS IoT Gateway:\n\n\n{\n\n    \naction\n:\n \nget\n\n\n}\n\n\n\n\n\nExample MQTT message body sent from the device including a CSR:\n\n\n{\n\n    \naction\n:\n \nget\n,\n\n    \ncsr\n:\n-----BEGIN CERTIFICATE REQUEST-----\\nCSR CONTENT\\n-----END CERTIFICATE REQUEST-----\n\n\n}\n\n\n\n\n\nExample message sent from AWS IoT Gateway to the cdf-certificatevendor (post message transformation by the AWS IoT Rule):\n\n\n{\n\n    \ndeviceId\n:\n \ndevice123\n,\n\n    \ncertificateId\n:\nb77135fa885e8e48e42671a6335df5662a7da01e03625768ca572efa2bb131ee\n,\n\n    \naction\n:\n \nget\n\n\n}\n\n\n\n\n\nThe AWS IoT Rule adds the device ID as well as the certificate ID used in the connection to the message payload sent to the Certificate Vendor Lambda function.\n\n\nUpon receiving the request, the cdf-certificate-vendor validates that the device has been whitelisted. If whitelisted, Certificate Vendor checks for the presence of a CSR in the request. If provided, Certificate Venor uses the CSR to create a device certificate which it returns to the device. If a CSR is not present, Certificate Vendor proceeds to download the S3 Object Metadata associated with the certificate package to retrieve the certificateId, activates the certificate, then constructs and returns a pre-signed url to the device for downloading of the certificate package.  Final the device status is updated to activated.\n\n\nBelow are example success responses sent from cdf-certificationvendor to the device, published to the cdf/certificates/{thingName}/accepted MQTT topic:\n\n\nPre-created certificate to be retrieved from S3:\n\n\n{\n\n    \ndeviceId\n:\n \ndevice123\n,\n\n    \naction\n:\n \nget\n,\n\n    \nlocation\n:\n \nhttps://cdf-157731826412-us-west-2.s3.amazonaws.com/certificates/device123.zip?AWSAccessKeyId=AKIAI7VRYYSEBBSSAXGQ\nExpires=1542129538\nSignature=fbuiPsYAhzj1TDMn4JjD6cX%2Bs4U%3D\n\n\n}\n\n\n\n\n\nCertificate requested by the device with a CSR:\n\n\n{\n\n    \ndeviceId\n:\n \ndevice123\n,\n\n    \naction\n:\n \nget\n,\n\n    \ncertificate\n:\n \n-----BEGIN CERTIFICATE-----\\nCERTIFICATE CONTENT\\n-----END CERTIFICATE-----\n\n\n}\n\n\n\n\n\nUpon receiving the response, the device downloads the certificate package (if delivered via presigned URL) and replaces its existing certificates, followed by sending an acknowledgement to the cdf-certificate-vendor.  Upon receiving the ackknowledgement the cdf-certificate-vendor the device is removed from the rotateCertificates group.\n\n\nExample acknowledgement message:\n\n\n{\n\n    \naction\n:\n \nack\n\n\n}\n\n\n\n\n\nIf any failures occur during this flow, a rejected message is sent to the device, publish to the cdf/certificates/{thingName}/rejected MQTT topic.  Example message:\n\n\n{\n\n    \ndeviceId\n:\n \ndevice123\n,\n\n    \naction\n:\n \nget\n,\n\n    \nmessage\n:\n \nDEVICE_NOT_WHITELISTED\n\n\n}\n\n\n\n\n\nSecurity\n\n\nAn IoT profile should exist to enforce the device to use its Thing Name as the MQTT clientId.  \n\n\nIn addition the profile should be configured to allow devices to receive AWS IoT Jobs, and to allow for publishing requests to and receiving responses from the cdf-certificate-vendor service as itself.\n\n\nOnly whitelisted devices (devices that registered with the Asset Library) are authorized to request new certificates.", 
            "title": "CERTIFICATE VENDOR"
        }, 
        {
            "location": "/projects/certificatevendor/overview/#certificate-vendor", 
            "text": "", 
            "title": "CERTIFICATE VENDOR"
        }, 
        {
            "location": "/projects/certificatevendor/overview/#introduction", 
            "text": "The certificate vendor manages the rotation of certificates involving a number of moving parts across CDF and AWS IoT.  There are two flows for certificate rotation. In the fist case, device certificates are pre-created and registered before the rotation request. In this case the device requests a new certificate and is vended an S3 presigned URL in order to download the certificate package. In the second case, the device provides the certificate vendor service a CSR. In this way the device can request an updated certificate while keeping the private key on the device. The certificate vendor then uses a CA certificate registered with AWS IoT to create a device certificate from the CSR and return this certificate to the device.", 
            "title": "Introduction"
        }, 
        {
            "location": "/projects/certificatevendor/overview/#pre-requisites", 
            "text": "", 
            "title": "Pre-Requisites"
        }, 
        {
            "location": "/projects/certificatevendor/overview/#pre-created-certificates", 
            "text": "A certificate package comprising of the certificate, public key and private key is to be created and registered with AWS IoT.  This certificate package is to be zipped, and stored in S3 with the name of the zip matching the name of the intended device.  The certificateId is associated with the certificate package by setting the  x-amz-meta-certificateid  S3 user metadata attribute of the zip file.", 
            "title": "Pre-created Certificates"
        }, 
        {
            "location": "/projects/certificatevendor/overview/#certificate-creation-with-a-device-csr", 
            "text": "A CA certificate needs to be registered with AWS IoT. In addtion, the CA private key needs to be encrypted and stored in EC2 Parameter store so the certificate vendor service can sign device certificates using the CA.", 
            "title": "Certificate Creation with a Device CSR"
        }, 
        {
            "location": "/projects/certificatevendor/overview/#auto-deploy", 
            "text": "The following resources are automatically created by the deployment script, and utilized by this flow:  A Thing Group (default named  cdfRotateCertificates ).  Add devices to this group that require certificates rotating.  Using cdf-commands a command template is created to define the structure of an AWS IoT Job to request devices to rotate certificates.  Again using cdf-commands a command is created of the template to create an continuous AWS IoT Job targeting the rotateCertificates Thing Group.  Both the template and command creation is handled by the platform deployment script.  Example cdf-commands template: { \n     templateId :   RotateCertificates , \n     description :   Rotate certificate of targetted devices , \n     operation   :   RotateCertificates , \n     document :   {\\ subscribeTopic\\ :\\ ${cdf:parameters:subscribeTopic}\\ ,\\ publishTopic\\ :\\ ${cdf:parameters:publishTopic}\\ } , \n     requiredDocumentParameters :   [ \n         subscribeTopic , \n         publishTopic \n     ]  }   Example cdf-commands command:   {rotateCertificatesThingGroupArn} and {deviceActivationRuleName} are injected by the deployment script  {thingName} is replaced on the device side by the device itself   { \n  templateId :   RotateCertificates , \n  targets :   [ {rotateCertificatesThingGroupArn} ], \n  type :   CONTINUOUS , \n  rolloutMaximumPerMinute :   120 , \n  documentParameters :   { \n         subscribeTopic : cdf/certificates/{thingName}/+ , \n         publishTopic : $aws/rules/{deviceActivationRuleName}/cdf/certificates/{thingName} \n     }  }", 
            "title": "Auto-deploy"
        }, 
        {
            "location": "/projects/certificatevendor/overview/#certificate-rotation-flow", 
            "text": "As part of the device startup sequence it should subscribe to AWS IoT jobs.    Add the device to the  cdfRotateCertificates  Thing Group.  This will send a job to the targetted device which instructs the device to start the certificate rotation process.  The Job document contains the publish and subscribe topics for certificate rotation.    Example job document (the device to replace the {thingName} token):  {    \n     operation :   RotateCertificates , \n     subscribeTopic : cdf/certificates/{thingName}/+ , \n     publishTopic : $aws/rules/cdfcertificatevendordevelopmentMQTTRule1OS64259XAGQQ/cdf/certificates/{thingName} }  }   Certificate Vendor supports two methods of requesting certificates:   pre-created certificates which live in S3 and are returned vi presigned URL when the device does a  get  a device does a  get  and supplies a CSR in the request - certificate vendor signs the certificate with an IoT registered CA and returns the certificate to the device via the MQTT response   The device sends a request to the cdf-certificate-vendor via the above publish topic.  Example MQTT message body sent from the device to the AWS IoT Gateway:  { \n     action :   get  }   Example MQTT message body sent from the device including a CSR:  { \n     action :   get , \n     csr : -----BEGIN CERTIFICATE REQUEST-----\\nCSR CONTENT\\n-----END CERTIFICATE REQUEST-----  }   Example message sent from AWS IoT Gateway to the cdf-certificatevendor (post message transformation by the AWS IoT Rule):  { \n     deviceId :   device123 , \n     certificateId : b77135fa885e8e48e42671a6335df5662a7da01e03625768ca572efa2bb131ee , \n     action :   get  }   The AWS IoT Rule adds the device ID as well as the certificate ID used in the connection to the message payload sent to the Certificate Vendor Lambda function.  Upon receiving the request, the cdf-certificate-vendor validates that the device has been whitelisted. If whitelisted, Certificate Vendor checks for the presence of a CSR in the request. If provided, Certificate Venor uses the CSR to create a device certificate which it returns to the device. If a CSR is not present, Certificate Vendor proceeds to download the S3 Object Metadata associated with the certificate package to retrieve the certificateId, activates the certificate, then constructs and returns a pre-signed url to the device for downloading of the certificate package.  Final the device status is updated to activated.  Below are example success responses sent from cdf-certificationvendor to the device, published to the cdf/certificates/{thingName}/accepted MQTT topic:  Pre-created certificate to be retrieved from S3:  { \n     deviceId :   device123 , \n     action :   get , \n     location :   https://cdf-157731826412-us-west-2.s3.amazonaws.com/certificates/device123.zip?AWSAccessKeyId=AKIAI7VRYYSEBBSSAXGQ Expires=1542129538 Signature=fbuiPsYAhzj1TDMn4JjD6cX%2Bs4U%3D  }   Certificate requested by the device with a CSR:  { \n     deviceId :   device123 , \n     action :   get , \n     certificate :   -----BEGIN CERTIFICATE-----\\nCERTIFICATE CONTENT\\n-----END CERTIFICATE-----  }   Upon receiving the response, the device downloads the certificate package (if delivered via presigned URL) and replaces its existing certificates, followed by sending an acknowledgement to the cdf-certificate-vendor.  Upon receiving the ackknowledgement the cdf-certificate-vendor the device is removed from the rotateCertificates group.  Example acknowledgement message:  { \n     action :   ack  }   If any failures occur during this flow, a rejected message is sent to the device, publish to the cdf/certificates/{thingName}/rejected MQTT topic.  Example message:  { \n     deviceId :   device123 , \n     action :   get , \n     message :   DEVICE_NOT_WHITELISTED  }", 
            "title": "Certificate Rotation Flow"
        }, 
        {
            "location": "/projects/certificatevendor/overview/#security", 
            "text": "An IoT profile should exist to enforce the device to use its Thing Name as the MQTT clientId.    In addition the profile should be configured to allow devices to receive AWS IoT Jobs, and to allow for publishing requests to and receiving responses from the cdf-certificate-vendor service as itself.  Only whitelisted devices (devices that registered with the Asset Library) are authorized to request new certificates.", 
            "title": "Security"
        }, 
        {
            "location": "/projects/commands/commands-swagger/", 
            "text": "Connected Device Framework: Commands Service\n\n\nVersion: 1.0.0\n\n\n/templates\n\n\nPOST\n\n\nSummary:\n\n\nRegisters a new job template.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nLocated in\n\n\nDescription\n\n\nRequired\n\n\nSchema\n\n\n\n\n\n\n\n\n\n\nbody\n\n\nbody\n\n\n\n\nYes\n\n\nTemplate\n\n\n\n\n\n\n\n\nResponses\n\n\n\n\n\n\n\n\nCode\n\n\nDescription\n\n\nSchema\n\n\n\n\n\n\n\n\n\n\n201\n\n\n\n\n\n\n\n\n\n\n400\n\n\n\n\n\n\n\n\n\n\n409\n\n\nTemplate already exists\n\n\nConflict\n\n\n\n\n\n\n500\n\n\n\n\n\n\n\n\n\n\n\n\nGET\n\n\nSummary:\n\n\nReturns a list of all job templates\n\n\nResponses\n\n\n\n\n\n\n\n\nCode\n\n\nDescription\n\n\nSchema\n\n\n\n\n\n\n\n\n\n\n200\n\n\nSuccess\n\n\nTemplateList\n\n\n\n\n\n\n500\n\n\n\n\n\n\n\n\n\n\n\n\n/templates/{templateId}\n\n\nGET\n\n\nSummary:\n\n\nReturns a specific template\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nLocated in\n\n\nDescription\n\n\nRequired\n\n\nSchema\n\n\n\n\n\n\n\n\n\n\ntemplateId\n\n\npath\n\n\nID of job template\n\n\nYes\n\n\nstring\n\n\n\n\n\n\n\n\nResponses\n\n\n\n\n\n\n\n\nCode\n\n\nDescription\n\n\nSchema\n\n\n\n\n\n\n\n\n\n\n200\n\n\nSuccess\n\n\nTemplate\n\n\n\n\n\n\n400\n\n\n\n\n\n\n\n\n\n\n404\n\n\n\n\n\n\n\n\n\n\n500\n\n\n\n\n\n\n\n\n\n\n\n\nPATCH\n\n\nSummary:\n\n\nUpdates a specific template\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nLocated in\n\n\nDescription\n\n\nRequired\n\n\nSchema\n\n\n\n\n\n\n\n\n\n\ntemplateId\n\n\npath\n\n\nID of job template\n\n\nYes\n\n\nstring\n\n\n\n\n\n\nbody\n\n\nbody\n\n\n\n\nYes\n\n\nTemplate\n\n\n\n\n\n\n\n\nResponses\n\n\n\n\n\n\n\n\nCode\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n204\n\n\nSuccess\n\n\n\n\n\n\n400\n\n\n\n\n\n\n\n\n404\n\n\n\n\n\n\n\n\n500\n\n\n\n\n\n\n\n\n\n\nDELETE\n\n\nSummary:\n\n\nDeleets a specific template\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nLocated in\n\n\nDescription\n\n\nRequired\n\n\nSchema\n\n\n\n\n\n\n\n\n\n\ntemplateId\n\n\npath\n\n\nID of job template\n\n\nYes\n\n\nstring\n\n\n\n\n\n\n\n\nResponses\n\n\n\n\n\n\n\n\nCode\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n204\n\n\nSuccess\n\n\n\n\n\n\n400\n\n\n\n\n\n\n\n\n500\n\n\n\n\n\n\n\n\n\n\n/commands\n\n\nPOST\n\n\nSummary:\n\n\nSubmits a new command.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nLocated in\n\n\nDescription\n\n\nRequired\n\n\nSchema\n\n\n\n\n\n\n\n\n\n\nbody\n\n\nbody\n\n\n\n\nYes\n\n\nCommand\n\n\n\n\n\n\n\n\nResponses\n\n\n\n\n\n\n\n\nCode\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n201\n\n\n\n\n\n\n\n\n400\n\n\n\n\n\n\n\n\n\n\nGET\n\n\nSummary:\n\n\nReturns a list of all commands\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nLocated in\n\n\nDescription\n\n\nRequired\n\n\nSchema\n\n\n\n\n\n\n\n\n\n\nstatus\n\n\nquery\n\n\n\n\nNo\n\n\nstring\n\n\n\n\n\n\n\n\nResponses\n\n\n\n\n\n\n\n\nCode\n\n\nDescription\n\n\nSchema\n\n\n\n\n\n\n\n\n\n\n200\n\n\nOK\n\n\nCommandList\n\n\n\n\n\n\n400\n\n\n\n\n\n\n\n\n\n\n404\n\n\n\n\n\n\n\n\n\n\n\n\n/commands/{commandId}\n\n\nGET\n\n\nSummary:\n\n\nReturns a specific command\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nLocated in\n\n\nDescription\n\n\nRequired\n\n\nSchema\n\n\n\n\n\n\n\n\n\n\ncommandId\n\n\npath\n\n\nID of command\n\n\nYes\n\n\nstring\n\n\n\n\n\n\n\n\nResponses\n\n\n\n\n\n\n\n\nCode\n\n\nDescription\n\n\nSchema\n\n\n\n\n\n\n\n\n\n\n200\n\n\nOK\n\n\nCommand\n\n\n\n\n\n\n400\n\n\n\n\n\n\n\n\n\n\n404\n\n\n\n\n\n\n\n\n\n\n\n\nPATCH\n\n\nSummary:\n\n\nUpdates a specific command, including setting its status to \nin_progress\n to start the command.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nLocated in\n\n\nDescription\n\n\nRequired\n\n\nSchema\n\n\n\n\n\n\n\n\n\n\ncommandId\n\n\npath\n\n\nID of command\n\n\nYes\n\n\nstring\n\n\n\n\n\n\nbody\n\n\nbody\n\n\n\n\nYes\n\n\nCommand\n\n\n\n\n\n\n\n\nResponses\n\n\n\n\n\n\n\n\nCode\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n204\n\n\nOK\n\n\n\n\n\n\n400\n\n\n\n\n\n\n\n\n404\n\n\n\n\n\n\n\n\n\n\n/commands/{commandId}/files/{fileId}\n\n\nPUT\n\n\nSummary:\n\n\nUploads a file required for the command\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nLocated in\n\n\nDescription\n\n\nRequired\n\n\nSchema\n\n\n\n\n\n\n\n\n\n\ncommandId\n\n\npath\n\n\nID of command\n\n\nYes\n\n\nstring\n\n\n\n\n\n\nfileId\n\n\npath\n\n\nID of file as defined in the templates \nrequiredFiles\n attribute\n\n\nYes\n\n\nstring\n\n\n\n\n\n\nfile\n\n\nformData\n\n\n\n\nNo\n\n\nfile\n\n\n\n\n\n\n\n\nResponses\n\n\n\n\n\n\n\n\nCode\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n201\n\n\n\n\n\n\n\n\n400\n\n\n\n\n\n\n\n\n\n\nDELETE\n\n\nSummary:\n\n\nRemoves a file from the command\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nLocated in\n\n\nDescription\n\n\nRequired\n\n\nSchema\n\n\n\n\n\n\n\n\n\n\ncommandId\n\n\npath\n\n\nID of command\n\n\nYes\n\n\nstring\n\n\n\n\n\n\nfileId\n\n\npath\n\n\nID of file as defined in the templates \nrequiredFiles\n attribute\n\n\nYes\n\n\nstring\n\n\n\n\n\n\n\n\nResponses\n\n\n\n\n\n\n\n\nCode\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n204\n\n\nOK\n\n\n\n\n\n\n400\n\n\n\n\n\n\n\n\n404\n\n\n\n\n\n\n\n\n\n\n/commands/{commandId}/executions\n\n\nGET\n\n\nSummary:\n\n\nLists the executions of a command\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nLocated in\n\n\nDescription\n\n\nRequired\n\n\nSchema\n\n\n\n\n\n\n\n\n\n\ncommandId\n\n\npath\n\n\nID of command\n\n\nYes\n\n\nstring\n\n\n\n\n\n\nstatus\n\n\nquery\n\n\n\n\nNo\n\n\nstring\n\n\n\n\n\n\n\n\nResponses\n\n\n\n\n\n\n\n\nCode\n\n\nDescription\n\n\nSchema\n\n\n\n\n\n\n\n\n\n\n200\n\n\nOK\n\n\nExecutionSummaryList\n\n\n\n\n\n\n400\n\n\n\n\n\n\n\n\n\n\n404\n\n\n\n\n\n\n\n\n\n\n\n\n/commands/{commandId}/executions/{thingName}\n\n\nGET\n\n\nSummary:\n\n\nReturns execution details of a specific command for a specific thing\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nLocated in\n\n\nDescription\n\n\nRequired\n\n\nSchema\n\n\n\n\n\n\n\n\n\n\ncommandId\n\n\npath\n\n\nID of command\n\n\nYes\n\n\nstring\n\n\n\n\n\n\nthingName\n\n\npath\n\n\nName of thing\n\n\nYes\n\n\nstring\n\n\n\n\n\n\n\n\nResponses\n\n\n\n\n\n\n\n\nCode\n\n\nDescription\n\n\nSchema\n\n\n\n\n\n\n\n\n\n\n200\n\n\nOK\n\n\nExecutionList\n\n\n\n\n\n\n400\n\n\n\n\n\n\n\n\n\n\n404\n\n\n\n\n\n\n\n\n\n\n\n\nDELETE\n\n\nSummary:\n\n\nCancels an execution for a specific thing\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nLocated in\n\n\nDescription\n\n\nRequired\n\n\nSchema\n\n\n\n\n\n\n\n\n\n\ncommandId\n\n\npath\n\n\nID of command\n\n\nYes\n\n\nstring\n\n\n\n\n\n\nthingName\n\n\npath\n\n\nName of thing\n\n\nYes\n\n\nstring\n\n\n\n\n\n\n\n\nResponses\n\n\n\n\n\n\n\n\nCode\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n204\n\n\nOK\n\n\n\n\n\n\n400\n\n\n\n\n\n\n\n\n404\n\n\n\n\n\n\n\n\n\n\nModels\n\n\nTemplateSummary\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\ntemplateId\n\n\nstring\n\n\n\n\nNo\n\n\n\n\n\n\ndescription\n\n\nstring\n\n\n\n\nNo\n\n\n\n\n\n\n\n\nTemplate\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\ntemplateId\n\n\nstring\n\n\n\n\nNo\n\n\n\n\n\n\noperation\n\n\nstring\n\n\n\n\nNo\n\n\n\n\n\n\ndescription\n\n\nstring\n\n\n\n\nNo\n\n\n\n\n\n\ndocument\n\n\nstring\n\n\n\n\nNo\n\n\n\n\n\n\nrequiredDocumentParameters\n\n\n[ string ]\n\n\n\n\nNo\n\n\n\n\n\n\nrequiredFiles\n\n\n[ string ]\n\n\n\n\nNo\n\n\n\n\n\n\npresignedUrlExpiresInSeconds\n\n\ninteger\n\n\n\n\nNo\n\n\n\n\n\n\n\n\nTemplateList\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nresults\n\n\n[ \nTemplateSummary\n ]\n\n\n\n\nNo\n\n\n\n\n\n\npagination\n\n\nobject\n\n\n\n\nNo\n\n\n\n\n\n\n\n\nCommand\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\ncommandId\n\n\nstring\n\n\n\n\nNo\n\n\n\n\n\n\ntemplateId\n\n\nstring\n\n\n\n\nNo\n\n\n\n\n\n\nstatus\n\n\nstring\n\n\n\n\nNo\n\n\n\n\n\n\ntargets\n\n\n[ string ]\n\n\n\n\nNo\n\n\n\n\n\n\ntargetQuery\n\n\nobject\n\n\n\n\nNo\n\n\n\n\n\n\ndocumentParameters\n\n\nobject\n\n\n\n\nNo\n\n\n\n\n\n\nfiles\n\n\nobject\n\n\n\n\nNo\n\n\n\n\n\n\ntype\n\n\nstring\n\n\n\n\nNo\n\n\n\n\n\n\nrolloutMaximumPerMinute\n\n\nundefined (integer)\n\n\n\n\nNo\n\n\n\n\n\n\njobId\n\n\nstring\n\n\n\n\nNo\n\n\n\n\n\n\n\n\nFile\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nbucketName\n\n\nstring\n\n\n\n\nNo\n\n\n\n\n\n\ns3ObjectKey\n\n\nstring\n\n\n\n\nNo\n\n\n\n\n\n\n\n\nCommandList\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nresults\n\n\n[ \nCommand\n ]\n\n\n\n\nNo\n\n\n\n\n\n\npagination\n\n\nobject\n\n\n\n\nNo\n\n\n\n\n\n\n\n\nExecution\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nthingName\n\n\nstring\n\n\n\n\nNo\n\n\n\n\n\n\ncreatedAt\n\n\nstring\n\n\n\n\nNo\n\n\n\n\n\n\nlastUpdatedAt\n\n\nstring\n\n\n\n\nNo\n\n\n\n\n\n\nqueuedAt\n\n\nstring\n\n\n\n\nNo\n\n\n\n\n\n\nstartedAt\n\n\nstring\n\n\n\n\nNo\n\n\n\n\n\n\nstatus\n\n\nstring\n\n\n\n\nNo\n\n\n\n\n\n\npercentComplete\n\n\nnumber\n\n\n\n\nNo\n\n\n\n\n\n\n\n\nExecutionList\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nexecutions\n\n\n[ \nExecution\n ]\n\n\n\n\nNo\n\n\n\n\n\n\n\n\nExecutionSummary\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nthingName\n\n\nstring\n\n\n\n\nNo\n\n\n\n\n\n\nstatus\n\n\nstring\n\n\n\n\nNo\n\n\n\n\n\n\n\n\nExecutionSummaryList\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nexecutions\n\n\n[ \nExecutionSummary\n ]\n\n\n\n\nNo\n\n\n\n\n\n\n\n\nError\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nerror\n\n\nstring\n\n\n\n\nNo", 
            "title": "Connected Device Framework: Commands Service"
        }, 
        {
            "location": "/projects/commands/commands-swagger/#connected-device-framework-commands-service", 
            "text": "", 
            "title": "Connected Device Framework: Commands Service"
        }, 
        {
            "location": "/projects/commands/commands-swagger/#version-100", 
            "text": "", 
            "title": "Version: 1.0.0"
        }, 
        {
            "location": "/projects/commands/commands-swagger/#templates", 
            "text": "", 
            "title": "/templates"
        }, 
        {
            "location": "/projects/commands/commands-swagger/#post", 
            "text": "", 
            "title": "POST"
        }, 
        {
            "location": "/projects/commands/commands-swagger/#summary", 
            "text": "Registers a new job template.", 
            "title": "Summary:"
        }, 
        {
            "location": "/projects/commands/commands-swagger/#parameters", 
            "text": "Name  Located in  Description  Required  Schema      body  body   Yes  Template", 
            "title": "Parameters"
        }, 
        {
            "location": "/projects/commands/commands-swagger/#responses", 
            "text": "Code  Description  Schema      201      400      409  Template already exists  Conflict    500", 
            "title": "Responses"
        }, 
        {
            "location": "/projects/commands/commands-swagger/#get", 
            "text": "", 
            "title": "GET"
        }, 
        {
            "location": "/projects/commands/commands-swagger/#summary_1", 
            "text": "Returns a list of all job templates", 
            "title": "Summary:"
        }, 
        {
            "location": "/projects/commands/commands-swagger/#responses_1", 
            "text": "Code  Description  Schema      200  Success  TemplateList    500", 
            "title": "Responses"
        }, 
        {
            "location": "/projects/commands/commands-swagger/#templatestemplateid", 
            "text": "", 
            "title": "/templates/{templateId}"
        }, 
        {
            "location": "/projects/commands/commands-swagger/#get_1", 
            "text": "", 
            "title": "GET"
        }, 
        {
            "location": "/projects/commands/commands-swagger/#summary_2", 
            "text": "Returns a specific template", 
            "title": "Summary:"
        }, 
        {
            "location": "/projects/commands/commands-swagger/#parameters_1", 
            "text": "Name  Located in  Description  Required  Schema      templateId  path  ID of job template  Yes  string", 
            "title": "Parameters"
        }, 
        {
            "location": "/projects/commands/commands-swagger/#responses_2", 
            "text": "Code  Description  Schema      200  Success  Template    400      404      500", 
            "title": "Responses"
        }, 
        {
            "location": "/projects/commands/commands-swagger/#patch", 
            "text": "", 
            "title": "PATCH"
        }, 
        {
            "location": "/projects/commands/commands-swagger/#summary_3", 
            "text": "Updates a specific template", 
            "title": "Summary:"
        }, 
        {
            "location": "/projects/commands/commands-swagger/#parameters_2", 
            "text": "Name  Located in  Description  Required  Schema      templateId  path  ID of job template  Yes  string    body  body   Yes  Template", 
            "title": "Parameters"
        }, 
        {
            "location": "/projects/commands/commands-swagger/#responses_3", 
            "text": "Code  Description      204  Success    400     404     500", 
            "title": "Responses"
        }, 
        {
            "location": "/projects/commands/commands-swagger/#delete", 
            "text": "", 
            "title": "DELETE"
        }, 
        {
            "location": "/projects/commands/commands-swagger/#summary_4", 
            "text": "Deleets a specific template", 
            "title": "Summary:"
        }, 
        {
            "location": "/projects/commands/commands-swagger/#parameters_3", 
            "text": "Name  Located in  Description  Required  Schema      templateId  path  ID of job template  Yes  string", 
            "title": "Parameters"
        }, 
        {
            "location": "/projects/commands/commands-swagger/#responses_4", 
            "text": "Code  Description      204  Success    400     500", 
            "title": "Responses"
        }, 
        {
            "location": "/projects/commands/commands-swagger/#commands", 
            "text": "", 
            "title": "/commands"
        }, 
        {
            "location": "/projects/commands/commands-swagger/#post_1", 
            "text": "", 
            "title": "POST"
        }, 
        {
            "location": "/projects/commands/commands-swagger/#summary_5", 
            "text": "Submits a new command.", 
            "title": "Summary:"
        }, 
        {
            "location": "/projects/commands/commands-swagger/#parameters_4", 
            "text": "Name  Located in  Description  Required  Schema      body  body   Yes  Command", 
            "title": "Parameters"
        }, 
        {
            "location": "/projects/commands/commands-swagger/#responses_5", 
            "text": "Code  Description      201     400", 
            "title": "Responses"
        }, 
        {
            "location": "/projects/commands/commands-swagger/#get_2", 
            "text": "", 
            "title": "GET"
        }, 
        {
            "location": "/projects/commands/commands-swagger/#summary_6", 
            "text": "Returns a list of all commands", 
            "title": "Summary:"
        }, 
        {
            "location": "/projects/commands/commands-swagger/#parameters_5", 
            "text": "Name  Located in  Description  Required  Schema      status  query   No  string", 
            "title": "Parameters"
        }, 
        {
            "location": "/projects/commands/commands-swagger/#responses_6", 
            "text": "Code  Description  Schema      200  OK  CommandList    400      404", 
            "title": "Responses"
        }, 
        {
            "location": "/projects/commands/commands-swagger/#commandscommandid", 
            "text": "", 
            "title": "/commands/{commandId}"
        }, 
        {
            "location": "/projects/commands/commands-swagger/#get_3", 
            "text": "", 
            "title": "GET"
        }, 
        {
            "location": "/projects/commands/commands-swagger/#summary_7", 
            "text": "Returns a specific command", 
            "title": "Summary:"
        }, 
        {
            "location": "/projects/commands/commands-swagger/#parameters_6", 
            "text": "Name  Located in  Description  Required  Schema      commandId  path  ID of command  Yes  string", 
            "title": "Parameters"
        }, 
        {
            "location": "/projects/commands/commands-swagger/#responses_7", 
            "text": "Code  Description  Schema      200  OK  Command    400      404", 
            "title": "Responses"
        }, 
        {
            "location": "/projects/commands/commands-swagger/#patch_1", 
            "text": "", 
            "title": "PATCH"
        }, 
        {
            "location": "/projects/commands/commands-swagger/#summary_8", 
            "text": "Updates a specific command, including setting its status to  in_progress  to start the command.", 
            "title": "Summary:"
        }, 
        {
            "location": "/projects/commands/commands-swagger/#parameters_7", 
            "text": "Name  Located in  Description  Required  Schema      commandId  path  ID of command  Yes  string    body  body   Yes  Command", 
            "title": "Parameters"
        }, 
        {
            "location": "/projects/commands/commands-swagger/#responses_8", 
            "text": "Code  Description      204  OK    400     404", 
            "title": "Responses"
        }, 
        {
            "location": "/projects/commands/commands-swagger/#commandscommandidfilesfileid", 
            "text": "", 
            "title": "/commands/{commandId}/files/{fileId}"
        }, 
        {
            "location": "/projects/commands/commands-swagger/#put", 
            "text": "", 
            "title": "PUT"
        }, 
        {
            "location": "/projects/commands/commands-swagger/#summary_9", 
            "text": "Uploads a file required for the command", 
            "title": "Summary:"
        }, 
        {
            "location": "/projects/commands/commands-swagger/#parameters_8", 
            "text": "Name  Located in  Description  Required  Schema      commandId  path  ID of command  Yes  string    fileId  path  ID of file as defined in the templates  requiredFiles  attribute  Yes  string    file  formData   No  file", 
            "title": "Parameters"
        }, 
        {
            "location": "/projects/commands/commands-swagger/#responses_9", 
            "text": "Code  Description      201     400", 
            "title": "Responses"
        }, 
        {
            "location": "/projects/commands/commands-swagger/#delete_1", 
            "text": "", 
            "title": "DELETE"
        }, 
        {
            "location": "/projects/commands/commands-swagger/#summary_10", 
            "text": "Removes a file from the command", 
            "title": "Summary:"
        }, 
        {
            "location": "/projects/commands/commands-swagger/#parameters_9", 
            "text": "Name  Located in  Description  Required  Schema      commandId  path  ID of command  Yes  string    fileId  path  ID of file as defined in the templates  requiredFiles  attribute  Yes  string", 
            "title": "Parameters"
        }, 
        {
            "location": "/projects/commands/commands-swagger/#responses_10", 
            "text": "Code  Description      204  OK    400     404", 
            "title": "Responses"
        }, 
        {
            "location": "/projects/commands/commands-swagger/#commandscommandidexecutions", 
            "text": "", 
            "title": "/commands/{commandId}/executions"
        }, 
        {
            "location": "/projects/commands/commands-swagger/#get_4", 
            "text": "", 
            "title": "GET"
        }, 
        {
            "location": "/projects/commands/commands-swagger/#summary_11", 
            "text": "Lists the executions of a command", 
            "title": "Summary:"
        }, 
        {
            "location": "/projects/commands/commands-swagger/#parameters_10", 
            "text": "Name  Located in  Description  Required  Schema      commandId  path  ID of command  Yes  string    status  query   No  string", 
            "title": "Parameters"
        }, 
        {
            "location": "/projects/commands/commands-swagger/#responses_11", 
            "text": "Code  Description  Schema      200  OK  ExecutionSummaryList    400      404", 
            "title": "Responses"
        }, 
        {
            "location": "/projects/commands/commands-swagger/#commandscommandidexecutionsthingname", 
            "text": "", 
            "title": "/commands/{commandId}/executions/{thingName}"
        }, 
        {
            "location": "/projects/commands/commands-swagger/#get_5", 
            "text": "", 
            "title": "GET"
        }, 
        {
            "location": "/projects/commands/commands-swagger/#summary_12", 
            "text": "Returns execution details of a specific command for a specific thing", 
            "title": "Summary:"
        }, 
        {
            "location": "/projects/commands/commands-swagger/#parameters_11", 
            "text": "Name  Located in  Description  Required  Schema      commandId  path  ID of command  Yes  string    thingName  path  Name of thing  Yes  string", 
            "title": "Parameters"
        }, 
        {
            "location": "/projects/commands/commands-swagger/#responses_12", 
            "text": "Code  Description  Schema      200  OK  ExecutionList    400      404", 
            "title": "Responses"
        }, 
        {
            "location": "/projects/commands/commands-swagger/#delete_2", 
            "text": "", 
            "title": "DELETE"
        }, 
        {
            "location": "/projects/commands/commands-swagger/#summary_13", 
            "text": "Cancels an execution for a specific thing", 
            "title": "Summary:"
        }, 
        {
            "location": "/projects/commands/commands-swagger/#parameters_12", 
            "text": "Name  Located in  Description  Required  Schema      commandId  path  ID of command  Yes  string    thingName  path  Name of thing  Yes  string", 
            "title": "Parameters"
        }, 
        {
            "location": "/projects/commands/commands-swagger/#responses_13", 
            "text": "Code  Description      204  OK    400     404", 
            "title": "Responses"
        }, 
        {
            "location": "/projects/commands/commands-swagger/#models", 
            "text": "", 
            "title": "Models"
        }, 
        {
            "location": "/projects/commands/commands-swagger/#templatesummary", 
            "text": "Name  Type  Description  Required      templateId  string   No    description  string   No", 
            "title": "TemplateSummary"
        }, 
        {
            "location": "/projects/commands/commands-swagger/#template", 
            "text": "Name  Type  Description  Required      templateId  string   No    operation  string   No    description  string   No    document  string   No    requiredDocumentParameters  [ string ]   No    requiredFiles  [ string ]   No    presignedUrlExpiresInSeconds  integer   No", 
            "title": "Template"
        }, 
        {
            "location": "/projects/commands/commands-swagger/#templatelist", 
            "text": "Name  Type  Description  Required      results  [  TemplateSummary  ]   No    pagination  object   No", 
            "title": "TemplateList"
        }, 
        {
            "location": "/projects/commands/commands-swagger/#command", 
            "text": "Name  Type  Description  Required      commandId  string   No    templateId  string   No    status  string   No    targets  [ string ]   No    targetQuery  object   No    documentParameters  object   No    files  object   No    type  string   No    rolloutMaximumPerMinute  undefined (integer)   No    jobId  string   No", 
            "title": "Command"
        }, 
        {
            "location": "/projects/commands/commands-swagger/#file", 
            "text": "Name  Type  Description  Required      bucketName  string   No    s3ObjectKey  string   No", 
            "title": "File"
        }, 
        {
            "location": "/projects/commands/commands-swagger/#commandlist", 
            "text": "Name  Type  Description  Required      results  [  Command  ]   No    pagination  object   No", 
            "title": "CommandList"
        }, 
        {
            "location": "/projects/commands/commands-swagger/#execution", 
            "text": "Name  Type  Description  Required      thingName  string   No    createdAt  string   No    lastUpdatedAt  string   No    queuedAt  string   No    startedAt  string   No    status  string   No    percentComplete  number   No", 
            "title": "Execution"
        }, 
        {
            "location": "/projects/commands/commands-swagger/#executionlist", 
            "text": "Name  Type  Description  Required      executions  [  Execution  ]   No", 
            "title": "ExecutionList"
        }, 
        {
            "location": "/projects/commands/commands-swagger/#executionsummary", 
            "text": "Name  Type  Description  Required      thingName  string   No    status  string   No", 
            "title": "ExecutionSummary"
        }, 
        {
            "location": "/projects/commands/commands-swagger/#executionsummarylist", 
            "text": "Name  Type  Description  Required      executions  [  ExecutionSummary  ]   No", 
            "title": "ExecutionSummaryList"
        }, 
        {
            "location": "/projects/commands/commands-swagger/#error", 
            "text": "Name  Type  Description  Required      error  string   No", 
            "title": "Error"
        }, 
        {
            "location": "/projects/commands/ephemeral-groups/", 
            "text": "COMMANDS TARGETS\n\n\nIntroduction\n\n\nDevices within the CDF platform are identified by a \ndeviceId\n and grouped in hierarchies.  This structure is managed by the \nCDF Asset Library\n service.\n\n\nWhen creating commands to be executed by a device, a list of targets is required.  These targets may comprise of CDF devices, CDF groups, AWS IoT thing ARN's, and/or AWS IoT group ARN's.\n\n\nAWS IoT Service Limitations\n\n\nAWS IoT has the following service limitations which are of importance here:\n\n\n\n\n\n\n\n\nService\n\n\nAction\n\n\nLimit\n\n\n\n\n\n\n\n\n\n\nJobs\n\n\nMax. no. targets\n\n\n100\n\n\n\n\n\n\nThings\n\n\nMax. groups membership\n\n\n10\n\n\n\n\n\n\nThings\n\n\nGroup membership\n\n\nA Thing cannot belong to multiple grups that share a common ancestor\n\n\n\n\n\n\n\n\nCommand / Job Targets\n\n\nWhen a command is published, an \nAWS IoT Job\n is created to broadcast the command to the device for execution.  The Thing ARN's are identified based on the target type provided as follows:\n\n\n\n\n\n\n\n\nTarget Type\n\n\nAction\n\n\n\n\n\n\n\n\n\n\nCDF Asset Library group\n\n\nThe Thing ARN's of all active devices associated with the group are retrieved\n\n\n\n\n\n\nCDF Asset Library device\n\n\nThe Thing ARN is retrieved for the device\n\n\n\n\n\n\nThing ARN\n\n\nThe Thing ARN is used directly\n\n\n\n\n\n\nThing Group ARN\n\n\nThe Thing Group ARN is used directly\n\n\n\n\n\n\n\n\nIf the total number of target Thing ARN's identified above exceeds the maximum allowed for a job, an ephemeral group is created to encompass the ARN's as the job target.  Thing Group ARN's are intentionally not expanded in this way - if the number of provided Thing Group ARN's exceeds the maximum allowed targets for a Job, a validation error is thrown.\n\n\nJob LifeCycle Events\n\n\nWhen jobs are completed or cancelled, messages are sent to the following MQTT reserved topics:\n\n\n$aws\n/events/job/jobID/completed\n\n$aws\n/events/job/jobID/canceled\n\n\n\n\nUpon cancellation/completion, if an ephemeral group was created for the Job, it is automatically deleted by the \nCDF Commands\n service.", 
            "title": "COMMANDS TARGETS"
        }, 
        {
            "location": "/projects/commands/ephemeral-groups/#commands-targets", 
            "text": "", 
            "title": "COMMANDS TARGETS"
        }, 
        {
            "location": "/projects/commands/ephemeral-groups/#introduction", 
            "text": "Devices within the CDF platform are identified by a  deviceId  and grouped in hierarchies.  This structure is managed by the  CDF Asset Library  service.  When creating commands to be executed by a device, a list of targets is required.  These targets may comprise of CDF devices, CDF groups, AWS IoT thing ARN's, and/or AWS IoT group ARN's.", 
            "title": "Introduction"
        }, 
        {
            "location": "/projects/commands/ephemeral-groups/#aws-iot-service-limitations", 
            "text": "AWS IoT has the following service limitations which are of importance here:     Service  Action  Limit      Jobs  Max. no. targets  100    Things  Max. groups membership  10    Things  Group membership  A Thing cannot belong to multiple grups that share a common ancestor", 
            "title": "AWS IoT Service Limitations"
        }, 
        {
            "location": "/projects/commands/ephemeral-groups/#command-job-targets", 
            "text": "When a command is published, an  AWS IoT Job  is created to broadcast the command to the device for execution.  The Thing ARN's are identified based on the target type provided as follows:     Target Type  Action      CDF Asset Library group  The Thing ARN's of all active devices associated with the group are retrieved    CDF Asset Library device  The Thing ARN is retrieved for the device    Thing ARN  The Thing ARN is used directly    Thing Group ARN  The Thing Group ARN is used directly     If the total number of target Thing ARN's identified above exceeds the maximum allowed for a job, an ephemeral group is created to encompass the ARN's as the job target.  Thing Group ARN's are intentionally not expanded in this way - if the number of provided Thing Group ARN's exceeds the maximum allowed targets for a Job, a validation error is thrown.", 
            "title": "Command / Job Targets"
        }, 
        {
            "location": "/projects/commands/ephemeral-groups/#job-lifecycle-events", 
            "text": "When jobs are completed or cancelled, messages are sent to the following MQTT reserved topics:  $aws /events/job/jobID/completed $aws /events/job/jobID/canceled  Upon cancellation/completion, if an ephemeral group was created for the Job, it is automatically deleted by the  CDF Commands  service.", 
            "title": "Job LifeCycle Events"
        }, 
        {
            "location": "/projects/commands/overview/", 
            "text": "COMMANDS REST API\n\n\nIntroduction\n\n\nThe commands service utilizes \nAWS IoT Jobs\n to issue commands to a device or set of devices, and optionally inspect their execution status.  It augments AWS IoT jobs by providing the ability to create Job templates, and enforcing that each requested command adheres to a template before executing.", 
            "title": "COMMANDS REST API"
        }, 
        {
            "location": "/projects/commands/overview/#commands-rest-api", 
            "text": "", 
            "title": "COMMANDS REST API"
        }, 
        {
            "location": "/projects/commands/overview/#introduction", 
            "text": "The commands service utilizes  AWS IoT Jobs  to issue commands to a device or set of devices, and optionally inspect their execution status.  It augments AWS IoT jobs by providing the ability to create Job templates, and enforcing that each requested command adheres to a template before executing.", 
            "title": "Introduction"
        }, 
        {
            "location": "/projects/commands/presigned-urls-developer/", 
            "text": "COMMANDS PRE-SIGNED URLS\n\n\nIntroduction\n\n\nAs part of defining a command template within the commands service, pre-signed urls can be configured to provide a secure way to download files.  In addition, command templates can be configured to allow for devices to request pre-signed urls to upload content relevant to the command.  Refer to the \nPresigned Urls (User)\n page for a description of the functionality offered by pre-signed urls.  This page focuses on its design and implementation.\n\n\nMQTT Listener\n\n\nRequests for refreshing expired pre-signed urls are sent from the device to specific MQTT topics.  As there may be many instances of the commands service running, we need to ensure that the request is normally handled just once (possible to be handled at least once).  To handle this, an AWS IoT Rule subscribes to these request topics, extracts the \nthingName\n from the topic structure, and forwards the request to an instance of the \nPre-signed Service\n of the commands service.\n\n\nSecurity\n\n\nWhen a device is requesting a pre-signed url, the commands service validates that the device is part of the command in context.\n\n\nIf the request is for downloading a file, only the files originally provided along with the command (via its file alias) may be requested.\n\n\nIf the request is for uploading a file, the pre-signed urls are generated for files located within the \n${aws.s3.bucket}:${aws.s3.prefix}commands/{commandId}/uploads/{thingName}/\n key.", 
            "title": "COMMANDS PRE-SIGNED URLS"
        }, 
        {
            "location": "/projects/commands/presigned-urls-developer/#commands-pre-signed-urls", 
            "text": "", 
            "title": "COMMANDS PRE-SIGNED URLS"
        }, 
        {
            "location": "/projects/commands/presigned-urls-developer/#introduction", 
            "text": "As part of defining a command template within the commands service, pre-signed urls can be configured to provide a secure way to download files.  In addition, command templates can be configured to allow for devices to request pre-signed urls to upload content relevant to the command.  Refer to the  Presigned Urls (User)  page for a description of the functionality offered by pre-signed urls.  This page focuses on its design and implementation.", 
            "title": "Introduction"
        }, 
        {
            "location": "/projects/commands/presigned-urls-developer/#mqtt-listener", 
            "text": "Requests for refreshing expired pre-signed urls are sent from the device to specific MQTT topics.  As there may be many instances of the commands service running, we need to ensure that the request is normally handled just once (possible to be handled at least once).  To handle this, an AWS IoT Rule subscribes to these request topics, extracts the  thingName  from the topic structure, and forwards the request to an instance of the  Pre-signed Service  of the commands service.", 
            "title": "MQTT Listener"
        }, 
        {
            "location": "/projects/commands/presigned-urls-developer/#security", 
            "text": "When a device is requesting a pre-signed url, the commands service validates that the device is part of the command in context.  If the request is for downloading a file, only the files originally provided along with the command (via its file alias) may be requested.  If the request is for uploading a file, the pre-signed urls are generated for files located within the  ${aws.s3.bucket}:${aws.s3.prefix}commands/{commandId}/uploads/{thingName}/  key.", 
            "title": "Security"
        }, 
        {
            "location": "/projects/commands/presigned-urls-user/", 
            "text": "COMMANDS PRE-SIGNED URLS\n\n\nIntroduction\n\n\nAs part of defining a command template within the commands service, pre-signed urls can be configured to provide a secure way to download files.  In addition, command templates can be configured to allow for devices to request pre-signed urls to upload content relevant to the command.\n\n\nEnabling Downloading Of Files\n\n\nThe following represents a command template that requires the file with alias \nfile001\n to be provided as part of the command:\n\n\n{\n\n    \ntemplateId\n:\n \nExampleTemplate\n,\n\n    \ndescription\n:\n \nAn example template allowing a file to be downloaded\n,\n\n    \ndocument\n:\n \n{\\\noperation\\\n:\\\nExampleCommand\\\n, \\\nfile001\\\n:\\\n${cdf:file:file001}\\\n}\n,\n\n    \nrequiredFiles\n:\n \n[\n\n        \nfile001\n\n    \n],\n\n    \npresignedUrlExpiresInSeconds\n:\n \n3600\n\n\n}\n\n\n\n\n\nIt is recommended that the name of the attribute representing the file in the document json is named the same as the file alias (\nfile001\n in the above template).  This will make it easier for a device to request a new pre-signed url for a file should the pre-signed url expire.\n\n\nWhen a command is created from the above template, and then published, a pre-signed url will be provided for \nfile001\n that expires as configured by \npresignedUrlExpiresInSeconds\n.\n\n\nThe required file \nfile001\n may be uploaded directly after creating a command, or alternatively a path to an existing file stored on S3 may be provided:\n\n\nProviding Files For Download\n\n\nPUT /commands/{commandId}/files/file001 HTTP/1.1\nAccept: application/vnd.aws-cdf-v1.0+json\nContent-Type: multipart/form-data; boundary=----WebKitFormBoundary7MA4YWxkTrZu0gW\n\n------WebKitFormBoundary7MA4YWxkTrZu0gW\nContent-Disposition: form-data; name=\nfile\n; filename=\nmyfile.txt\n\nContent-Type: text/plain\n\n\n------WebKitFormBoundary7MA4YWxkTrZu0gW--\n\n\n\n\nIn this scenario the file will be uploaded to \n${aws.s3.bucket}:${aws.s3.prefix}commands/{commandId}/files/{fileAlias}\n.\n\n\nProviding the path to a pre-existing S3 file for download\n\n\nPUT /commands/{commandId}/files/file001 HTTP/1.1\nAccept: application/vnd.aws-cdf-v1.0+json\nContent-Type: multipart/form-data; boundary=----WebKitFormBoundary7MA4YWxkTrZu0gW\n\n------WebKitFormBoundary7MA4YWxkTrZu0gW\nContent-Disposition: form-data; name=\ns3BucketName\n\n\nmyBucket\n\n------WebKitFormBoundary7MA4YWxkTrZu0gW\nContent-Disposition: form-data; name=\ns3ObjectKey\n\n\npath/to/my/file\n\n\n------WebKitFormBoundary7MA4YWxkTrZu0gW--\n\n\n\n\nEnabling Uploading Files From A Device\n\n\nFirst, to allow file uploads by a device, the command template must be configured as follows:\n\n\n{\n\n    \ntemplateId\n:\n \nExampleTemplate\n,\n\n    \ndescription\n:\n \nAn example template allowing files uploaded\n,\n\n    \ndocument\n:\n \n{\\\noperation\\\n:\\\nExampleCommand\\\n}\n,\n\n    \nallowFileUploads\n:\n \ntrue\n,\n\n    \npresignedUrlExpiresInSeconds\n:\n \n3600\n\n\n}\n\n\n\n\n\nWhen files are uploaded from a device, they are stored within the root key \n${aws.s3.bucket}:${aws.s3.prefix}commands/{commandId}/uploads/{thingName}\n.\n\n\nUploading Files From A Device\n\n\nAs pre-signed urls are generated per file, and the specific files to be uploaded may only be known by a device at time of execution, a mechanism to allow devices to request pre-signed urls (via mqtt) for file upload is provided is follows:\n\n\nStep 1:  Set up the subscription to receive a response before making the request itself:\n\n\ncdf/commands/presignedurl/{commandId}/{thingName}/uploads/accepted\ncdf/commands/presignedurl/{commandId}/{thingName}/uploads/rejected\n\n\n\n\nStep 2:  Publish a request for a new pre-signed urls:\n\n\ncdf/commands/presignedurl/{commandId}/{thingName}/uploads\n\n\n\n\nThe request payload:\n\n\n{\n\n    \nrequestedObjectKeys\n:\n \n[\nrelative/path/to/my/file\n]\n\n\n}\n\n\n\n\n\nStep 3:  Receiving the pre-signed urls:\n\n\nA response will be published to the accepted/rejected topics that the device subscribed to in step 1 as follows:\n\n\n{\n\n    \nthingName\n:\n \nesdn\n,\n\n    \ncommandId\n:\n \ncommandId\n,\n\n    \nstatus\n:\n \nFAILED|SUCCESS\n,\n\n    \npresignedUrls\n:\n \n{\n\n        \nrelative/path/to/my/file\n:\n \n{pre-signed url}\n\n    \n}\n\n\n}\n\n\n\n\n\nThe attribute \npresignedUrls\n is a map, where each of its keys correponds to one of the requested object keys.\n\n\nThe relative path provided as \nrequestedObjectKey\n is stored within \n${aws.s3.bucket}:${aws.s3.prefix}commands/{commandId}/uploads/{thingName}\n.\n\n\nRefreshing Pre-signed Urls From A Device\n\n\nPre-signed urls expire based on their configured \npresignedUrlExpiresInSeconds\n.  It is possible to determine if a pre-signed url is expired before attempting to use by checking its \nX-Amz-Date\n query string parameter.  If the pre-signed url expires during use, a \n403 Forbidden\n http response code is returned.\n\n\nDevices may only request pre-signed urls for content associated with commands that they are part of.\n\n\nTo request a new pre-signed url for a file to upload, make the same MQTT request as described in the \nUploading Files\n section.\n\n\nTo request a new pre-signed url for a file to download, perform the following steps:\n\n\nStep 1:  Set up the subscription to receive a response before making the request itself:\n\n\ncdf/commands/presignedurl/{commandId}/{thingName}/downloads/accepted\ncdf/commands/presignedurl/{commandId}/{thingName}/downloads/rejected\n\n\n\n\nStep 2:  Publish a request for a new pre-signed url:\n\n\ncdf/commands/presignedurl/{commandId}/{thingName}/downloads\n\n\n\n\nThe request payload:\n\n\n{\n\n    \nrequestedFileAliases\n:\n \n[\nfile001\n]\n\n\n}\n\n\n\n\n\nStep 3:  Receiving the pre-signed urls:\n\n\nA response will be published to the accepted/rejected topics that the device subscribed to in step 1 as follows:\n\n\n{\n\n    \nthingName\n:\n \nesdn\n,\n\n    \ncommandId\n:\n \ncommandId\n,\n\n    \nstatus\n:\n \nFAILED|SUCCESS\n,\n\n    \npresignedUrls\n:\n \n{\n\n        \nfile001\n:\n \n{pre-signed url}\n\n    \n}\n\n\n}\n\n\n\n\n\nThe attribute \npresignedUrls\n is a map, where each of its keys correponds to one of the requested file aliases.", 
            "title": "COMMANDS PRE-SIGNED URLS"
        }, 
        {
            "location": "/projects/commands/presigned-urls-user/#commands-pre-signed-urls", 
            "text": "", 
            "title": "COMMANDS PRE-SIGNED URLS"
        }, 
        {
            "location": "/projects/commands/presigned-urls-user/#introduction", 
            "text": "As part of defining a command template within the commands service, pre-signed urls can be configured to provide a secure way to download files.  In addition, command templates can be configured to allow for devices to request pre-signed urls to upload content relevant to the command.", 
            "title": "Introduction"
        }, 
        {
            "location": "/projects/commands/presigned-urls-user/#enabling-downloading-of-files", 
            "text": "The following represents a command template that requires the file with alias  file001  to be provided as part of the command:  { \n     templateId :   ExampleTemplate , \n     description :   An example template allowing a file to be downloaded , \n     document :   {\\ operation\\ :\\ ExampleCommand\\ , \\ file001\\ :\\ ${cdf:file:file001}\\ } , \n     requiredFiles :   [ \n         file001 \n     ], \n     presignedUrlExpiresInSeconds :   3600  }   It is recommended that the name of the attribute representing the file in the document json is named the same as the file alias ( file001  in the above template).  This will make it easier for a device to request a new pre-signed url for a file should the pre-signed url expire.  When a command is created from the above template, and then published, a pre-signed url will be provided for  file001  that expires as configured by  presignedUrlExpiresInSeconds .  The required file  file001  may be uploaded directly after creating a command, or alternatively a path to an existing file stored on S3 may be provided:", 
            "title": "Enabling Downloading Of Files"
        }, 
        {
            "location": "/projects/commands/presigned-urls-user/#providing-files-for-download", 
            "text": "PUT /commands/{commandId}/files/file001 HTTP/1.1\nAccept: application/vnd.aws-cdf-v1.0+json\nContent-Type: multipart/form-data; boundary=----WebKitFormBoundary7MA4YWxkTrZu0gW\n\n------WebKitFormBoundary7MA4YWxkTrZu0gW\nContent-Disposition: form-data; name= file ; filename= myfile.txt \nContent-Type: text/plain\n\n\n------WebKitFormBoundary7MA4YWxkTrZu0gW--  In this scenario the file will be uploaded to  ${aws.s3.bucket}:${aws.s3.prefix}commands/{commandId}/files/{fileAlias} .", 
            "title": "Providing Files For Download"
        }, 
        {
            "location": "/projects/commands/presigned-urls-user/#providing-the-path-to-a-pre-existing-s3-file-for-download", 
            "text": "PUT /commands/{commandId}/files/file001 HTTP/1.1\nAccept: application/vnd.aws-cdf-v1.0+json\nContent-Type: multipart/form-data; boundary=----WebKitFormBoundary7MA4YWxkTrZu0gW\n\n------WebKitFormBoundary7MA4YWxkTrZu0gW\nContent-Disposition: form-data; name= s3BucketName \n\nmyBucket\n\n------WebKitFormBoundary7MA4YWxkTrZu0gW\nContent-Disposition: form-data; name= s3ObjectKey \n\npath/to/my/file\n\n\n------WebKitFormBoundary7MA4YWxkTrZu0gW--", 
            "title": "Providing the path to a pre-existing S3 file for download"
        }, 
        {
            "location": "/projects/commands/presigned-urls-user/#enabling-uploading-files-from-a-device", 
            "text": "First, to allow file uploads by a device, the command template must be configured as follows:  { \n     templateId :   ExampleTemplate , \n     description :   An example template allowing files uploaded , \n     document :   {\\ operation\\ :\\ ExampleCommand\\ } , \n     allowFileUploads :   true , \n     presignedUrlExpiresInSeconds :   3600  }   When files are uploaded from a device, they are stored within the root key  ${aws.s3.bucket}:${aws.s3.prefix}commands/{commandId}/uploads/{thingName} .", 
            "title": "Enabling Uploading Files From A Device"
        }, 
        {
            "location": "/projects/commands/presigned-urls-user/#uploading-files-from-a-device", 
            "text": "As pre-signed urls are generated per file, and the specific files to be uploaded may only be known by a device at time of execution, a mechanism to allow devices to request pre-signed urls (via mqtt) for file upload is provided is follows:  Step 1:  Set up the subscription to receive a response before making the request itself:  cdf/commands/presignedurl/{commandId}/{thingName}/uploads/accepted\ncdf/commands/presignedurl/{commandId}/{thingName}/uploads/rejected  Step 2:  Publish a request for a new pre-signed urls:  cdf/commands/presignedurl/{commandId}/{thingName}/uploads  The request payload:  { \n     requestedObjectKeys :   [ relative/path/to/my/file ]  }   Step 3:  Receiving the pre-signed urls:  A response will be published to the accepted/rejected topics that the device subscribed to in step 1 as follows:  { \n     thingName :   esdn , \n     commandId :   commandId , \n     status :   FAILED|SUCCESS , \n     presignedUrls :   { \n         relative/path/to/my/file :   {pre-signed url} \n     }  }   The attribute  presignedUrls  is a map, where each of its keys correponds to one of the requested object keys.  The relative path provided as  requestedObjectKey  is stored within  ${aws.s3.bucket}:${aws.s3.prefix}commands/{commandId}/uploads/{thingName} .", 
            "title": "Uploading Files From A Device"
        }, 
        {
            "location": "/projects/commands/presigned-urls-user/#refreshing-pre-signed-urls-from-a-device", 
            "text": "Pre-signed urls expire based on their configured  presignedUrlExpiresInSeconds .  It is possible to determine if a pre-signed url is expired before attempting to use by checking its  X-Amz-Date  query string parameter.  If the pre-signed url expires during use, a  403 Forbidden  http response code is returned.  Devices may only request pre-signed urls for content associated with commands that they are part of.  To request a new pre-signed url for a file to upload, make the same MQTT request as described in the  Uploading Files  section.  To request a new pre-signed url for a file to download, perform the following steps:  Step 1:  Set up the subscription to receive a response before making the request itself:  cdf/commands/presignedurl/{commandId}/{thingName}/downloads/accepted\ncdf/commands/presignedurl/{commandId}/{thingName}/downloads/rejected  Step 2:  Publish a request for a new pre-signed url:  cdf/commands/presignedurl/{commandId}/{thingName}/downloads  The request payload:  { \n     requestedFileAliases :   [ file001 ]  }   Step 3:  Receiving the pre-signed urls:  A response will be published to the accepted/rejected topics that the device subscribed to in step 1 as follows:  { \n     thingName :   esdn , \n     commandId :   commandId , \n     status :   FAILED|SUCCESS , \n     presignedUrls :   { \n         file001 :   {pre-signed url} \n     }  }   The attribute  presignedUrls  is a map, where each of its keys correponds to one of the requested file aliases.", 
            "title": "Refreshing Pre-signed Urls From A Device"
        }, 
        {
            "location": "/projects/devicemonitoring/overview/", 
            "text": "Device Monitoring Service\n\n\nA device monitoring service provides near real-time device status - connected and disconnected.\n\n\nIntroduction\n\n\nThe device monitoring service utilizes \nAWS IoT Lifecycle Events\n feature. Whenever the device connects or disconnects, AWS IoT Core emits a smaple event that is then picked up by AWS Lambda. It parses the eventType and then updating the device attributes in Asset Library to connected as \ntrue\n or \nfalse\n\n\nThe following sample represents the schema that AWS IoT core emits when a device connects or disconnects\n\n\n{\n  \nEvent\n: {\n    \nclientId\n: \nclient123\n,\n    \ntimestamp\n: 1460065214626,\n    \neventType\n: \nconnected\n,\n    \nsessionIdentifier\n: \n00000000-0000-0000-0000-000000000000\n,\n    \nprincipalIdentifier\n: \n000000000000/ABCDEFGHIJKLMNOPQRSTU:some-user/ABCDEFGHIJKLMNOPQRSTU:some-user\n\n  }\n}", 
            "title": "Device Monitoring Service"
        }, 
        {
            "location": "/projects/devicemonitoring/overview/#device-monitoring-service", 
            "text": "A device monitoring service provides near real-time device status - connected and disconnected.", 
            "title": "Device Monitoring Service"
        }, 
        {
            "location": "/projects/devicemonitoring/overview/#introduction", 
            "text": "The device monitoring service utilizes  AWS IoT Lifecycle Events  feature. Whenever the device connects or disconnects, AWS IoT Core emits a smaple event that is then picked up by AWS Lambda. It parses the eventType and then updating the device attributes in Asset Library to connected as  true  or  false  The following sample represents the schema that AWS IoT core emits when a device connects or disconnects  {\n   Event : {\n     clientId :  client123 ,\n     timestamp : 1460065214626,\n     eventType :  connected ,\n     sessionIdentifier :  00000000-0000-0000-0000-000000000000 ,\n     principalIdentifier :  000000000000/ABCDEFGHIJKLMNOPQRSTU:some-user/ABCDEFGHIJKLMNOPQRSTU:some-user \n  }\n}", 
            "title": "Introduction"
        }, 
        {
            "location": "/projects/libraries/README/", 
            "text": "CDF Reusable Libraries\n\n\nThese are reusable libraries implementing common functionality needed by multiple CDF services\n\n\nOrganization\n\n\n\n\ncore : Core set of libraries, resuable across services\n\n\ndev : Libraries that may be needed for build/test activities but should not be included in deployments. These libraries will be part of 'devDependencies'\n\n\ndata : Set of libraries that provide functionality to interact with various data/config stores\n\n\nconfig : Set of libraries for CDF configuration interactions\n\n\nauth : Set of libraries for authn/authz functionality\n\n\n\n\nUsage\n\n\nAdd \"@cdf/library-name\": \"^1.0.0\" to the dependencies section of the package.json file\nAlternatively:\n\n\nnpm install @cdf/library-name\n\n\n\n\nIn the code, add the following statements:\n\n\nimport\n \n{\n \nCDFLibrary\n \n}\n \nfrom\n \n@cdf/library-name\n;", 
            "title": "CDF Reusable Libraries"
        }, 
        {
            "location": "/projects/libraries/README/#cdf-reusable-libraries", 
            "text": "These are reusable libraries implementing common functionality needed by multiple CDF services", 
            "title": "CDF Reusable Libraries"
        }, 
        {
            "location": "/projects/libraries/README/#organization", 
            "text": "core : Core set of libraries, resuable across services  dev : Libraries that may be needed for build/test activities but should not be included in deployments. These libraries will be part of 'devDependencies'  data : Set of libraries that provide functionality to interact with various data/config stores  config : Set of libraries for CDF configuration interactions  auth : Set of libraries for authn/authz functionality", 
            "title": "Organization"
        }, 
        {
            "location": "/projects/libraries/README/#usage", 
            "text": "Add \"@cdf/library-name\": \"^1.0.0\" to the dependencies section of the package.json file\nAlternatively:  npm install @cdf/library-name  In the code, add the following statements:  import   {   CDFLibrary   }   from   @cdf/library-name ;", 
            "title": "Usage"
        }, 
        {
            "location": "/projects/notifications/design/", 
            "text": "NOTIFICATIONS: Design\n\n\nThe CDF Notifications service is comprised of 2 micro-services:  the CDF Events Processor, and the CDF Events Alerts. \n\n\nHigh Level Architecture\n\n\n\n\nProcessing Pipeline\n\n\n\n\nEvents Processor\n\n\nThe Events Processor module is responsible for receiving events from external data sources, transforming to a common message format, filtering based on configured subscriptions, and finally storing the generated alerts for later forwarding by the Events Alerts module.\n\n\nThe Events Processor is implemented as a fat lambda, exposing a management REST API, along with multiple Lambda handler entry points for DynamoDB Stream triggers, and direct Lambda invocations.\n\n\nEvent definitions are defined which are comprised of the data sources to monitor, and the rule to apply.  Subscribers then create subscriptions for specific events occurring.  An example domain model:\n\n\n\n\nAPI\n\n\nThe following REST API endpoints are exposed to configure events sources, events, and to allow user's to manage their subscriptions:\n\n\nFor a full definition of the endpoint including a description of the parameters, request and response bodies, and examples, refer to the \nswagger definition\n.\n\n\n\n\n\n\n\n\nEndpoint\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nPOST /eventsources\n\n\nCreates a new event source, both the integration itself and its metadata\n\n\n\n\n\n\nGET /eventsources\n\n\nList all event sources\n\n\n\n\n\n\nGET /eventsources/{eventsourceId}\n\n\nReturns a specific event source\n\n\n\n\n\n\nDELETE /eventsources/{eventsourceId}\n\n\nDeletes a specific event source, along with all its associated events and subscriptions\n\n\n\n\n\n\nPOST /eventsources/{eventSourceId}/events\n\n\nDefines a new event\n\n\n\n\n\n\nGET /eventsources/{eventSourceId}/events\n\n\nLists all events for a specific event source\n\n\n\n\n\n\nGET /events/{eventId}\n\n\nReturns a specific event\n\n\n\n\n\n\nDELETE /events/{eventId}\n\n\nDeletes an specific event, along with all its related subscriptions\n\n\n\n\n\n\nPOST /events/{eventId}/subscriptions\n\n\nSubscribes to an event\n\n\n\n\n\n\nGET /events/{eventId}/subscriptions\n\n\nLists all subscriptions for a specific event\n\n\n\n\n\n\nGET /subscriptions/{subscriptionId}\n\n\nReturns a specific event\n\n\n\n\n\n\nGET /user/{userId}/subscriptions\n\n\nLists all subscriptions for a user\n\n\n\n\n\n\n\n\nEvent Sources\n\n\nThe following event sources are supported:\n\n\n\n\nDynamoDB stream\n\n\nIoT Core (Lambda Invoke via IoT Rule)\n\n\n\n\nThe following are planned to be suported:\n\n\n\n\nAPI Gateway\n\n\n\n\nAll incoming events must contain an \neventSourceId\n that can be used to match against a configured \nEventSource\n \neventSourceId\n.  If a matching \nEventSource\n configuration cannot be found, the event is dropped.\n\n\nEvents that are sourced via direct lambda invocation, such as API Gateway or IoT Core, are expected to be in the common event format, whereas events sourced from DynamoDB Streams are converted to the common message format by the Event Processor.\n\n\nDynamoDB Streams\n\n\nA DynamoDB Stream may be configured as a trigger to the Events Processor service. \n\n\nUsing DynamoDB streams as a Lambda trigger instead of consuming the DynamoDB Stream via Kinesis was chosen so that we benefit from automatic shard handling of scaling up/down.\n\n\nCreating a DynamoDB Stream event source via the REST API will enable the stream if it is not already enabled on the table, whereas deleting the event source via the REST API will not disable the stream on the table incase since enabling, an external consumer has started consuming the stream.\n\n\nThe \neventSourceARN\n in the incoming lambda event from the DynamoDB Stream trigger is used to determine which events are subject to processing by extracting the table portion of the Arn and matching it to an \nEventSource\nby its \neventSourceId\n. \n\n\n\n\nExample eventSourceARN:  a\nrn:aws:dynamodb:us-west-2:{account-id}:table/ExampleTableWithStream/stream/2015-06-27T00:48:05.899\n\n\nCorresponding eventSourceId:  \narn:aws:dynamodb:us-west-2:{account-id}:table/ExampleTableWithStream\n\n\n\n\nThe items primary key, sort key, and attributes, are extracted from the \nNewImage\n section of the event and transformed into the common event format for filtering.\n\n\nIoT Core\n\n\nCreating an IoT Core event source via the REST API creates an IoT Rule to forward the event message.  Deleting via the REST API will remove the IoT Rule.\n\n\nIt is expected that the incoming event being forwarded from IoT Core (via an IoT Rule) is already in the common event format (defined as part of the IoT Rule SQL), therefore will not need transforming.\n\n\nEvent Filtering\n\n\nTakes as input an event of the common event format.  First performs a lookup to see if any subscriptions for the event are configured for the event source, principal and principal value.  If subscriptions are configured, then a ruleset specific for the principal is loaded.  If any of the subscription rules for the principal pass, and the subscription has not been alerted, the event alert is stored in DynamoDB for later dispatching by the Events Alerts module.  If the subscription rules for the principal do not pass, and the subscription had been alerted, the alerted flag is reset.\n\n\nCommon Event Format\n\n\nThe \nprincipal\n represents the object that is the focus of the event message.  As an example, it could be the thing name or device id if the event message originated from a device, or a User Id if it originated directly from a user.\n\n\ninterface\n \nCommonEvent\n \n{\n\n    \neventSourceId\n: \nstring\n;\n\n    \nprincipal\n: \nstring\n;\n\n    \nprincipalValue\n: \nstring\n;\n\n    \nattributes\n?:\n \n{\n \n[\nkey\n: \nstring\n]\n \n:\n \nstring\n|\nboolean\n|\nnumber\n|\nstring\n[]\n|\nnumber\n[]\n \n};\n\n\n}\n\n\n\n\n\nRule Conditions\n\n\nEach rule requires a its conditions to be defined.  \n\n\nA condition comprises of a \nfact\n (the attribute to check), an \noperator\n(e.g. \nLessThan\n), and a \nvalue\n.  In addition, multiple conditions may be defined within \nall\n or \nany\n constructs.\n\n\nData Store\n\n\nAs this module is executed against telemetry, performance is critical, therefore DynamoDB is used as the datastore.  DynamoDB \nBatchGetItem\n and \nBatchWriteItem\n methods are used where possible to increase performance.\n\n\nThe following tables exist:\n\n\n\n\nEventConfig\n - utilizes the \nAdjacency List Pattern, GSI Overloading and GSI Sharding best practices\n to store \nEvent\n, \nEventSource\n and \nSubscription\n information.  As the data access is read heavy, DynamoDB Accelerator \nDAX\n is enabled to improve read performance.\n\n\nEventNotifications\n - stores all processed alerts.  Streams the creation of new alerts to the Events Alerts modules.\n\n\n\n\nEventConfig Data Access Patterns\n\n\n\n\n\n\n\n\nAccess Pattern\n\n\nQuery\n\n\nResult\n\n\n\n\n\n\n\n\n\n\nFind an EventSource by its id\n\n\nUse table, PK=\"ES:{eventSourceId}\", SK=\"type:ES\"\n\n\nEventSource\n\n\n\n\n\n\nList all EventSource's\n\n\nUse sk-gsi1Sort-index, PK=\"type:ES\"\n\n\nMultiple EventSources\n\n\n\n\n\n\nList all active EventSource's\n\n\nUse sk-gsi1Sort-index, PK=\"type:ES\", SK begins_with \"ES:true:\"\n\n\nMultiple EventSources\n\n\n\n\n\n\nFind an Event by its id\n\n\nUse sk-gsi1Sort-index, PK=\"E:{eventId}\", SK begins_with \"E:{eventId}:\"\n\n\nMultiple Events including denormalized  EventSource info\n\n\n\n\n\n\nList all Event's\n\n\nUse sk-gsi1Sort-index, PK=\"type:E\"\n\n\nMultiple Events\n\n\n\n\n\n\nList all active Event's\n\n\nUse sk-gsi1Sort-index, PK=\"type:E\", SK beings_with \"E:true:\"\n\n\nMultiple Events\n\n\n\n\n\n\nList all Events of a given EventSource\n\n\nUse table, PK=\"ES:{eventSourceId}\", SK begins_with \"E:\"\n\n\nMultiple Events including denormalized EventSource info\n\n\n\n\n\n\nFind a Subscription by id\n\n\nUse table, PK=\"S:{subscriptionId}\", SK=\"S:{subscriptionId}\"\n\n\nSubscription\n\n\n\n\n\n\nList all Subscriptions for an Event\n\n\nUse sk-gsi1Sort-index, PK=\"E:{eventId}\", SK begins_with \"S:\"\n\n\nMultiple Subscriptions\n\n\n\n\n\n\nList all Subscriptions for an Event\n\n\nUse sk-gsi1Sort-index, PK=\"E:{eventId}\", SK begins_with \"S:\"\n\n\nMultiple Subscriptions\n\n\n\n\n\n\nList all Subscriptions for a User\n\n\nUse sk-gsi1Sort-index, PK=\"U:{userId1}\", SK begins_with \"S:\"\n\n\nMultiple Subscriptions\n\n\n\n\n\n\nFor an incoming message from an event source, retrieve the rule definitions (Event) and all rule parameter values (Subscriptions) to determine if an event message needs alerting\n\n\nUse sk-gsi1Sort-index, PK=\"ES:{eventSourceId}:{principal}:{principalValue}\"\n\n\nMultiple Subscriptions including denormalized Event info\n\n\n\n\n\n\n\n\nEventNotifications Data Access Patterns\n\n\n\n\n\n\n\n\nAccess Pattern\n\n\nQuery\n\n\nResult\n\n\n\n\n\n\n\n\n\n\nStream all notifications for a user\n\n\nUse userId-time-index, PK=\"{userId}\"\n\n\nMultiple Alerts\n\n\n\n\n\n\nStream all notifications for a user for a specific date range\n\n\nUse userId-time-index, PK=\"{userId}\", SK BETWEEN \"{dateFrom}\" and \"{dateTo}\"\n\n\nMultiple Alerts\n\n\n\n\n\n\nStream notifications of a particular event for a user\n\n\nUse userId-gsi2Sort-index, PK=\"{userId}\", SK begins_with \"E-{eventId1}-\"\n\n\nMultiple Alerts\n\n\n\n\n\n\nStream notifications of a particular event for a user for a specific date range\n\n\nUse userId-gsi2Sort-index, PK=\"{userId}\", SK BETWEEN \"E-{eventId1}-{dateFrom}\" and \"E-{eventId1}-{dateTo}\"\n\n\nMultiple Alerts\n\n\n\n\n\n\n\n\nEvents Alerts\n\n\nThe Events Alerts module is responsible for notifying subscribers of generated alerts which are received by a DynamoDB Stream on the EventNotifications table that is populated by the Event Processor.  Notifications may be pushed to SNS or IoT Core, or alternatively queried in real-time via AppSync (planned feature).", 
            "title": "NOTIFICATIONS: Design"
        }, 
        {
            "location": "/projects/notifications/design/#notifications-design", 
            "text": "The CDF Notifications service is comprised of 2 micro-services:  the CDF Events Processor, and the CDF Events Alerts.", 
            "title": "NOTIFICATIONS: Design"
        }, 
        {
            "location": "/projects/notifications/design/#high-level-architecture", 
            "text": "", 
            "title": "High Level Architecture"
        }, 
        {
            "location": "/projects/notifications/design/#processing-pipeline", 
            "text": "", 
            "title": "Processing Pipeline"
        }, 
        {
            "location": "/projects/notifications/design/#events-processor", 
            "text": "The Events Processor module is responsible for receiving events from external data sources, transforming to a common message format, filtering based on configured subscriptions, and finally storing the generated alerts for later forwarding by the Events Alerts module.  The Events Processor is implemented as a fat lambda, exposing a management REST API, along with multiple Lambda handler entry points for DynamoDB Stream triggers, and direct Lambda invocations.  Event definitions are defined which are comprised of the data sources to monitor, and the rule to apply.  Subscribers then create subscriptions for specific events occurring.  An example domain model:", 
            "title": "Events Processor"
        }, 
        {
            "location": "/projects/notifications/design/#api", 
            "text": "The following REST API endpoints are exposed to configure events sources, events, and to allow user's to manage their subscriptions:  For a full definition of the endpoint including a description of the parameters, request and response bodies, and examples, refer to the  swagger definition .     Endpoint  Description      POST /eventsources  Creates a new event source, both the integration itself and its metadata    GET /eventsources  List all event sources    GET /eventsources/{eventsourceId}  Returns a specific event source    DELETE /eventsources/{eventsourceId}  Deletes a specific event source, along with all its associated events and subscriptions    POST /eventsources/{eventSourceId}/events  Defines a new event    GET /eventsources/{eventSourceId}/events  Lists all events for a specific event source    GET /events/{eventId}  Returns a specific event    DELETE /events/{eventId}  Deletes an specific event, along with all its related subscriptions    POST /events/{eventId}/subscriptions  Subscribes to an event    GET /events/{eventId}/subscriptions  Lists all subscriptions for a specific event    GET /subscriptions/{subscriptionId}  Returns a specific event    GET /user/{userId}/subscriptions  Lists all subscriptions for a user", 
            "title": "API"
        }, 
        {
            "location": "/projects/notifications/design/#event-sources", 
            "text": "The following event sources are supported:   DynamoDB stream  IoT Core (Lambda Invoke via IoT Rule)   The following are planned to be suported:   API Gateway   All incoming events must contain an  eventSourceId  that can be used to match against a configured  EventSource   eventSourceId .  If a matching  EventSource  configuration cannot be found, the event is dropped.  Events that are sourced via direct lambda invocation, such as API Gateway or IoT Core, are expected to be in the common event format, whereas events sourced from DynamoDB Streams are converted to the common message format by the Event Processor.", 
            "title": "Event Sources"
        }, 
        {
            "location": "/projects/notifications/design/#dynamodb-streams", 
            "text": "A DynamoDB Stream may be configured as a trigger to the Events Processor service.   Using DynamoDB streams as a Lambda trigger instead of consuming the DynamoDB Stream via Kinesis was chosen so that we benefit from automatic shard handling of scaling up/down.  Creating a DynamoDB Stream event source via the REST API will enable the stream if it is not already enabled on the table, whereas deleting the event source via the REST API will not disable the stream on the table incase since enabling, an external consumer has started consuming the stream.  The  eventSourceARN  in the incoming lambda event from the DynamoDB Stream trigger is used to determine which events are subject to processing by extracting the table portion of the Arn and matching it to an  EventSource by its  eventSourceId .    Example eventSourceARN:  a rn:aws:dynamodb:us-west-2:{account-id}:table/ExampleTableWithStream/stream/2015-06-27T00:48:05.899  Corresponding eventSourceId:   arn:aws:dynamodb:us-west-2:{account-id}:table/ExampleTableWithStream   The items primary key, sort key, and attributes, are extracted from the  NewImage  section of the event and transformed into the common event format for filtering.", 
            "title": "DynamoDB Streams"
        }, 
        {
            "location": "/projects/notifications/design/#iot-core", 
            "text": "Creating an IoT Core event source via the REST API creates an IoT Rule to forward the event message.  Deleting via the REST API will remove the IoT Rule.  It is expected that the incoming event being forwarded from IoT Core (via an IoT Rule) is already in the common event format (defined as part of the IoT Rule SQL), therefore will not need transforming.", 
            "title": "IoT Core"
        }, 
        {
            "location": "/projects/notifications/design/#event-filtering", 
            "text": "Takes as input an event of the common event format.  First performs a lookup to see if any subscriptions for the event are configured for the event source, principal and principal value.  If subscriptions are configured, then a ruleset specific for the principal is loaded.  If any of the subscription rules for the principal pass, and the subscription has not been alerted, the event alert is stored in DynamoDB for later dispatching by the Events Alerts module.  If the subscription rules for the principal do not pass, and the subscription had been alerted, the alerted flag is reset.", 
            "title": "Event Filtering"
        }, 
        {
            "location": "/projects/notifications/design/#common-event-format", 
            "text": "The  principal  represents the object that is the focus of the event message.  As an example, it could be the thing name or device id if the event message originated from a device, or a User Id if it originated directly from a user.  interface   CommonEvent   { \n     eventSourceId :  string ; \n     principal :  string ; \n     principalValue :  string ; \n     attributes ?:   {   [ key :  string ]   :   string | boolean | number | string [] | number []   };  }", 
            "title": "Common Event Format"
        }, 
        {
            "location": "/projects/notifications/design/#rule-conditions", 
            "text": "Each rule requires a its conditions to be defined.    A condition comprises of a  fact  (the attribute to check), an  operator (e.g.  LessThan ), and a  value .  In addition, multiple conditions may be defined within  all  or  any  constructs.", 
            "title": "Rule Conditions"
        }, 
        {
            "location": "/projects/notifications/design/#data-store", 
            "text": "As this module is executed against telemetry, performance is critical, therefore DynamoDB is used as the datastore.  DynamoDB  BatchGetItem  and  BatchWriteItem  methods are used where possible to increase performance.  The following tables exist:   EventConfig  - utilizes the  Adjacency List Pattern, GSI Overloading and GSI Sharding best practices  to store  Event ,  EventSource  and  Subscription  information.  As the data access is read heavy, DynamoDB Accelerator  DAX  is enabled to improve read performance.  EventNotifications  - stores all processed alerts.  Streams the creation of new alerts to the Events Alerts modules.", 
            "title": "Data Store"
        }, 
        {
            "location": "/projects/notifications/design/#eventconfig-data-access-patterns", 
            "text": "Access Pattern  Query  Result      Find an EventSource by its id  Use table, PK=\"ES:{eventSourceId}\", SK=\"type:ES\"  EventSource    List all EventSource's  Use sk-gsi1Sort-index, PK=\"type:ES\"  Multiple EventSources    List all active EventSource's  Use sk-gsi1Sort-index, PK=\"type:ES\", SK begins_with \"ES:true:\"  Multiple EventSources    Find an Event by its id  Use sk-gsi1Sort-index, PK=\"E:{eventId}\", SK begins_with \"E:{eventId}:\"  Multiple Events including denormalized  EventSource info    List all Event's  Use sk-gsi1Sort-index, PK=\"type:E\"  Multiple Events    List all active Event's  Use sk-gsi1Sort-index, PK=\"type:E\", SK beings_with \"E:true:\"  Multiple Events    List all Events of a given EventSource  Use table, PK=\"ES:{eventSourceId}\", SK begins_with \"E:\"  Multiple Events including denormalized EventSource info    Find a Subscription by id  Use table, PK=\"S:{subscriptionId}\", SK=\"S:{subscriptionId}\"  Subscription    List all Subscriptions for an Event  Use sk-gsi1Sort-index, PK=\"E:{eventId}\", SK begins_with \"S:\"  Multiple Subscriptions    List all Subscriptions for an Event  Use sk-gsi1Sort-index, PK=\"E:{eventId}\", SK begins_with \"S:\"  Multiple Subscriptions    List all Subscriptions for a User  Use sk-gsi1Sort-index, PK=\"U:{userId1}\", SK begins_with \"S:\"  Multiple Subscriptions    For an incoming message from an event source, retrieve the rule definitions (Event) and all rule parameter values (Subscriptions) to determine if an event message needs alerting  Use sk-gsi1Sort-index, PK=\"ES:{eventSourceId}:{principal}:{principalValue}\"  Multiple Subscriptions including denormalized Event info", 
            "title": "EventConfig Data Access Patterns"
        }, 
        {
            "location": "/projects/notifications/design/#eventnotifications-data-access-patterns", 
            "text": "Access Pattern  Query  Result      Stream all notifications for a user  Use userId-time-index, PK=\"{userId}\"  Multiple Alerts    Stream all notifications for a user for a specific date range  Use userId-time-index, PK=\"{userId}\", SK BETWEEN \"{dateFrom}\" and \"{dateTo}\"  Multiple Alerts    Stream notifications of a particular event for a user  Use userId-gsi2Sort-index, PK=\"{userId}\", SK begins_with \"E-{eventId1}-\"  Multiple Alerts    Stream notifications of a particular event for a user for a specific date range  Use userId-gsi2Sort-index, PK=\"{userId}\", SK BETWEEN \"E-{eventId1}-{dateFrom}\" and \"E-{eventId1}-{dateTo}\"  Multiple Alerts", 
            "title": "EventNotifications Data Access Patterns"
        }, 
        {
            "location": "/projects/notifications/design/#events-alerts", 
            "text": "The Events Alerts module is responsible for notifying subscribers of generated alerts which are received by a DynamoDB Stream on the EventNotifications table that is populated by the Event Processor.  Notifications may be pushed to SNS or IoT Core, or alternatively queried in real-time via AppSync (planned feature).", 
            "title": "Events Alerts"
        }, 
        {
            "location": "/projects/notifications/events-processor-swagger/", 
            "text": "Connected Device Framework: Notifications\n\n\nThe CDF Notifications umbrella of services receives input from a number of different sources (e.g. IoT Core, DynamoDB Streams, API Gateway), and filters based on a subscriber's notification settings.  Any filtered messages are then sent on to a number of pre-configured targets (e.g. AppSync, SNS, or republished to IoT Core).\n\n\nThe CDF Notifications is comprised of 2 micro-services:  the CDF Events Processor, and the CDF Notification Dispatcher.  \n\n\nVersion: 1.0.0\n\n\n/eventsources\n\n\nPOST\n\n\nSummary:\n\n\nCreates a new EventSource\n\n\nResponses\n\n\n\n\n\n\n\n\nCode\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n201\n\n\n\n\n\n\n\n\n400\n\n\n\n\n\n\n\n\n\n\nGET\n\n\nSummary:\n\n\nReturns all configured event sources\n\n\nResponses\n\n\n\n\n\n\n\n\nCode\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n200\n\n\n\n\n\n\n\n\n400\n\n\n\n\n\n\n\n\n404\n\n\n\n\n\n\n\n\n\n\n/eventsources/{eventSourceId}\n\n\nGET\n\n\nSummary:\n\n\nReturns a single event source\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nLocated in\n\n\nDescription\n\n\nRequired\n\n\nSchema\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNo\n\n\neventSourceId\n\n\n\n\n\n\n\n\nResponses\n\n\n\n\n\n\n\n\nCode\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n200\n\n\n\n\n\n\n\n\n400\n\n\n\n\n\n\n\n\n404\n\n\n\n\n\n\n\n\n\n\nDELETE\n\n\nSummary:\n\n\nDeletes an event source\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nLocated in\n\n\nDescription\n\n\nRequired\n\n\nSchema\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNo\n\n\neventSourceId\n\n\n\n\n\n\n\n\nResponses\n\n\n\n\n\n\n\n\nCode\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n204\n\n\n\n\n\n\n\n\n404\n\n\n\n\n\n\n\n\n\n\n/eventsources/{eventSourceId}/events\n\n\nPOST\n\n\nSummary:\n\n\nCreates a new Event\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nLocated in\n\n\nDescription\n\n\nRequired\n\n\nSchema\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNo\n\n\neventSourceId\n\n\n\n\n\n\n\n\nResponses\n\n\n\n\n\n\n\n\nCode\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n201\n\n\n\n\n\n\n\n\n400\n\n\n\n\n\n\n\n\n\n\nGET\n\n\nSummary:\n\n\nLists all events for a specific event source\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nLocated in\n\n\nDescription\n\n\nRequired\n\n\nSchema\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNo\n\n\neventSourceId\n\n\n\n\n\n\n\n\nResponses\n\n\n\n\n\n\n\n\nCode\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n200\n\n\n\n\n\n\n\n\n400\n\n\n\n\n\n\n\n\n404\n\n\n\n\n\n\n\n\n\n\n/events/{eventId}\n\n\nGET\n\n\nSummary:\n\n\nReturns a single event\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nLocated in\n\n\nDescription\n\n\nRequired\n\n\nSchema\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNo\n\n\neventId\n\n\n\n\n\n\n\n\nResponses\n\n\n\n\n\n\n\n\nCode\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n200\n\n\n\n\n\n\n\n\n400\n\n\n\n\n\n\n\n\n404\n\n\n\n\n\n\n\n\n\n\nDELETE\n\n\nSummary:\n\n\nDeletes an event\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nLocated in\n\n\nDescription\n\n\nRequired\n\n\nSchema\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNo\n\n\neventId\n\n\n\n\n\n\n\n\nResponses\n\n\n\n\n\n\n\n\nCode\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n204\n\n\n\n\n\n\n\n\n404\n\n\n\n\n\n\n\n\n\n\n/events/{eventId}/subscriptions\n\n\nPOST\n\n\nSummary:\n\n\nCreates a new subscription of an event\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nLocated in\n\n\nDescription\n\n\nRequired\n\n\nSchema\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNo\n\n\neventId\n\n\n\n\n\n\n\n\nResponses\n\n\n\n\n\n\n\n\nCode\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n201\n\n\n\n\n\n\n\n\n400\n\n\n\n\n\n\n\n\n\n\nGET\n\n\nSummary:\n\n\nLists all subscriptions for the provided event\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nLocated in\n\n\nDescription\n\n\nRequired\n\n\nSchema\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNo\n\n\neventId\n\n\n\n\n\n\n\n\n\n\n\n\nNo\n\n\nfromSubscriptionId\n\n\n\n\n\n\n\n\nResponses\n\n\n\n\n\n\n\n\nCode\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n200\n\n\n\n\n\n\n\n\n400\n\n\n\n\n\n\n\n\n404\n\n\n\n\n\n\n\n\n\n\n/subscriptions/{subscriptionId}\n\n\nGET\n\n\nSummary:\n\n\nReturns a single subscription\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nLocated in\n\n\nDescription\n\n\nRequired\n\n\nSchema\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNo\n\n\nsubscriptionId\n\n\n\n\n\n\n\n\nResponses\n\n\n\n\n\n\n\n\nCode\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n200\n\n\n\n\n\n\n\n\n400\n\n\n\n\n\n\n\n\n404\n\n\n\n\n\n\n\n\n\n\nDELETE\n\n\nSummary:\n\n\nDeletes a subscription\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nLocated in\n\n\nDescription\n\n\nRequired\n\n\nSchema\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNo\n\n\nsubscriptionId\n\n\n\n\n\n\n\n\nResponses\n\n\n\n\n\n\n\n\nCode\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n204\n\n\n\n\n\n\n\n\n404\n\n\n\n\n\n\n\n\n\n\n/user/{userId}/subscriptions\n\n\nGET\n\n\nSummary:\n\n\nLists all subscriptions for the provided user\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nLocated in\n\n\nDescription\n\n\nRequired\n\n\nSchema\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNo\n\n\nuserId\n\n\n\n\n\n\n\n\nResponses\n\n\n\n\n\n\n\n\nCode\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n200\n\n\n\n\n\n\n\n\n400\n\n\n\n\n\n\n\n\n404", 
            "title": "Connected Device Framework: Notifications"
        }, 
        {
            "location": "/projects/notifications/events-processor-swagger/#connected-device-framework-notifications", 
            "text": "The CDF Notifications umbrella of services receives input from a number of different sources (e.g. IoT Core, DynamoDB Streams, API Gateway), and filters based on a subscriber's notification settings.  Any filtered messages are then sent on to a number of pre-configured targets (e.g. AppSync, SNS, or republished to IoT Core).  The CDF Notifications is comprised of 2 micro-services:  the CDF Events Processor, and the CDF Notification Dispatcher.", 
            "title": "Connected Device Framework: Notifications"
        }, 
        {
            "location": "/projects/notifications/events-processor-swagger/#version-100", 
            "text": "", 
            "title": "Version: 1.0.0"
        }, 
        {
            "location": "/projects/notifications/events-processor-swagger/#eventsources", 
            "text": "", 
            "title": "/eventsources"
        }, 
        {
            "location": "/projects/notifications/events-processor-swagger/#post", 
            "text": "", 
            "title": "POST"
        }, 
        {
            "location": "/projects/notifications/events-processor-swagger/#summary", 
            "text": "Creates a new EventSource", 
            "title": "Summary:"
        }, 
        {
            "location": "/projects/notifications/events-processor-swagger/#responses", 
            "text": "Code  Description      201     400", 
            "title": "Responses"
        }, 
        {
            "location": "/projects/notifications/events-processor-swagger/#get", 
            "text": "", 
            "title": "GET"
        }, 
        {
            "location": "/projects/notifications/events-processor-swagger/#summary_1", 
            "text": "Returns all configured event sources", 
            "title": "Summary:"
        }, 
        {
            "location": "/projects/notifications/events-processor-swagger/#responses_1", 
            "text": "Code  Description      200     400     404", 
            "title": "Responses"
        }, 
        {
            "location": "/projects/notifications/events-processor-swagger/#eventsourceseventsourceid", 
            "text": "", 
            "title": "/eventsources/{eventSourceId}"
        }, 
        {
            "location": "/projects/notifications/events-processor-swagger/#get_1", 
            "text": "", 
            "title": "GET"
        }, 
        {
            "location": "/projects/notifications/events-processor-swagger/#summary_2", 
            "text": "Returns a single event source", 
            "title": "Summary:"
        }, 
        {
            "location": "/projects/notifications/events-processor-swagger/#parameters", 
            "text": "Name  Located in  Description  Required  Schema         No  eventSourceId", 
            "title": "Parameters"
        }, 
        {
            "location": "/projects/notifications/events-processor-swagger/#responses_2", 
            "text": "Code  Description      200     400     404", 
            "title": "Responses"
        }, 
        {
            "location": "/projects/notifications/events-processor-swagger/#delete", 
            "text": "", 
            "title": "DELETE"
        }, 
        {
            "location": "/projects/notifications/events-processor-swagger/#summary_3", 
            "text": "Deletes an event source", 
            "title": "Summary:"
        }, 
        {
            "location": "/projects/notifications/events-processor-swagger/#parameters_1", 
            "text": "Name  Located in  Description  Required  Schema         No  eventSourceId", 
            "title": "Parameters"
        }, 
        {
            "location": "/projects/notifications/events-processor-swagger/#responses_3", 
            "text": "Code  Description      204     404", 
            "title": "Responses"
        }, 
        {
            "location": "/projects/notifications/events-processor-swagger/#eventsourceseventsourceidevents", 
            "text": "", 
            "title": "/eventsources/{eventSourceId}/events"
        }, 
        {
            "location": "/projects/notifications/events-processor-swagger/#post_1", 
            "text": "", 
            "title": "POST"
        }, 
        {
            "location": "/projects/notifications/events-processor-swagger/#summary_4", 
            "text": "Creates a new Event", 
            "title": "Summary:"
        }, 
        {
            "location": "/projects/notifications/events-processor-swagger/#parameters_2", 
            "text": "Name  Located in  Description  Required  Schema         No  eventSourceId", 
            "title": "Parameters"
        }, 
        {
            "location": "/projects/notifications/events-processor-swagger/#responses_4", 
            "text": "Code  Description      201     400", 
            "title": "Responses"
        }, 
        {
            "location": "/projects/notifications/events-processor-swagger/#get_2", 
            "text": "", 
            "title": "GET"
        }, 
        {
            "location": "/projects/notifications/events-processor-swagger/#summary_5", 
            "text": "Lists all events for a specific event source", 
            "title": "Summary:"
        }, 
        {
            "location": "/projects/notifications/events-processor-swagger/#parameters_3", 
            "text": "Name  Located in  Description  Required  Schema         No  eventSourceId", 
            "title": "Parameters"
        }, 
        {
            "location": "/projects/notifications/events-processor-swagger/#responses_5", 
            "text": "Code  Description      200     400     404", 
            "title": "Responses"
        }, 
        {
            "location": "/projects/notifications/events-processor-swagger/#eventseventid", 
            "text": "", 
            "title": "/events/{eventId}"
        }, 
        {
            "location": "/projects/notifications/events-processor-swagger/#get_3", 
            "text": "", 
            "title": "GET"
        }, 
        {
            "location": "/projects/notifications/events-processor-swagger/#summary_6", 
            "text": "Returns a single event", 
            "title": "Summary:"
        }, 
        {
            "location": "/projects/notifications/events-processor-swagger/#parameters_4", 
            "text": "Name  Located in  Description  Required  Schema         No  eventId", 
            "title": "Parameters"
        }, 
        {
            "location": "/projects/notifications/events-processor-swagger/#responses_6", 
            "text": "Code  Description      200     400     404", 
            "title": "Responses"
        }, 
        {
            "location": "/projects/notifications/events-processor-swagger/#delete_1", 
            "text": "", 
            "title": "DELETE"
        }, 
        {
            "location": "/projects/notifications/events-processor-swagger/#summary_7", 
            "text": "Deletes an event", 
            "title": "Summary:"
        }, 
        {
            "location": "/projects/notifications/events-processor-swagger/#parameters_5", 
            "text": "Name  Located in  Description  Required  Schema         No  eventId", 
            "title": "Parameters"
        }, 
        {
            "location": "/projects/notifications/events-processor-swagger/#responses_7", 
            "text": "Code  Description      204     404", 
            "title": "Responses"
        }, 
        {
            "location": "/projects/notifications/events-processor-swagger/#eventseventidsubscriptions", 
            "text": "", 
            "title": "/events/{eventId}/subscriptions"
        }, 
        {
            "location": "/projects/notifications/events-processor-swagger/#post_2", 
            "text": "", 
            "title": "POST"
        }, 
        {
            "location": "/projects/notifications/events-processor-swagger/#summary_8", 
            "text": "Creates a new subscription of an event", 
            "title": "Summary:"
        }, 
        {
            "location": "/projects/notifications/events-processor-swagger/#parameters_6", 
            "text": "Name  Located in  Description  Required  Schema         No  eventId", 
            "title": "Parameters"
        }, 
        {
            "location": "/projects/notifications/events-processor-swagger/#responses_8", 
            "text": "Code  Description      201     400", 
            "title": "Responses"
        }, 
        {
            "location": "/projects/notifications/events-processor-swagger/#get_4", 
            "text": "", 
            "title": "GET"
        }, 
        {
            "location": "/projects/notifications/events-processor-swagger/#summary_9", 
            "text": "Lists all subscriptions for the provided event", 
            "title": "Summary:"
        }, 
        {
            "location": "/projects/notifications/events-processor-swagger/#parameters_7", 
            "text": "Name  Located in  Description  Required  Schema         No  eventId       No  fromSubscriptionId", 
            "title": "Parameters"
        }, 
        {
            "location": "/projects/notifications/events-processor-swagger/#responses_9", 
            "text": "Code  Description      200     400     404", 
            "title": "Responses"
        }, 
        {
            "location": "/projects/notifications/events-processor-swagger/#subscriptionssubscriptionid", 
            "text": "", 
            "title": "/subscriptions/{subscriptionId}"
        }, 
        {
            "location": "/projects/notifications/events-processor-swagger/#get_5", 
            "text": "", 
            "title": "GET"
        }, 
        {
            "location": "/projects/notifications/events-processor-swagger/#summary_10", 
            "text": "Returns a single subscription", 
            "title": "Summary:"
        }, 
        {
            "location": "/projects/notifications/events-processor-swagger/#parameters_8", 
            "text": "Name  Located in  Description  Required  Schema         No  subscriptionId", 
            "title": "Parameters"
        }, 
        {
            "location": "/projects/notifications/events-processor-swagger/#responses_10", 
            "text": "Code  Description      200     400     404", 
            "title": "Responses"
        }, 
        {
            "location": "/projects/notifications/events-processor-swagger/#delete_2", 
            "text": "", 
            "title": "DELETE"
        }, 
        {
            "location": "/projects/notifications/events-processor-swagger/#summary_11", 
            "text": "Deletes a subscription", 
            "title": "Summary:"
        }, 
        {
            "location": "/projects/notifications/events-processor-swagger/#parameters_9", 
            "text": "Name  Located in  Description  Required  Schema         No  subscriptionId", 
            "title": "Parameters"
        }, 
        {
            "location": "/projects/notifications/events-processor-swagger/#responses_11", 
            "text": "Code  Description      204     404", 
            "title": "Responses"
        }, 
        {
            "location": "/projects/notifications/events-processor-swagger/#useruseridsubscriptions", 
            "text": "", 
            "title": "/user/{userId}/subscriptions"
        }, 
        {
            "location": "/projects/notifications/events-processor-swagger/#get_6", 
            "text": "", 
            "title": "GET"
        }, 
        {
            "location": "/projects/notifications/events-processor-swagger/#summary_12", 
            "text": "Lists all subscriptions for the provided user", 
            "title": "Summary:"
        }, 
        {
            "location": "/projects/notifications/events-processor-swagger/#parameters_10", 
            "text": "Name  Located in  Description  Required  Schema         No  userId", 
            "title": "Parameters"
        }, 
        {
            "location": "/projects/notifications/events-processor-swagger/#responses_12", 
            "text": "Code  Description      200     400     404", 
            "title": "Responses"
        }, 
        {
            "location": "/projects/notifications/overview/", 
            "text": "NOTIFICATIONS: Overview\n\n\nIntroduction\n\n\nThe \nEvents Processor\n module, along with the \nEvents Alerts\n module form the CDF Notification service.\n\n\nThe \nEvents Processor\n module receives events from a number of different event sources (e.g. IoT Core, DynamoDB Streams, API Gateway), and filters the events to generate alerts based on a subscriber's notification settings.  Any generated alerts are then forwarded by the \nEvents Alerts\n module on to a number of different targets (e.g. AppSync, SNS, or republished to IoT Core) as configured.\n\n\nStatus\n\n\nThe current version of the Events Processor / Events Alerts supports the following:\n\n\n\n\nEvent Sources:\n\n\nIoT Core\n\n\nDynamoDB table\n\n\n\n\n\n\nSubscription Targets:\n\n\nEmail\n\n\nSMS\n\n\n\n\n\n\n\n\nThe following are work-in-progress, awaiting prioritiztion by customer demand:\n\n\n\n\nEvent Sources:\n\n\nAPI Gateway\n\n\n\n\n\n\nSubscription Targets:\n\n\nAppSync (GraphQL)", 
            "title": "NOTIFICATIONS: Overview"
        }, 
        {
            "location": "/projects/notifications/overview/#notifications-overview", 
            "text": "", 
            "title": "NOTIFICATIONS: Overview"
        }, 
        {
            "location": "/projects/notifications/overview/#introduction", 
            "text": "The  Events Processor  module, along with the  Events Alerts  module form the CDF Notification service.  The  Events Processor  module receives events from a number of different event sources (e.g. IoT Core, DynamoDB Streams, API Gateway), and filters the events to generate alerts based on a subscriber's notification settings.  Any generated alerts are then forwarded by the  Events Alerts  module on to a number of different targets (e.g. AppSync, SNS, or republished to IoT Core) as configured.", 
            "title": "Introduction"
        }, 
        {
            "location": "/projects/notifications/overview/#status", 
            "text": "The current version of the Events Processor / Events Alerts supports the following:   Event Sources:  IoT Core  DynamoDB table    Subscription Targets:  Email  SMS     The following are work-in-progress, awaiting prioritiztion by customer demand:   Event Sources:  API Gateway    Subscription Targets:  AppSync (GraphQL)", 
            "title": "Status"
        }, 
        {
            "location": "/projects/notifications/walkthrough/", 
            "text": "NOTIFICATIONS: Walkthrough\n\n\nIntroduction\n\n\nThe following describes how to create an event source, define an event, then subcribe to receive alerts of processed events.\n\n\nNote:  review the \nswagger definition\n for a full list of available endpoints.\n\n\nStep 1:  Define an event source.\n\n\nThere are 2 types of event source defined:  DynamoDB, and IoT Core:\n\n\nA DynamoDB event source\n\n\n\n\nid\n: the DynamoDB Table arn\n\n\nname\n: a name to identfy the event source\n\n\nsourceType\n: must set to \nDynamoDB\n\n\nprinciple\n: the attribute witin the table that uniquely represents the item in context\n\n\ndynamoDb.tableName\n: the DynamoDB table name\n\n\n\n\nRequest\n\n\nPOST /eventsources\nAccept: application/vnd.aws-cdf-v1.0+json\nContent-Type: application/vnd.aws-cdf-v1.0+json\n{\n    \nid\n: \narn:aws:dynamodb:us-west-2:123456789012:table/Telemetry\n,\n    \nname\n: \nProcessed Events\n,\n    \nsourceType\n: \nDynamoDB\n,\n    \nprincipal\n: \nthingName\n,\n    \ndynamoDb\n: {\n        \ntableName\n: \nTelemetry\n\n    }\n}\n\n\n\n\nResponse\n\n\n204 No Content\n\n\nAn IOT Core event source\n\n\n\n\nname\n: a name to identfy the event source\n\n\nsourceType\n: must set to \nIoTCore\n\n\nprinciple\n: the attribute witin the table that uniquely represents the item in context\n\n\niotCore.mqttTopic\n: the MQTT topic to subscribe to\n\n\niotCore.attributes\n: A mapping of attributes from the incoming event to transform to the common event format.  In the example below, the incoming attribue \nbl\n will be transformed to \nattributes.batteryLevel\n, and \nsensor.1.value\n will be transformed to \nattributes.temperature\n.\n\n\n\n\nRequest\n\n\nPOST /eventsources\nAccept: application/vnd.aws-cdf-v1.0+json\nContent-Type: application/vnd.aws-cdf-v1.0+json\n{\n    \nname\n: \nRaw Events\n,\n    \nsourceType\n: \nIoTCore\n,\n    \nprincipal\n: \nthingName\n,\n    \niotCore\n: {\n        \nmqttTopic\n: \ndean/test\n,\n        \nattributes\n: {\n            \nbatteryLevel\n: \nbl\n,\n            \ntemperature\n: \nsensor.1.value\n\n        }\n    }\n}\n\n\n\n\nResponse\n\n\n204 No Content\n\n\nStep 2:  View the available event sources\n\n\nRequest\n\n\nGET /eventsources\nAccept: application/vnd.aws-cdf-v1.0+json\nContent-Type: application/vnd.aws-cdf-v1.0+json\n\n\n\n\nResponse\n\n\n{\n    \nresults\n: [\n        {\n            \nid\n: \narn:aws:dynamodb:us-west-2:157731826412:table/Telemetry\n,\n            \nname\n: \nProcessed Events\n\n        }\n    ]\n}\n\n\n\n\nStep 3:  Define an event\n\n\n\n\nname\n: a name to identify the event\n\n\nconditions\n: the example below evalutes the \nbatteryLevel\n attribute of the incoming common event format message, and raises an alert if its value is less then or equals to a value that will be provided at the time of creating the subscription (represented by the $bl parameter)\n\n\nsupportedTargets\n: the example below supported 2 targets: email and sms.  Email will use the default template, and sms using the small template\n\n\ntemplates\n: a definition of the templates (written in VTL) that are referenced by the supported targets\n\n\n\n\nRequest\n\n\nPOST /eventsources/arn%3Aaws%3Adynamodb%3Aus-west-2%3A157731826412%3Atable%2FTelemetry/events\nAccept: application/vnd.aws-cdf-v1.0+json\nContent-Type: application/vnd.aws-cdf-v1.0+json\n{\n    \nname\n: \nBattery alert\n,\n    \nconditions\n: {\n        \nall\n: [{\n            \nfact\n: \nbatteryLevel\n,\n            \noperator\n: \nlessThanInclusive\n,\n            \nvalue\n: \n$bl\n\n        }]\n    },\n    \nsupportedTargets\n: {\n        \nemail\n: \ndefault\n,\n        \nsms\n: \nsmall\n\n    },\n    \ntemplates\n: {\n        \ndefault\n: \nThe battery for bowl {{=it.principalValue}} is low.\n,\n        \nsmall\n: \n{{=it.principalValue}} battery low\n\n    }\n}\n\n\n\n\nResponse\n\n\n204 No Content\n\n\nStep 4:  View the available events for an event source\n\n\nRequest\n\n\nGET /eventsources/arn%3Aaws%3Adynamodb%3Aus-west-2%3A157731826412%3Atable%2FdeansTest/events\nAccept: application/vnd.aws-cdf-v1.0+json\nContent-Type: application/vnd.aws-cdf-v1.0+json\n\n\n\n\nResponse\n\n\n{\n    \nresults\n: [\n        {\n            \neventId\n: \n5fb570e0-71b0-11e9-b534-5d33aa3bde97\n,\n            \neventSourceId\n: \narn:aws:dynamodb:us-west-2:157731826412:table/deansTest\n,\n            \nname\n: \nBattery alert\n,\n            \nconditions\n: {\n                \nall\n: [\n                    {\n                        \nvalue\n: \n$bl\n,\n                        \noperator\n: \nlessThanInclusive\n,\n                        \nfact\n: \nbatteryLevel\n\n                    }\n                ]\n            },\n            \nruleParameters\n: [\n                \nbl\n\n            ],\n            \nenabled\n: true,\n            \nprincipal\n: \nthingName\n,\n            \ntemplates\n: {\n                \nsmall\n: \n{{=it.principalValue}} battery low\n,\n                \ndefault\n: \nThe battery for bowl {{=it.principalValue}} is low.\n\n            },\n            \nsupportedTargets\n: {\n                \nsms\n: \nsmall\n,\n                \nemail\n: \ndefault\n\n            }\n        }\n    ]\n}\n\n\n\n\nStep 5:  Subscribe to an event\n\n\n\n\nuser.id\n: unique ID of the user\n\n\nprincipalValue\n: for an incoming rule to be evaluated for this user, the value of principalValue must represent the value of the principal attribute defined for the event\n\n\ntargets\n: optionally subscribe to any of the supported targets configured for the event\n\n\nruleParameterValues\n: if the event conditions contain parameters as part of its value, they must be provided when creating the subscription\n\n\n\n\nRequest\n\n\nPOST /events/5fb570e0-71b0-11e9-b534-5d33aa3bde97/subscriptions\nAccept: application/vnd.aws-cdf-v1.0+json\nContent-Type: application/vnd.aws-cdf-v1.0+json\n{\n    \nuser\n: {\n        \nid\n: \nuser123\n\n    },\n    \nprincipalValue\n: \ndevice001\n,\n    \ntargets\n: {\n        \nemail\n: {\n            \naddress\n: \nsomeone@asomewhere.com\n\n        },\n        \nsms\n: {\n            \nphoneNumber\n: \n15551231234\n\n        }\n    },\n    \nruleParameterValues\n: {\n        \nbl\n: 15\n    }\n}\n\n\n\n\nResponse\n\n\n204 No Content", 
            "title": "NOTIFICATIONS: Walkthrough"
        }, 
        {
            "location": "/projects/notifications/walkthrough/#notifications-walkthrough", 
            "text": "", 
            "title": "NOTIFICATIONS: Walkthrough"
        }, 
        {
            "location": "/projects/notifications/walkthrough/#introduction", 
            "text": "The following describes how to create an event source, define an event, then subcribe to receive alerts of processed events.  Note:  review the  swagger definition  for a full list of available endpoints.", 
            "title": "Introduction"
        }, 
        {
            "location": "/projects/notifications/walkthrough/#step-1-define-an-event-source", 
            "text": "There are 2 types of event source defined:  DynamoDB, and IoT Core:", 
            "title": "Step 1:  Define an event source."
        }, 
        {
            "location": "/projects/notifications/walkthrough/#a-dynamodb-event-source", 
            "text": "id : the DynamoDB Table arn  name : a name to identfy the event source  sourceType : must set to  DynamoDB  principle : the attribute witin the table that uniquely represents the item in context  dynamoDb.tableName : the DynamoDB table name", 
            "title": "A DynamoDB event source"
        }, 
        {
            "location": "/projects/notifications/walkthrough/#request", 
            "text": "POST /eventsources\nAccept: application/vnd.aws-cdf-v1.0+json\nContent-Type: application/vnd.aws-cdf-v1.0+json\n{\n     id :  arn:aws:dynamodb:us-west-2:123456789012:table/Telemetry ,\n     name :  Processed Events ,\n     sourceType :  DynamoDB ,\n     principal :  thingName ,\n     dynamoDb : {\n         tableName :  Telemetry \n    }\n}", 
            "title": "Request"
        }, 
        {
            "location": "/projects/notifications/walkthrough/#response", 
            "text": "204 No Content", 
            "title": "Response"
        }, 
        {
            "location": "/projects/notifications/walkthrough/#an-iot-core-event-source", 
            "text": "name : a name to identfy the event source  sourceType : must set to  IoTCore  principle : the attribute witin the table that uniquely represents the item in context  iotCore.mqttTopic : the MQTT topic to subscribe to  iotCore.attributes : A mapping of attributes from the incoming event to transform to the common event format.  In the example below, the incoming attribue  bl  will be transformed to  attributes.batteryLevel , and  sensor.1.value  will be transformed to  attributes.temperature .", 
            "title": "An IOT Core event source"
        }, 
        {
            "location": "/projects/notifications/walkthrough/#request_1", 
            "text": "POST /eventsources\nAccept: application/vnd.aws-cdf-v1.0+json\nContent-Type: application/vnd.aws-cdf-v1.0+json\n{\n     name :  Raw Events ,\n     sourceType :  IoTCore ,\n     principal :  thingName ,\n     iotCore : {\n         mqttTopic :  dean/test ,\n         attributes : {\n             batteryLevel :  bl ,\n             temperature :  sensor.1.value \n        }\n    }\n}", 
            "title": "Request"
        }, 
        {
            "location": "/projects/notifications/walkthrough/#response_1", 
            "text": "204 No Content", 
            "title": "Response"
        }, 
        {
            "location": "/projects/notifications/walkthrough/#step-2-view-the-available-event-sources", 
            "text": "", 
            "title": "Step 2:  View the available event sources"
        }, 
        {
            "location": "/projects/notifications/walkthrough/#request_2", 
            "text": "GET /eventsources\nAccept: application/vnd.aws-cdf-v1.0+json\nContent-Type: application/vnd.aws-cdf-v1.0+json", 
            "title": "Request"
        }, 
        {
            "location": "/projects/notifications/walkthrough/#response_2", 
            "text": "{\n     results : [\n        {\n             id :  arn:aws:dynamodb:us-west-2:157731826412:table/Telemetry ,\n             name :  Processed Events \n        }\n    ]\n}", 
            "title": "Response"
        }, 
        {
            "location": "/projects/notifications/walkthrough/#step-3-define-an-event", 
            "text": "name : a name to identify the event  conditions : the example below evalutes the  batteryLevel  attribute of the incoming common event format message, and raises an alert if its value is less then or equals to a value that will be provided at the time of creating the subscription (represented by the $bl parameter)  supportedTargets : the example below supported 2 targets: email and sms.  Email will use the default template, and sms using the small template  templates : a definition of the templates (written in VTL) that are referenced by the supported targets", 
            "title": "Step 3:  Define an event"
        }, 
        {
            "location": "/projects/notifications/walkthrough/#request_3", 
            "text": "POST /eventsources/arn%3Aaws%3Adynamodb%3Aus-west-2%3A157731826412%3Atable%2FTelemetry/events\nAccept: application/vnd.aws-cdf-v1.0+json\nContent-Type: application/vnd.aws-cdf-v1.0+json\n{\n     name :  Battery alert ,\n     conditions : {\n         all : [{\n             fact :  batteryLevel ,\n             operator :  lessThanInclusive ,\n             value :  $bl \n        }]\n    },\n     supportedTargets : {\n         email :  default ,\n         sms :  small \n    },\n     templates : {\n         default :  The battery for bowl {{=it.principalValue}} is low. ,\n         small :  {{=it.principalValue}} battery low \n    }\n}", 
            "title": "Request"
        }, 
        {
            "location": "/projects/notifications/walkthrough/#response_3", 
            "text": "204 No Content", 
            "title": "Response"
        }, 
        {
            "location": "/projects/notifications/walkthrough/#step-4-view-the-available-events-for-an-event-source", 
            "text": "", 
            "title": "Step 4:  View the available events for an event source"
        }, 
        {
            "location": "/projects/notifications/walkthrough/#request_4", 
            "text": "GET /eventsources/arn%3Aaws%3Adynamodb%3Aus-west-2%3A157731826412%3Atable%2FdeansTest/events\nAccept: application/vnd.aws-cdf-v1.0+json\nContent-Type: application/vnd.aws-cdf-v1.0+json", 
            "title": "Request"
        }, 
        {
            "location": "/projects/notifications/walkthrough/#response_4", 
            "text": "{\n     results : [\n        {\n             eventId :  5fb570e0-71b0-11e9-b534-5d33aa3bde97 ,\n             eventSourceId :  arn:aws:dynamodb:us-west-2:157731826412:table/deansTest ,\n             name :  Battery alert ,\n             conditions : {\n                 all : [\n                    {\n                         value :  $bl ,\n                         operator :  lessThanInclusive ,\n                         fact :  batteryLevel \n                    }\n                ]\n            },\n             ruleParameters : [\n                 bl \n            ],\n             enabled : true,\n             principal :  thingName ,\n             templates : {\n                 small :  {{=it.principalValue}} battery low ,\n                 default :  The battery for bowl {{=it.principalValue}} is low. \n            },\n             supportedTargets : {\n                 sms :  small ,\n                 email :  default \n            }\n        }\n    ]\n}", 
            "title": "Response"
        }, 
        {
            "location": "/projects/notifications/walkthrough/#step-5-subscribe-to-an-event", 
            "text": "user.id : unique ID of the user  principalValue : for an incoming rule to be evaluated for this user, the value of principalValue must represent the value of the principal attribute defined for the event  targets : optionally subscribe to any of the supported targets configured for the event  ruleParameterValues : if the event conditions contain parameters as part of its value, they must be provided when creating the subscription", 
            "title": "Step 5:  Subscribe to an event"
        }, 
        {
            "location": "/projects/notifications/walkthrough/#request_5", 
            "text": "POST /events/5fb570e0-71b0-11e9-b534-5d33aa3bde97/subscriptions\nAccept: application/vnd.aws-cdf-v1.0+json\nContent-Type: application/vnd.aws-cdf-v1.0+json\n{\n     user : {\n         id :  user123 \n    },\n     principalValue :  device001 ,\n     targets : {\n         email : {\n             address :  someone@asomewhere.com \n        },\n         sms : {\n             phoneNumber :  15551231234 \n        }\n    },\n     ruleParameterValues : {\n         bl : 15\n    }\n}", 
            "title": "Request"
        }, 
        {
            "location": "/projects/notifications/walkthrough/#response_5", 
            "text": "204 No Content", 
            "title": "Response"
        }, 
        {
            "location": "/projects/provisioning/overview/", 
            "text": "PROVISIONING REST API\n\n\nIntroduction\n\n\nThe provisioning service utilizes \nAWS IoT Device Provisioning\n to provide both programmatic (just-in-time) and bulk device provisioning capabilities.  The provisioning service simplifies the use of AWS IoT Device Provisioning by allowing for the use of S3 based provisioning templates, and abstracting a standard interface over both device provisioning capabilities.\n\n\nIn addition, the CDF Provisioning Service allows for extending the capabilities of the AWS IoT Device Provisioning templating functionality.  To provide an example, the AWS IoT Device Provisioning allows for creating certificate resources by providing a certificate signing request (CSR), a certificate ID of an existing device certificate, or a device certificate created with a CA certificate registered with AWS IoT.  This service extends these capabilities by also providing the ability to automatically create (and return) new keys and certificates for a device.\n\n\nIf used in conjunction with the CDF Asset Library service, provisioning templates can be assigned to one or more hierarchies, and then the appropriate provisioning template obtained based on the location of an asset within a hierarchy.\n\n\nAWS Dependencies\n\n\nThe provisioning service depends on the following AWS resources/services:\n\n\n\n\n\n\n\n\nService\n\n\nResource\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nAWS IoT\n\n\nThing Types\n\n\nPre-existing optional Thing Types to associate with new Things\n\n\n\n\n\n\nAWS IoT\n\n\nThing Groups\n\n\nPre-existing optional Thing Groups to associate with new Things\n\n\n\n\n\n\nAWS IoT\n\n\nPolicies\n\n\nPre-existing optional Policies to associate with new Things", 
            "title": "PROVISIONING REST API"
        }, 
        {
            "location": "/projects/provisioning/overview/#provisioning-rest-api", 
            "text": "", 
            "title": "PROVISIONING REST API"
        }, 
        {
            "location": "/projects/provisioning/overview/#introduction", 
            "text": "The provisioning service utilizes  AWS IoT Device Provisioning  to provide both programmatic (just-in-time) and bulk device provisioning capabilities.  The provisioning service simplifies the use of AWS IoT Device Provisioning by allowing for the use of S3 based provisioning templates, and abstracting a standard interface over both device provisioning capabilities.  In addition, the CDF Provisioning Service allows for extending the capabilities of the AWS IoT Device Provisioning templating functionality.  To provide an example, the AWS IoT Device Provisioning allows for creating certificate resources by providing a certificate signing request (CSR), a certificate ID of an existing device certificate, or a device certificate created with a CA certificate registered with AWS IoT.  This service extends these capabilities by also providing the ability to automatically create (and return) new keys and certificates for a device.  If used in conjunction with the CDF Asset Library service, provisioning templates can be assigned to one or more hierarchies, and then the appropriate provisioning template obtained based on the location of an asset within a hierarchy.", 
            "title": "Introduction"
        }, 
        {
            "location": "/projects/provisioning/overview/#aws-dependencies", 
            "text": "The provisioning service depends on the following AWS resources/services:     Service  Resource  Description      AWS IoT  Thing Types  Pre-existing optional Thing Types to associate with new Things    AWS IoT  Thing Groups  Pre-existing optional Thing Groups to associate with new Things    AWS IoT  Policies  Pre-existing optional Policies to associate with new Things", 
            "title": "AWS Dependencies"
        }, 
        {
            "location": "/projects/provisioning/provisioning-swagger/", 
            "text": "Connected Device Framework: Provisioning\n\n\nThe provisioning service utilizes \nAWS IoT Device Provisioning\n to provide both programmatic (just-in-time) and bulk device provisioning capabilities.  The provisioning service simplifies the use of AWS IoT Device Provisioning by allowing for the use of S3 based provisioning templates, and abstracting a standard interface over both device provisioning capabilities.\n\n\nIn addition, the CDF Provisioning Service allows for extending the capabilities of the AWS IoT Device Provisioning templating functionality.  To provide an example, the AWS IoT Device Provisioning allows for creating certificate resources by providing a certificate signing request (CSR), a certificate ID of an existing device certificate, or a device certificate created with a CA certificate registered with AWS IoT.  This service extends these capabilities by also providing the ability to automatically create (and return) new keys and certificates for a device.\n\n\nIf used in conjunction with the CDF Asset Library service, provisioning templates can be assigned to one or more hierarchies, and then the appropriate provisioning template obtained based on the location of an asset within a hierarchy.\n\n\nVersion: 1.0.0\n\n\n/things\n\n\nPOST\n\n\nSummary:\n\n\nProvision a new thing within the AWS IoT Device Registry\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nLocated in\n\n\nDescription\n\n\nRequired\n\n\nSchema\n\n\n\n\n\n\n\n\n\n\nbody\n\n\nbody\n\n\n\n\nYes\n\n\nProvisionRequest\n\n\n\n\n\n\n\n\nResponses\n\n\n\n\n\n\n\n\nCode\n\n\nDescription\n\n\nSchema\n\n\n\n\n\n\n\n\n\n\n201\n\n\nOK\n\n\nProvisionResponse\n\n\n\n\n\n\n400\n\n\n\n\n\n\n\n\n\n\n404\n\n\n\n\n\n\n\n\n\n\n\n\n/things/{thingName}\n\n\nGET\n\n\nSummary:\n\n\nRetrieve details of a provisioned thing from the AWS IoT Device Registry\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nLocated in\n\n\nDescription\n\n\nRequired\n\n\nSchema\n\n\n\n\n\n\n\n\n\n\nthingName\n\n\npath\n\n\nName of thing\n\n\nYes\n\n\nstring\n\n\n\n\n\n\n\n\nResponses\n\n\n\n\n\n\n\n\nCode\n\n\nDescription\n\n\nSchema\n\n\n\n\n\n\n\n\n\n\n200\n\n\nOK\n\n\nThing\n\n\n\n\n\n\n400\n\n\n\n\n\n\n\n\n\n\n404\n\n\n\n\n\n\n\n\n\n\n\n\nDELETE\n\n\nSummary:\n\n\nDelete a thing from the AWS IoT Device Registry.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nLocated in\n\n\nDescription\n\n\nRequired\n\n\nSchema\n\n\n\n\n\n\n\n\n\n\nthingName\n\n\npath\n\n\nName of thing\n\n\nYes\n\n\nstring\n\n\n\n\n\n\n\n\nResponses\n\n\n\n\n\n\n\n\nCode\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n204\n\n\nOK\n\n\n\n\n\n\n400\n\n\n\n\n\n\n\n\n404\n\n\n\n\n\n\n\n\n\n\n/things/{thingName}/certificates\n\n\nPATCH\n\n\nSummary:\n\n\nSets the status of all attached certificates.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nLocated in\n\n\nDescription\n\n\nRequired\n\n\nSchema\n\n\n\n\n\n\n\n\n\n\nthingName\n\n\npath\n\n\nName of thing\n\n\nYes\n\n\nstring\n\n\n\n\n\n\nbody\n\n\nbody\n\n\n\n\nYes\n\n\nPatchCertificateRequest\n\n\n\n\n\n\n\n\nResponses\n\n\n\n\n\n\n\n\nCode\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n204\n\n\nOK\n\n\n\n\n\n\n400\n\n\n\n\n\n\n\n\n404\n\n\n\n\n\n\n\n\n\n\n/bulkthings/{taskId}\n\n\nGET\n\n\nSummary:\n\n\nRetrieve details about a bulk registration task\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nLocated in\n\n\nDescription\n\n\nRequired\n\n\nSchema\n\n\n\n\n\n\n\n\n\n\ntaskId\n\n\npath\n\n\nId of the registration task\n\n\nYes\n\n\nstring\n\n\n\n\n\n\n\n\nResponses\n\n\n\n\n\n\n\n\nCode\n\n\nDescription\n\n\nSchema\n\n\n\n\n\n\n\n\n\n\n200\n\n\nOK\n\n\nBulkRegistrationTask\n\n\n\n\n\n\n400\n\n\n\n\n\n\n\n\n\n\n404\n\n\n\n\n\n\n\n\n\n\n\n\n/bulkthings\n\n\nPOST\n\n\nSummary:\n\n\nBulk provision a set of new things within the AWS IoT Device Registry\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nLocated in\n\n\nDescription\n\n\nRequired\n\n\nSchema\n\n\n\n\n\n\n\n\n\n\nbody\n\n\nbody\n\n\n\n\nNo\n\n\nBulkRegistrationRequest\n\n\n\n\n\n\n\n\nResponses\n\n\n\n\n\n\n\n\nCode\n\n\nDescription\n\n\nSchema\n\n\n\n\n\n\n\n\n\n\n201\n\n\nOK\n\n\nBulkRegistrationTask\n\n\n\n\n\n\n400\n\n\n\n\n\n\n\n\n\n\n404\n\n\n\n\n\n\n\n\n\n\n\n\nModels\n\n\nThing\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nthingName\n\n\nstring\n\n\n\n\nNo\n\n\n\n\n\n\narn\n\n\nstring\n\n\n\n\nNo\n\n\n\n\n\n\nthingType\n\n\nstring\n\n\n\n\nNo\n\n\n\n\n\n\nattributes\n\n\nobject\n\n\n\n\nNo\n\n\n\n\n\n\ntaskId\n\n\nstring\n\n\n\n\nNo\n\n\n\n\n\n\ncertificates\n\n\n[ \nCertificate\n ]\n\n\n\n\nNo\n\n\n\n\n\n\npolicies\n\n\n[ \nIotPolicy\n ]\n\n\n\n\nNo\n\n\n\n\n\n\ngroups\n\n\n[ \nIotGroup\n ]\n\n\n\n\nNo\n\n\n\n\n\n\n\n\nCertificate\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\ncertificateId\n\n\nstring\n\n\n\n\nNo\n\n\n\n\n\n\narn\n\n\nstring\n\n\n\n\nNo\n\n\n\n\n\n\ncertificateStatus\n\n\nstring\n\n\n\n\nNo\n\n\n\n\n\n\ncertificatePem\n\n\nstring\n\n\n\n\nNo\n\n\n\n\n\n\n\n\nIotPolicy\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\npolicyName\n\n\nstring\n\n\n\n\nNo\n\n\n\n\n\n\narn\n\n\nstring\n\n\n\n\nNo\n\n\n\n\n\n\npolicyDocument\n\n\nstring\n\n\n\n\nNo\n\n\n\n\n\n\n\n\nIotGroup\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\ngroupName\n\n\nstring\n\n\n\n\nNo\n\n\n\n\n\n\narn\n\n\nstring\n\n\n\n\nNo\n\n\n\n\n\n\nattributes\n\n\nobject\n\n\n\n\nNo\n\n\n\n\n\n\n\n\nProvisionRequest\n\n\nProvisiong a new thing request\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nprovisioningTemplateId\n\n\nstring\n\n\nId of an existing provisioning template\n\n\nNo\n\n\n\n\n\n\nparameters\n\n\nobject\n\n\nMap of key value pairs for all parameters defined in the provisioning template.\n\n\nNo\n\n\n\n\n\n\ncdfProvisioningParameters\n\n\nobject\n\n\nOptional parameters used by CDF in provisioning process.\n\n\nNo\n\n\n\n\n\n\n\n\nProvisionResponse\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\ncertificatePem\n\n\nstring\n\n\n\n\nNo\n\n\n\n\n\n\npublicKey\n\n\nstring\n\n\n\n\nNo\n\n\n\n\n\n\nprivateKey\n\n\nstring\n\n\n\n\nNo\n\n\n\n\n\n\nresourceArns\n\n\nobject\n\n\n\n\nNo\n\n\n\n\n\n\n\n\nBulkRegistrationTask\n\n\nThing bulk registration task\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\ntaskId\n\n\nstring\n\n\nId of the registration task\n\n\nNo\n\n\n\n\n\n\nstatus\n\n\nstring\n\n\nStatus of the task\n\n\nNo\n\n\n\n\n\n\npercentageProgress\n\n\ninteger\n\n\nPercentage complete\n\n\nNo\n\n\n\n\n\n\nsuccessCount\n\n\ninteger\n\n\nNo. assets that were provisioned successful\n\n\nNo\n\n\n\n\n\n\nfailureCount\n\n\ninteger\n\n\nNo. assets that failed during provisioning\n\n\nNo\n\n\n\n\n\n\ncreationDate\n\n\ndateTime\n\n\nDate/time the task was created\n\n\nNo\n\n\n\n\n\n\nlastModifiedDate\n\n\ndateTime\n\n\nDate/time the task was last updated\n\n\nNo\n\n\n\n\n\n\n\n\nBulkRegistrationTaskList\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\ntasks\n\n\n[ \nBulkRegistrationTask\n ]\n\n\na list of bulk registration tasks\n\n\nNo\n\n\n\n\n\n\n\n\nBulkRegistrationRequest\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nprovisioningTemplateId\n\n\nstring\n\n\nId of an existing provisioning template\n\n\nNo\n\n\n\n\n\n\nparameters\n\n\n[ object ]\n\n\nList containing a map of key value pairs for all parameters defined in the provisioning template.  Each element in the list represents a new thing to provision.\n\n\nNo\n\n\n\n\n\n\n\n\nPatchCertificateRequest\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\ncertificateStatus\n\n\nstring\n\n\nCertificate status\n\n\nNo\n\n\n\n\n\n\n\n\nError\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nmessage\n\n\nstring\n\n\n\n\nNo", 
            "title": "Connected Device Framework: Provisioning"
        }, 
        {
            "location": "/projects/provisioning/provisioning-swagger/#connected-device-framework-provisioning", 
            "text": "The provisioning service utilizes  AWS IoT Device Provisioning  to provide both programmatic (just-in-time) and bulk device provisioning capabilities.  The provisioning service simplifies the use of AWS IoT Device Provisioning by allowing for the use of S3 based provisioning templates, and abstracting a standard interface over both device provisioning capabilities.  In addition, the CDF Provisioning Service allows for extending the capabilities of the AWS IoT Device Provisioning templating functionality.  To provide an example, the AWS IoT Device Provisioning allows for creating certificate resources by providing a certificate signing request (CSR), a certificate ID of an existing device certificate, or a device certificate created with a CA certificate registered with AWS IoT.  This service extends these capabilities by also providing the ability to automatically create (and return) new keys and certificates for a device.  If used in conjunction with the CDF Asset Library service, provisioning templates can be assigned to one or more hierarchies, and then the appropriate provisioning template obtained based on the location of an asset within a hierarchy.", 
            "title": "Connected Device Framework: Provisioning"
        }, 
        {
            "location": "/projects/provisioning/provisioning-swagger/#version-100", 
            "text": "", 
            "title": "Version: 1.0.0"
        }, 
        {
            "location": "/projects/provisioning/provisioning-swagger/#things", 
            "text": "", 
            "title": "/things"
        }, 
        {
            "location": "/projects/provisioning/provisioning-swagger/#post", 
            "text": "", 
            "title": "POST"
        }, 
        {
            "location": "/projects/provisioning/provisioning-swagger/#summary", 
            "text": "Provision a new thing within the AWS IoT Device Registry", 
            "title": "Summary:"
        }, 
        {
            "location": "/projects/provisioning/provisioning-swagger/#parameters", 
            "text": "Name  Located in  Description  Required  Schema      body  body   Yes  ProvisionRequest", 
            "title": "Parameters"
        }, 
        {
            "location": "/projects/provisioning/provisioning-swagger/#responses", 
            "text": "Code  Description  Schema      201  OK  ProvisionResponse    400      404", 
            "title": "Responses"
        }, 
        {
            "location": "/projects/provisioning/provisioning-swagger/#thingsthingname", 
            "text": "", 
            "title": "/things/{thingName}"
        }, 
        {
            "location": "/projects/provisioning/provisioning-swagger/#get", 
            "text": "", 
            "title": "GET"
        }, 
        {
            "location": "/projects/provisioning/provisioning-swagger/#summary_1", 
            "text": "Retrieve details of a provisioned thing from the AWS IoT Device Registry", 
            "title": "Summary:"
        }, 
        {
            "location": "/projects/provisioning/provisioning-swagger/#parameters_1", 
            "text": "Name  Located in  Description  Required  Schema      thingName  path  Name of thing  Yes  string", 
            "title": "Parameters"
        }, 
        {
            "location": "/projects/provisioning/provisioning-swagger/#responses_1", 
            "text": "Code  Description  Schema      200  OK  Thing    400      404", 
            "title": "Responses"
        }, 
        {
            "location": "/projects/provisioning/provisioning-swagger/#delete", 
            "text": "", 
            "title": "DELETE"
        }, 
        {
            "location": "/projects/provisioning/provisioning-swagger/#summary_2", 
            "text": "Delete a thing from the AWS IoT Device Registry.", 
            "title": "Summary:"
        }, 
        {
            "location": "/projects/provisioning/provisioning-swagger/#parameters_2", 
            "text": "Name  Located in  Description  Required  Schema      thingName  path  Name of thing  Yes  string", 
            "title": "Parameters"
        }, 
        {
            "location": "/projects/provisioning/provisioning-swagger/#responses_2", 
            "text": "Code  Description      204  OK    400     404", 
            "title": "Responses"
        }, 
        {
            "location": "/projects/provisioning/provisioning-swagger/#thingsthingnamecertificates", 
            "text": "", 
            "title": "/things/{thingName}/certificates"
        }, 
        {
            "location": "/projects/provisioning/provisioning-swagger/#patch", 
            "text": "", 
            "title": "PATCH"
        }, 
        {
            "location": "/projects/provisioning/provisioning-swagger/#summary_3", 
            "text": "Sets the status of all attached certificates.", 
            "title": "Summary:"
        }, 
        {
            "location": "/projects/provisioning/provisioning-swagger/#parameters_3", 
            "text": "Name  Located in  Description  Required  Schema      thingName  path  Name of thing  Yes  string    body  body   Yes  PatchCertificateRequest", 
            "title": "Parameters"
        }, 
        {
            "location": "/projects/provisioning/provisioning-swagger/#responses_3", 
            "text": "Code  Description      204  OK    400     404", 
            "title": "Responses"
        }, 
        {
            "location": "/projects/provisioning/provisioning-swagger/#bulkthingstaskid", 
            "text": "", 
            "title": "/bulkthings/{taskId}"
        }, 
        {
            "location": "/projects/provisioning/provisioning-swagger/#get_1", 
            "text": "", 
            "title": "GET"
        }, 
        {
            "location": "/projects/provisioning/provisioning-swagger/#summary_4", 
            "text": "Retrieve details about a bulk registration task", 
            "title": "Summary:"
        }, 
        {
            "location": "/projects/provisioning/provisioning-swagger/#parameters_4", 
            "text": "Name  Located in  Description  Required  Schema      taskId  path  Id of the registration task  Yes  string", 
            "title": "Parameters"
        }, 
        {
            "location": "/projects/provisioning/provisioning-swagger/#responses_4", 
            "text": "Code  Description  Schema      200  OK  BulkRegistrationTask    400      404", 
            "title": "Responses"
        }, 
        {
            "location": "/projects/provisioning/provisioning-swagger/#bulkthings", 
            "text": "", 
            "title": "/bulkthings"
        }, 
        {
            "location": "/projects/provisioning/provisioning-swagger/#post_1", 
            "text": "", 
            "title": "POST"
        }, 
        {
            "location": "/projects/provisioning/provisioning-swagger/#summary_5", 
            "text": "Bulk provision a set of new things within the AWS IoT Device Registry", 
            "title": "Summary:"
        }, 
        {
            "location": "/projects/provisioning/provisioning-swagger/#parameters_5", 
            "text": "Name  Located in  Description  Required  Schema      body  body   No  BulkRegistrationRequest", 
            "title": "Parameters"
        }, 
        {
            "location": "/projects/provisioning/provisioning-swagger/#responses_5", 
            "text": "Code  Description  Schema      201  OK  BulkRegistrationTask    400      404", 
            "title": "Responses"
        }, 
        {
            "location": "/projects/provisioning/provisioning-swagger/#models", 
            "text": "", 
            "title": "Models"
        }, 
        {
            "location": "/projects/provisioning/provisioning-swagger/#thing", 
            "text": "Name  Type  Description  Required      thingName  string   No    arn  string   No    thingType  string   No    attributes  object   No    taskId  string   No    certificates  [  Certificate  ]   No    policies  [  IotPolicy  ]   No    groups  [  IotGroup  ]   No", 
            "title": "Thing"
        }, 
        {
            "location": "/projects/provisioning/provisioning-swagger/#certificate", 
            "text": "Name  Type  Description  Required      certificateId  string   No    arn  string   No    certificateStatus  string   No    certificatePem  string   No", 
            "title": "Certificate"
        }, 
        {
            "location": "/projects/provisioning/provisioning-swagger/#iotpolicy", 
            "text": "Name  Type  Description  Required      policyName  string   No    arn  string   No    policyDocument  string   No", 
            "title": "IotPolicy"
        }, 
        {
            "location": "/projects/provisioning/provisioning-swagger/#iotgroup", 
            "text": "Name  Type  Description  Required      groupName  string   No    arn  string   No    attributes  object   No", 
            "title": "IotGroup"
        }, 
        {
            "location": "/projects/provisioning/provisioning-swagger/#provisionrequest", 
            "text": "Provisiong a new thing request     Name  Type  Description  Required      provisioningTemplateId  string  Id of an existing provisioning template  No    parameters  object  Map of key value pairs for all parameters defined in the provisioning template.  No    cdfProvisioningParameters  object  Optional parameters used by CDF in provisioning process.  No", 
            "title": "ProvisionRequest"
        }, 
        {
            "location": "/projects/provisioning/provisioning-swagger/#provisionresponse", 
            "text": "Name  Type  Description  Required      certificatePem  string   No    publicKey  string   No    privateKey  string   No    resourceArns  object   No", 
            "title": "ProvisionResponse"
        }, 
        {
            "location": "/projects/provisioning/provisioning-swagger/#bulkregistrationtask", 
            "text": "Thing bulk registration task     Name  Type  Description  Required      taskId  string  Id of the registration task  No    status  string  Status of the task  No    percentageProgress  integer  Percentage complete  No    successCount  integer  No. assets that were provisioned successful  No    failureCount  integer  No. assets that failed during provisioning  No    creationDate  dateTime  Date/time the task was created  No    lastModifiedDate  dateTime  Date/time the task was last updated  No", 
            "title": "BulkRegistrationTask"
        }, 
        {
            "location": "/projects/provisioning/provisioning-swagger/#bulkregistrationtasklist", 
            "text": "Name  Type  Description  Required      tasks  [  BulkRegistrationTask  ]  a list of bulk registration tasks  No", 
            "title": "BulkRegistrationTaskList"
        }, 
        {
            "location": "/projects/provisioning/provisioning-swagger/#bulkregistrationrequest", 
            "text": "Name  Type  Description  Required      provisioningTemplateId  string  Id of an existing provisioning template  No    parameters  [ object ]  List containing a map of key value pairs for all parameters defined in the provisioning template.  Each element in the list represents a new thing to provision.  No", 
            "title": "BulkRegistrationRequest"
        }, 
        {
            "location": "/projects/provisioning/provisioning-swagger/#patchcertificaterequest", 
            "text": "Name  Type  Description  Required      certificateStatus  string  Certificate status  No", 
            "title": "PatchCertificateRequest"
        }, 
        {
            "location": "/projects/provisioning/provisioning-swagger/#error", 
            "text": "Name  Type  Description  Required      message  string   No", 
            "title": "Error"
        }, 
        {
            "location": "/projects/provisioning/provisioning-templates/", 
            "text": "PROVISIONING TEMPLATES\n\n\nThe provisioning service manages the provisioning of things, certificates and policies via \nProvisioning Templates\n.\n\n\nIn addition, CDF extends the provisoning service by allowing the following extra configuration to be applied to a provisioning template:\n\n\n\n\n\n\n\n\nJson attribute\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n$.CDF.clientIdMustMatchThingName\n\n\nIf set to \ntrue\n, a policy will be created and associated with the certificate in context that enforces a device's MQTT clientId to match the AWS Thing Name.  By default, or not provided, is \nfalse\n.\n\n\n\n\n\n\n$.CDF.createDeviceCertificate\n\n\nIf set to \ntrue\n, a certificate will be created on behlaf of the device, which can then be used as configured in the template to registere and associate with the device.  By default, or not provided, is \nfalse\n.", 
            "title": "PROVISIONING TEMPLATES"
        }, 
        {
            "location": "/projects/provisioning/provisioning-templates/#provisioning-templates", 
            "text": "The provisioning service manages the provisioning of things, certificates and policies via  Provisioning Templates .  In addition, CDF extends the provisoning service by allowing the following extra configuration to be applied to a provisioning template:     Json attribute  Description      $.CDF.clientIdMustMatchThingName  If set to  true , a policy will be created and associated with the certificate in context that enforces a device's MQTT clientId to match the AWS Thing Name.  By default, or not provided, is  false .    $.CDF.createDeviceCertificate  If set to  true , a certificate will be created on behlaf of the device, which can then be used as configured in the template to registere and associate with the device.  By default, or not provided, is  false .", 
            "title": "PROVISIONING TEMPLATES"
        }, 
        {
            "location": "/projects/request-queue/overview/", 
            "text": "CDF REQUEST QUEUE\n\n\nIntroduction\n\n\nThe CDF Request queue project is a service for queueing API requests for later processing. The intention of this service is to be deployed in a secondary AWS region to act as a HA mechanism for the actual API in a primary region. This service involves:\n\n\n\n\nAPI Gateway - a proxy endpoint that proxies requests to the request Lambda function\n\n\nRequest Lambda - function which takes incoming API calls and queues them in an SNS FIFI queue\n\n\nReplay Lambda - a function which takes events off of the request queue and tries to replay them to the primary region\n\n\nRequest Queue - an SQS FIFO queue which holds the requests until they can be replayed to the primary region\n\n\nDLQ - a dead letter queue which holds any requests which received errors upon trying to replay to the primary region\n\n\n\n\nArchitecture\n\n\n\n\nQueueing\n\n\nRequests are queued in SQS as they are recevied by API Gateway. When successfully queued the service responds with an \nHTTP 202 - Accepted\n response. A configuration item exists to determine which HTTP methods are queued and which are not. Typically a GET request would not make sense to queue. In the case of not queuing the request an \nHTTP 503 - Service Unavailable\n response is given.\n\n\nConfiguration\n\n\n\n\n\n\n\n\nConfig Item\n\n\nPurpose\n\n\n\n\n\n\n\n\n\n\nAllowed Methods\n\n\nHTTP methods which will be queued. Methods not in this list will receive an \nHTTP 503 - Service Unavailable\n response.\n\n\n\n\n\n\n\n\nReplay\n\n\nReplay is handled by the replay Lambda function. This function can be used as a Lambda or can be a reference implementation on how to replay events. The replay occurs by invoking the primary region's Lambda function directly. Any authorization for the queued call needs to be handled by the request queue API gateway. Once in the queue, the request is assumed to be authorized.\n\n\nConfiguration\n\n\n\n\n\n\n\n\nConfig Item\n\n\nPurpose\n\n\n\n\n\n\n\n\n\n\nReplay Batch Size\n\n\nNumber of SQS events are retrieved at one time\n\n\n\n\n\n\nLambda Stop Lambda At Remaining Millis\n\n\nThe replay Lambda will continue to process events off of the request queue as long as there are events. It will stop processing with this much time remaining before the Lambda timeout.\n\n\n\n\n\n\nPrimary Health Check Url\n\n\nThe replay lambda will check this URL to determine if the primary region is available. Now a simplistic check of receiving a 200.\n\n\n\n\n\n\nPrimary Health Check Response\n\n\nThe expected response from the health check call.\n\n\n\n\n\n\nPrimary API Lambda Arn\n\n\nThe function ARN of the API Lambda function in the primary region. This is the Lambda function which will be invoked to replay requests.", 
            "title": "CDF REQUEST QUEUE"
        }, 
        {
            "location": "/projects/request-queue/overview/#cdf-request-queue", 
            "text": "", 
            "title": "CDF REQUEST QUEUE"
        }, 
        {
            "location": "/projects/request-queue/overview/#introduction", 
            "text": "The CDF Request queue project is a service for queueing API requests for later processing. The intention of this service is to be deployed in a secondary AWS region to act as a HA mechanism for the actual API in a primary region. This service involves:   API Gateway - a proxy endpoint that proxies requests to the request Lambda function  Request Lambda - function which takes incoming API calls and queues them in an SNS FIFI queue  Replay Lambda - a function which takes events off of the request queue and tries to replay them to the primary region  Request Queue - an SQS FIFO queue which holds the requests until they can be replayed to the primary region  DLQ - a dead letter queue which holds any requests which received errors upon trying to replay to the primary region", 
            "title": "Introduction"
        }, 
        {
            "location": "/projects/request-queue/overview/#architecture", 
            "text": "", 
            "title": "Architecture"
        }, 
        {
            "location": "/projects/request-queue/overview/#queueing", 
            "text": "Requests are queued in SQS as they are recevied by API Gateway. When successfully queued the service responds with an  HTTP 202 - Accepted  response. A configuration item exists to determine which HTTP methods are queued and which are not. Typically a GET request would not make sense to queue. In the case of not queuing the request an  HTTP 503 - Service Unavailable  response is given.", 
            "title": "Queueing"
        }, 
        {
            "location": "/projects/request-queue/overview/#configuration", 
            "text": "Config Item  Purpose      Allowed Methods  HTTP methods which will be queued. Methods not in this list will receive an  HTTP 503 - Service Unavailable  response.", 
            "title": "Configuration"
        }, 
        {
            "location": "/projects/request-queue/overview/#replay", 
            "text": "Replay is handled by the replay Lambda function. This function can be used as a Lambda or can be a reference implementation on how to replay events. The replay occurs by invoking the primary region's Lambda function directly. Any authorization for the queued call needs to be handled by the request queue API gateway. Once in the queue, the request is assumed to be authorized.", 
            "title": "Replay"
        }, 
        {
            "location": "/projects/request-queue/overview/#configuration_1", 
            "text": "Config Item  Purpose      Replay Batch Size  Number of SQS events are retrieved at one time    Lambda Stop Lambda At Remaining Millis  The replay Lambda will continue to process events off of the request queue as long as there are events. It will stop processing with this much time remaining before the Lambda timeout.    Primary Health Check Url  The replay lambda will check this URL to determine if the primary region is available. Now a simplistic check of receiving a 200.    Primary Health Check Response  The expected response from the health check call.    Primary API Lambda Arn  The function ARN of the API Lambda function in the primary region. This is the Lambda function which will be invoked to replay requests.", 
            "title": "Configuration"
        }
    ]
}