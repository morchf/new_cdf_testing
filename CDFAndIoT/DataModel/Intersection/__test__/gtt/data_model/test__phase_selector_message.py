import binascii

from pydantic import parse_obj_as

from gtt.data_model.intersection import Intersection, PhaseSelector
from gtt.data_model.intersection.phase_selector_message import (
    GetConfigurationDateTimeMessage,
    GetDeviceNameMessage,
    GetGpsLocationMessage,
    GetMacAddressMessage,
    GetUnitPropertiesMessage,
    PingMessage,
    SetDeviceNameMessage,
    SetGpsLocationMessage,
)


class TestPhaseSelectorMessage:
    def test__phase_selector_message__ping_message_pack(self):
        message = PingMessage.pack()

        assert message == binascii.a2b_hex("1011FF80000001A01003")

    def test__phase_selector_message__pack(self):
        assert GetGpsLocationMessage.pack() == binascii.a2b_hex("100CFF800000019B1003")
        assert PingMessage.pack() == binascii.a2b_hex("1011FF80000001A01003")
        assert GetMacAddressMessage.pack() == binascii.a2b_hex("1004FF80000001931003")
        assert GetDeviceNameMessage.pack() == binascii.a2b_hex("1020FF80000001AF1003")
        assert GetConfigurationDateTimeMessage.pack() == binascii.a2b_hex(
            "101AFF80000001A91003"
        )

    def test__phase_selector_message__pack_write(self):
        intersection = Intersection(
            **{
                "serialNumber": "123456789",
                "intersectionId": 12348,
                "intersectionName": "New name 2",
                "latitude": 37.343312,
                "longitude": 122.453532,
                "lastCommunicated": "2022-07-10 01:01:01.000",
                "make": "GTT",
                "model": "v764",
                "timezone": "CST",
                "operationMode": "High",
                "status": "Normal",
                "firmwareVersion": 1.2,
                "ipAddress": "3.86.39.209",
                "port": 3000,
            }
        )

        assert intersection.intersection_name is not None
        assert intersection.device_name is not None

        message = SetDeviceNameMessage.pack(parse_obj_as(PhaseSelector, intersection))

        assert (
            message
            == b"\x10!\xff\x80\x00\x00\x00N\x00e\x00w\x00 \x00n\x00a\x00m\x00e\x00 \x002\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\x000\n\x8d\x10\x03"
        )

        message = SetGpsLocationMessage.pack(parse_obj_as(PhaseSelector, intersection))

        assert (
            message
            == b"\x10\x0b\xff\x80\x00\x00\x027\xb7\xe3\x07I\xb9w\x04\xed\x10\x03"
        )

    def test__phase_selector_message__unpack_successful(self):
        GetUnitPropertiesMessage.unpack(
            b"\x10\x9f\x08\x00\x00\x00\x00\xa1V764KM000110.05.003\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\xd4A\xec\x07Iix\x08\x91\x10\x03"
        )
        PingMessage.unpack(
            b"\x10\x91\x08\x00\x00\x00\x00/V764KM000110.050000000000\x08\x1f\x16\x14\x05\x15\x08@\x06\xaf\x10\x03"
        )
        GetConfigurationDateTimeMessage.unpack(
            b"\x10\x9a\x08\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xb6\x10\x03"
        )
