version: 0.2
phases:
  install:
    runtime-versions:
      python: 3.8
  pre_build:
    commands:
      - apt-get -qq  update
      - pip3 install aws-sam-cli -qq
      - pip3 install awscli -qq
      - pip3 install git-remote-codecommit
      - sam --version
      - pip3 install boto3
      - pip3 install requests
      - docker pull amazon/aws-stepfunctions-local
      - docker pull amazon/dynamodb-local
      - sudo apt install python3-pip
      - sudo apt install unixodbc-dev

  build:
    commands:
      - pip3 install requests
      - aws configure set default.region us-east-1
      - sudo ifconfig eth0:0 172.16.123.1 up
      - sam build --use-container
      - nohup localstack start &
      - nohup sam local start-api &
      - nohup sam local start-lambda &
      - aws configure set default.region us-east-1
      - docker run -d --name sql_server_test -e 'ACCEPT_EULA=Y' -e 'SA_PASSWORD=Gtt@2020' -p 1433:1433 microsoft/mssql-server-linux
      - sudo docker exec -it sql_server_test mkdir /var/opt/mssql/backup
      - sudo docker cp OpticomManagement.bak sql_server_test:/var/opt/mssql/backup
      - sudo docker exec -it sql_server_test /opt/mssql-tools/bin/sqlcmd -S localhost -U SA -P 'Gtt@2020' -Q 'RESTORE DATABASE OpticomManagement FROM DISK ="/var/opt/mssql/backup/OpticomManagement.bak" WITH MOVE "OpticomManagement_dat" TO "/var/opt/mssql/data/OpticomManagement.mdf", MOVE "OpticomManagement_log" TO "/var/opt/mssql/data/OpticomManagement.ldf"'
      - docker run -d -p 8000:8000 amazon/dynamodb-local -jar DynamoDBLocal.jar -sharedDb
      - docker run -d -p 8083:8083  --network host --env-file aws-stepfunctions-local-credentials.txt amazon/aws-stepfunctions-local
      - pytest test_DyanmoDeploy.py -s -v
      - sam  package --region "${Region}" --template-file template.yml --s3-bucket "${S3}" --output-template-file deploy.yml    > /dev/null 2>&1
      - sam deploy --region "${Region}" --template-file deploy.yml --stack-name VPSAPI1 --capabilities CAPABILITY_NAMED_IAM  --no-fail-on-empty-changeset
