AWSTemplateFormatVersion: 2010-09-09
Description: Pipeline for Client API, Lambdas, Airflow, and Redshift
Metadata:
  cfn-lint:
    config:
      ignore_checks:
        - I3042 # Hardcoded Partition in ARN or incorrectly placed Pseudo Parameters
        - E3012 # Should be of type String

Parameters:
  CodeOrg:
    Type: String
    AllowedPattern: "[A-Za-z0-9-]+"
    Default: gtt
  CodeRepository:
    Type: String
    AllowedPattern: "[A-Za-z0-9-]+"
    Default: smart-city-platform
  CodeBranch:
    Type: String
    AllowedPattern: "[A-Za-z0-9-]+"
    Default: develop
  CodeStarConnectionId:
    Type: String
  PathToBuildspec:
    Type: String
    Default: Deployment/ClientAPIPipeline/ClientAPIBuildspec.yml
  Environment:
    Description: An environment name that is suffixed to resource names
    Type: String
    Default: develop
    AllowedValues:
      - develop
      - production
      - test
      - pilot
  CreateArtifactsS3Bucket:
    Type: String
    AllowedValues:
      - "true"
      - "false"
    Default: "true"
  S3BucketNamePrefix:
    Type: String
    AllowedPattern: "[A-Za-z0-9-]+"
    Default: client-api-artifacts
  VpcCidr:
    Type: String
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    Default: 10.10.4.0/24
  PrivateSubnet1Cidr:
    Type: String
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    Default: 10.10.4.128/26
  PrivateSubnet2Cidr:
    Type: String
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    Default: 10.10.4.192/26
  PublicSubnet1Cidr:
    Type: String
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    Default: 10.10.4.0/26
  PublicSubnet2Cidr:
    Type: String
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    Default: 10.10.4.64/26

Conditions:
  CreateArtifactsS3Bucket: !Equals [!Ref CreateArtifactsS3Bucket, "true"]
  IsProd: !Equals [!Ref Environment, "production"]

Resources:
  ##### Networking #####

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-VPC"

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-IGW"

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs ""]
      CidrBlock: !Ref PublicSubnet1Cidr
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${Environment} Public Subnet (AZ1)

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [1, !GetAZs ""]
      CidrBlock: !Ref PublicSubnet2Cidr
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${Environment} Public Subnet (AZ2)

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs ""]
      CidrBlock: !Ref PrivateSubnet1Cidr
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${Environment} Private Subnet (AZ1)

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [1, !GetAZs ""]
      CidrBlock: !Ref PrivateSubnet2Cidr
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${Environment} Private Subnet (AZ2)

  NatGateway1EIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc

  NatGateway2EIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc

  NatGateway1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGateway1EIP.AllocationId
      SubnetId: !Ref PublicSubnet1

  NatGateway2:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGateway2EIP.AllocationId
      SubnetId: !Ref PublicSubnet2

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${Environment} Public Routes

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${Environment} Private Routes (AZ1)

  DefaultPrivateRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway1

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref PrivateSubnet1

  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${Environment} Private Routes (AZ2)

  DefaultPrivateRoute2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway2

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      SubnetId: !Ref PrivateSubnet2

  NoIngressSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "no-ingress-sg"
      GroupDescription: "Security group with no ingress rule"
      VpcId: !Ref VPC

  ##### IAM #####

  CodeBuildServiceRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Sid: ExtraPermissions
                Effect: Allow
                Action:
                  - "s3:*"
                  - "kms:*"
                  - "ssm:PutParameter"
                  - "ssm:DeleteParameter"
                Resource: "*"
              - Sid: CloudWatchLogsPolicy
                Effect: Allow
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "*"
              - Sid: CodeCommitPolicy
                Effect: Allow
                Action:
                  - "codecommit:GitPull"
                Resource: "*"
              - Sid: S3GetObjectPolicy
                Effect: Allow
                Action:
                  - "s3:GetObject"
                  - "s3:GetObjectVersion"
                Resource: "*"
              - Sid: S3PutObjectPolicy
                Effect: Allow
                Action:
                  - "s3:ListBucket"
                  - "s3:PutObject"
                  - "s3:DeleteObject"
                Resource: "*"
              - Sid: CodeBuildPolicy
                Action:
                  - "codebuild:BatchGetBuilds"
                  - "codebuild:StartBuild"
                Resource: "*"
                Effect: Allow
              - Sid: S3BucketIdentity
                Effect: Allow
                Action:
                  - "s3:GetBucketAcl"
                  - "s3:GetBucketLocation"
                Resource: "*"
              - Sid: CFPolicy
                Effect: Allow
                Action:
                  - "cloudformation:DescribeStacks"
                  - "cloudformation:GetTemplate"
                  - "cloudformation:CreateChangeSet"
                  - "cloudformation:DescribeChangeSet"
                  - "cloudformation:DeleteChangeSet"
                  - "cloudformation:ExecuteChangeSet"
                  - "cloudformation:DescribeStackEvents"
                  - "cloudformation:DeleteStack"
                Resource: !Sub "arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/*/*"
              - Sid: APIDeployPolicy
                Effect: Allow
                Action:
                  - "apigateway:*"
                  - "iam:*"
                  - "lambda:*"
                Resource:
                  - "*"
              - Sid: AttachLambdaToVpc
                Effect: Allow
                Action:
                  - "ec2:*"
                Resource:
                  - "*"
              - Sid: AccessSecretsManager
                Effect: Allow
                Action:
                  - "secretsmanager:GetRandomPassword"
                  - "secretsmanager:CreateSecret"
                  - "secretsmanager:UpdateSecret"
                  - "secretsmanager:UpdateSecretVersionStage"
                  - "secretsmanager:GetResourcePolicy"
                  - "secretsmanager:DeleteSecret"
                  - "secretsmanager:ListSecrets"
                  - "secretsmanager:DescribeSecret"
                Resource:
                  - "*"
              - Sid: AccessCognito
                Effect: Allow
                Action:
                  - cognito-idp:ListUserPools
                Resource:
                  - "*"
              - Sid: DockerDwhDeployment
                Effect: Allow
                Action:
                  - ecr:*
                  - secretsmanager:GetSecretValue
                Resource:
                  - "*"
              - Sid: CdkDeployment
                Effect: Allow
                Action:
                  - ssm:GetParameter
                Resource:
                  - "*"

  CodePipelineServiceRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
            Action: "sts:AssumeRole"
          - Effect: Allow
            Principal:
              Service: cloudformation.amazonaws.com
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Sid: CloudWatchLogsPolicy
                Effect: Allow
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "*"
              - Sid: CodeCommitPolicy
                Effect: Allow
                Action:
                  - "codecommit:GitPull"
                Resource: "*"
              - Sid: ManageDataLakePolicy
                Effect: Allow
                Action:
                  - "s3:CreateBucket"
                  - "s3:DeleteBucket"
                  - "glue:CreateCrawler"
                  - "glue:DeleteCrawler"
                  - "glue:CreateDatabase"
                  - "glue:DeleteDatabase"
                  - "glue:UpdateDatabase"
                  - "glue:GetDatabase"
                  - "glue:*"
                  - "s3:GetEncryptionConfiguration"
                Resource: "*"
              - Sid: S3GetObjectPolicy
                Effect: Allow
                Action:
                  - "s3:GetObject"
                  - "s3:GetObjectVersion"
                Resource: "*"
              - Sid: S3PutObjectPolicy
                Effect: Allow
                Action:
                  - "s3:PutObject"
                Resource: "*"
              - Sid: S3BucketIdentity
                Effect: Allow
                Action:
                  - "s3:GetBucketAcl"
                  - "s3:GetBucketLocation"
                  - "s3:ListBucket"
                Resource: "*"
              - Sid: CodeBuildPolicy
                Effect: Allow
                Action:
                  - "codebuild:BatchGetBuilds"
                  - "codebuild:StartBuild"
                Resource: "*"
              - Sid: AccessStacks
                Effect: Allow
                Action:
                  - cloudformation:CreateUploadBucket
                  - cloudformation:ListStacks
                  - cloudformation:ListStackInstances
                  - cloudformation:DescribeChangeSetHooks
                  - cloudformation:DescribeStacks
                  - cloudformation:ListStackSets
                  - cloudformation:DescribeChangeSet
                  - cloudformation:CreateStackSet
                  - cloudformation:ListStackResources
                Resource: "*"
              - Sid: DeployStacks
                Effect: Allow
                Action:
                  - cloudformation:DescribeStacks
                  - cloudformation:ImportStacksToStackSet
                  - cloudformation:DeleteStackInstances
                  - cloudformation:CancelUpdateStack
                  - cloudformation:UpdateStackInstances
                  - cloudformation:UpdateTerminationProtection
                  - cloudformation:UpdateStackSet
                  - cloudformation:CreateChangeSet
                  - cloudformation:DeleteStackSet
                  - cloudformation:CreateStackInstances
                  - cloudformation:DeleteChangeSet
                  - cloudformation:ContinueUpdateRollback
                  - cloudformation:RollbackStack
                  - cloudformation:CreateStack
                  - cloudformation:DeleteStack
                  - cloudformation:UpdateStack
                  - cloudformation:ExecuteChangeSet
                Resource: !Sub >-
                  arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/ClientAPI-*/*
              - Sid: AssumeStackRole
                Effect: Allow
                Action:
                  - sts:AssumeRole
                  - iam:*
                Resource: "*"
              - Sid: S3Management
                Effect: Allow
                Action:
                  - s3:*
                Resource:
                  - "*"
              - Sid: ManageAirflowEnvironment
                Effect: Allow
                Action:
                  - airflow:*
                Resource:
                  - "*"
              - Sid: SetupNetwork
                Effect: Allow
                Action:
                  - ec2:*
                Resource:
                  - "*"
              - Sid: UseCodeStarConnection
                Effect: Allow
                Action:
                  - "codestar-connections:UseConnection"
                Resource: !Sub >-
                  arn:aws:codestar-connections:${AWS::Region}:${AWS::AccountId}:connection/${CodeStarConnectionId}
              - Sid: RedshiftSetup
                Effect: Allow
                Action:
                  - secretsmanager:*
                  - redshift:*
                  - athena:*
                Resource:
                  - "*"

  ##### Temporary Source Artifacts S3 Bucket #####
  TemporarySourceBucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: Private
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      LifecycleConfiguration:
        Rules:
          - Id: CleanRule
            Prefix: cleanup
            Status: Enabled
            ExpirationInDays: 7
    DeletionPolicy: Delete

  ##### Deploy Artifacts S3 Bucket #####
  DeployS3Bucket:
    Condition: CreateArtifactsS3Bucket
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${S3BucketNamePrefix}-${Environment}"
      AccessControl: Private
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  ##### CodeBuild Project #####
  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub "${AWS::StackName}-DeploymentBuild"
      Artifacts:
        Type: NO_ARTIFACTS
      VpcConfig:
        SecurityGroupIds:
          - !Ref NoIngressSecurityGroup
        Subnets:
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
        VpcId: !Ref VPC
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/amazonlinux2-x86_64-standard:3.0
        Type: LINUX_CONTAINER
        PrivilegedMode: true
        EnvironmentVariables:
          - Name: ARTIFACTS_BUCKET_NAME
            Type: PLAINTEXT
            Value: !Sub "${S3BucketNamePrefix}-${Environment}"
          - Name: ENVIRONMENT
            Type: PLAINTEXT
            Value: !Sub ${Environment}
          - Name: AIRFLOW_BUCKET_NAME
            Type: PLAINTEXT
            Value: !Sub "${S3BucketNamePrefix}-${Environment}"
          - Name: AWS_ACCOUNT_ID
            Type: PLAINTEXT
            Value: !Sub "${AWS::AccountId}"
          - Name: AWS_REGION
            Type: PLAINTEXT
            Value: !Sub "${AWS::Region}"
          - Name: VPC_ID
            Type: PLAINTEXT
            Value: !Ref VPC
          - Name: SUBNETS
            Type: PLAINTEXT
            Value: !Join [",", [!Ref PrivateSubnet1, !Ref PrivateSubnet2]]

          # Stacks
          - Name: REDSHIFT_STACK_NAME
            Type: PLAINTEXT
            Value: ClientAPI-Redshift
          - Name: AIRFLOW_STACK_NAME
            Type: PLAINTEXT
            Value: ClientAPI-Airflow
          - Name: GLUE_STACK_NAME
            Type: PLAINTEXT
            Value: ClientAPI-Glue
      ServiceRole: !GetAtt CodeBuildServiceRole.Arn
      Source:
        Type: GITHUB
        Location: !Sub "https://github.com/${CodeOrg}/${CodeRepository}.git"
        BuildSpec: !Sub ${PathToBuildspec}
        Auth:
          Type: OAUTH
          Resource: !Sub "arn:aws:codebuild:${AWS::Region}:${AWS::AccountId}:token/github"

  CodePipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      ArtifactStore:
        Location: !Ref TemporarySourceBucket
        Type: S3
      Name: !Sub "${AWS::StackName}-Deployment"
      RestartExecutionOnUpdate: false
      RoleArn: !GetAtt CodePipelineServiceRole.Arn
      Stages:
        - Name: Source
          Actions:
            - Name: Source
              ActionTypeId:
                Version: "1"
                Owner: AWS
                Category: Source
                Provider: CodeStarSourceConnection
              Configuration:
                ConnectionArn: !Sub "arn:aws:codestar-connections:${AWS::Region}:${AWS::AccountId}:connection/${CodeStarConnectionId}"
                FullRepositoryId: !Sub "${CodeOrg}/${CodeRepository}"
                BranchName: !Ref CodeBranch
                DetectChanges: true

              OutputArtifacts:
                - Name: SourceCode
        - !If
          - IsProd
          - Name: ApproveBeforeBuildAndDeploy
            Actions:
              - Name: Approval
                ActionTypeId:
                  Category: Approval
                  Owner: AWS
                  Version: "1"
                  Provider: Manual
                OutputArtifacts: []
                InputArtifacts: []
          - !Ref AWS::NoValue
        - Name: CreateStacks
          Actions:
            - Name: CreateStackGlue
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: "1"
              Configuration:
                StackName: ClientAPI-Glue
                ChangeSetName: ClientAPI-Glue-CS
                ActionMode: CHANGE_SET_REPLACE
                Capabilities: CAPABILITY_IAM,CAPABILITY_NAMED_IAM
                RoleArn: !GetAtt CodePipelineServiceRole.Arn
                TemplatePath: "SourceCode::Deployment/ClientAPIPipeline/ClientAPIGlueCrawlers.yml"
                ParameterOverrides: !Sub |
                  {
                    "Environment": "${Environment}"
                  }
              OutputArtifacts:
                - Name: StackOutput-Glue
              InputArtifacts:
                - Name: SourceCode
            - Name: CreateStackAirflow
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: "1"
              Configuration:
                StackName: ClientAPI-Airflow
                ChangeSetName: ClientAPI-Airflow-CS
                ActionMode: CHANGE_SET_REPLACE
                Capabilities: CAPABILITY_IAM,CAPABILITY_NAMED_IAM
                RoleArn: !GetAtt CodePipelineServiceRole.Arn
                TemplatePath: SourceCode::Deployment/ClientAPIPipeline/ClientAPIAirflow.yml
                ParameterOverrides: !Sub |
                  {
                    "Environment": "${Environment}",
                    "VpcId": "${VPC}",
                    "PrivateSubnet1": "${PrivateSubnet1}",
                    "PrivateSubnet2": "${PrivateSubnet2}"
                  }
              OutputArtifacts:
                - Name: StackOutput-Airflow
              InputArtifacts:
                - Name: SourceCode
            - Name: CreateStackRedshift
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: "1"
              Configuration:
                StackName: ClientAPI-Redshift
                ChangeSetName: ClientAPI-Redshift-CS
                ActionMode: CHANGE_SET_REPLACE
                Capabilities: CAPABILITY_IAM,CAPABILITY_NAMED_IAM
                RoleArn: !GetAtt CodePipelineServiceRole.Arn
                TemplatePath: "SourceCode::Deployment/ClientAPIPipeline/ClientAPIRedshift.yml"
                ParameterOverrides: !Sub
                  - |
                    {
                      "Environment": "${Environment}",
                      "VpcId": "${VPC}",
                      "SubnetIds": "${PrivateSubnets}",
                      "InboundTraffic": "${VpcCidr}"
                    }
                  - PrivateSubnets:
                      !Join [",", [!Ref PrivateSubnet1, !Ref PrivateSubnet2]]
              OutputArtifacts:
                - Name: StackOutput-Redshift
              InputArtifacts:
                - Name: SourceCode
        - Name: DeployStacks
          Actions:
            - Name: DeployStackGlue
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: "1"
              Configuration:
                ActionMode: CHANGE_SET_EXECUTE
                StackName: ClientAPI-Glue
                ChangeSetName: ClientAPI-Glue-CS
              OutputArtifacts:
                - Name: DeployStackGlue
            - Name: DeployStackAirflow
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: "1"
              Configuration:
                ActionMode: CHANGE_SET_EXECUTE
                StackName: ClientAPI-Airflow
                ChangeSetName: ClientAPI-Airflow-CS
                OutputFileName: outputs.json
              OutputArtifacts:
                - Name: DeployStackAirflow
            - Name: DeployStackRedshift
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: "1"
              Configuration:
                ActionMode: CHANGE_SET_EXECUTE
                StackName: ClientAPI-Redshift
                ChangeSetName: ClientAPI-Redshift-CS
              OutputArtifacts:
                - Name: DeployStackRedshift
        - Name: Build
          Actions:
            - Name: Build
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: "1"
              Configuration:
                ProjectName: !Ref CodeBuildProject
                PrimarySource: SourceCode
              OutputArtifacts:
                - Name: BuildOutput
              InputArtifacts:
                - Name: SourceCode
        - Name: Deploy
          Actions:
            - Name: DeployS3
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: S3
                Version: "1"
              Configuration:
                BucketName: !Sub "${S3BucketNamePrefix}-${Environment}"
                Extract: true
              InputArtifacts:
                - Name: BuildOutput

  S3PutObjectFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - !Sub arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: S3Writer
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              Effect: Allow
              Action:
                - s3:DeleteObject
                - s3:ListBucket
                - s3:PutObject
              Resource: "*"

  BootstrapAirflowBucketLambda:
    Type: AWS::Lambda::Function
    Condition: CreateArtifactsS3Bucket
    DependsOn:
      - DeployS3Bucket
    Properties:
      Code:
        ZipFile: |
          import boto3
          import cfnresponse
          import os

          s3 = boto3.client("s3")

          def lambda_handler(event, context):
            print("ENVIRONMENT VARIABLES")
            print(os.environ)
            print("EVENT")
            print(event)

            try:
              airflow_bucket_arn = os.getenv("AIRFLOW_BUCKET_NAME")
              s3.put_object(
                Bucket=airflow_bucket_arn,
                Key="airflow/requirements.txt",
                Body=""
              )
              cfnresponse.send(
                event,
                context,
                cfnresponse.SUCCESS,
                { "Data": "SUCCESS" },
                "AirflowRequirements",
              )
            except Exception:
              cfnresponse.send(
                event,
                context,
                cfnresponse.FAILED,
                { "Data": "ERROR" },
                "AirflowRequirements",
              )

      FunctionName: ClientAPI-Airflow-Setup
      Handler: index.lambda_handler
      Runtime: python3.7
      Timeout: 60
      Role: !GetAtt S3PutObjectFunctionRole.Arn
      Environment:
        Variables:
          AIRFLOW_BUCKET_NAME: !Sub "${S3BucketNamePrefix}-${Environment}"

  SetupAirfowBucket:
    Type: AWS::CloudFormation::CustomResource
    Condition: CreateArtifactsS3Bucket
    Properties:
      ServiceToken: !GetAtt BootstrapAirflowBucketLambda.Arn

Outputs:
  VPC:
    Description: A reference to the created VPC
    Value: !Ref VPC

  PublicSubnets:
    Description: A list of the public subnets
    Value: !Join [",", [!Ref PublicSubnet1, !Ref PublicSubnet2]]

  PrivateSubnets:
    Description: A list of the private subnets
    Value: !Join [",", [!Ref PrivateSubnet1, !Ref PrivateSubnet2]]

  PublicSubnet1:
    Description: A reference to the public subnet in the 1st Availability Zone
    Value: !Ref PublicSubnet1

  PublicSubnet2:
    Description: A reference to the public subnet in the 2nd Availability Zone
    Value: !Ref PublicSubnet2

  PrivateSubnet1:
    Description: A reference to the private subnet in the 1st Availability Zone
    Value: !Ref PrivateSubnet1

  PrivateSubnet2:
    Description: A reference to the private subnet in the 2nd Availability Zone
    Value: !Ref PrivateSubnet2

  NoIngressSecurityGroup:
    Description: Security group with no ingress rule
    Value: !Ref NoIngressSecurityGroup
