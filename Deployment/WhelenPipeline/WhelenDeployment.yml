AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: This template stands-up Whelen stack and everything else required.

Metadata:
  cfn-lint:
    config:
      ignore_checks:
        - I3042
        - E3030
        - W2501
        - I1022
        - I3011
        - E2507 
        - E3030
        - W2001

Globals:
  Api:
    OpenApiVersion: 3.0.1
    Cors: '*'

Parameters:
  CDFAPIARN:
    Type: String
    Description: CDF Asset Library API endpoint required by the SAM template

  FeaturePersistenceUrl:
    Type: String
    Description:  feature persistence url

  MacgenApiUrl:
    Type: String
    Description: Endpoint URL for the integration's mac address generation API

  Env:
    Type: String
    AllowedValues: 
      - develop
      - test
      - production
      - pilot
    Description: "Provide the environment you are deploying this on. Allowed values: develop, test, production, or pilot"

  CoreName:
    Type: String
    Default: WhelenPipeline
    Description: "Base name for Whelen Pipeline resources"

Resources:
  AllowIoTPublish:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      ManagedPolicyName: !Sub AllowIoTPublish-${CoreName}
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - 'iot:Connect'
              - 'iot:Publish'
            Resource:
              - !Sub 'arn:${AWS::Partition}:iot:*:${AWS::AccountId}:client/*'
              - !Sub 'arn:${AWS::Partition}:iot:*:${AWS::AccountId}:topic/*'

  AllowCDFAPIAccess:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      ManagedPolicyName: !Sub AllowCDFAPIAccess-${CoreName}
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - 'execute-api:Invoke'
              - 'execute-api:ManageConnections'
            Resource: !Sub 'arn:${AWS::Partition}:execute-api:us-east-1:${AWS::AccountId}:*'

  AllowCDFAPIInvoke:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      ManagedPolicyName: !Sub AllowCDFAPIInvoke-${CoreName}
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - 'lambda:InvokeFunction'
            Resource: !Sub 'arn:${AWS::Partition}:lambda:us-east-1:${AWS::AccountId}:function:cdf-assetlibrary-stage-LambdaFunction*'

  DynamoDBAccess:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Sub DynamoDBAccess-${CoreName}
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - 'dynamodb:UpdateTimeToLive'
              - 'dynamodb:PutItem'
              - 'dynamodb:GetItem'
              - 'dynamodb:UpdateItem'
              - 'dynamodb:UpdateTableReplicaAutoScaling'
              - 'dynamodb:UpdateTable'
            Resource: '*'

  WhelenLambdaMQExecutionRole:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: WhelenLambdaMQExecutionRole
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - 'mq:DescribeBroker'
              - 'secretsmanager:GetSecretValue'
              - 'ec2:CreateNetworkInterface'
              - 'ec2:DescribeNetworkInterfaces'
              - 'ec2:DescribeVpcs'
              - 'ec2:DeleteNetworkInterface'
              - 'ec2:DescribeSubnets'
              - 'ec2:DescribeSecurityGroups'
              - 'logs:CreateLogGroup'
              - 'logs:CreateLogStream'
              - 'logs:PutLogEvents'
            Resource: '*'

  # Permissions for the lambda.
  WhelenRTRadioMsgRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: WhelenRTRadioMsgRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: 
                - "lambda.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      Path: "/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess
        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess
        - !Ref 'AllowIoTPublish'
        - !Ref 'AllowCDFAPIInvoke'
        - !Ref 'AllowCDFAPIAccess'
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - !Ref 'WhelenLambdaMQExecutionRole'
        - !Ref 'DynamoDBAccess'

  MQBrokerSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: SG for Whelen MQ broker instance
      GroupName: !Sub MQBrokerSG-${CoreName}
      SecurityGroupIngress:
        - IpProtocol: "-1"
          FromPort: -1
          ToPort: -1
          CidrIp: 0.0.0.0/0
        - IpProtocol: "-1"
          FromPort: -1
          ToPort: -1
          CidrIpv6: ::/0

  # This is the AmazonMQ broker running on Apache ActiveMQ engine 
  MQBroker:
    Type: AWS::AmazonMQ::Broker
    Properties:  
      BrokerName: !Sub MQBroker-${CoreName}
      DeploymentMode: SINGLE_INSTANCE
      EngineType: ACTIVEMQ
      EngineVersion: 5.16.2
      HostInstanceType: mq.t3.micro
      Logs:
        Audit: false
        General: true
      PubliclyAccessible: true
      AutoMinorVersionUpgrade: true
      SecurityGroups:
        - !GetAtt "MQBrokerSG.GroupId"
      Users:
        - ConsoleAccess: true
          Groups:
            - admin
          Username: admin
          Password: test12345678
        - ConsoleAccess: true
          Username: gtt
          Password: whelenexploration

  #This is a Secret resource with a randomly generated password in its SecretString JSON.
  MQBrokerSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: "This is a Secrets Manager secret for the whelen broker instance"
      Name: WhelenBrokerCredentials
      SecretString: '{username:gtt, password:whelenexploration}'

  
  WhelenConfiguration:
    Type: AWS::AmazonMQ::Configuration
    Properties:
      Data:
        Fn::Base64:
          Fn::Join:
          - ''
          - - |-
              <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
              <broker xmlns="http://activemq.apache.org/schema/core" schedulePeriodForDestinationPurge="10000">
                <!--
                A configuration contains all of the settings for your ActiveMQ broker, in XML format (similar to ActiveMQ's activemq.xml file).
                You can create a configuration before creating any brokers. You can then apply the configuration to one or more brokers.

                You can use additional attributes for the broker element above. These attributes allow you to configure broker-wide settings.

                For more information, see Configuration and Amazon MQ Broker Configuration Parameters in the Amazon MQ Developer Guide:
                https://docs.aws.amazon.com/amazon-mq/latest/developer-guide/amazon-mq-broker-configuration-parameters.html
                -->
                <!--
                Mirrored queues let you send a copy of each message to a topic with a similar name automatically.
                For more information, see http://activemq.apache.org/mirrored-queues.html

                Virtual destinations let you configure advanced routing of messages between destinations.
                For more information, see http://activemq.apache.org/virtual-destinations.html
                -->
                <!--
                <destinationInterceptors>
                  <mirroredQueue copyMessage="true" postfix=".qmirror" prefix=""/>
                  <virtualDestinationInterceptor>
                    <virtualDestinations>
                      <virtualTopic name="&gt;" prefix="VirtualTopicConsumers.*." selectorAware="false"/>
                      <compositeQueue name="MY.QUEUE">
                        <forwardTo>
                          <queue physicalName="FOO"/>
                          <topic physicalName="BAR"/>
                        </forwardTo>
                      </compositeQueue>
                    </virtualDestinations>
                  </virtualDestinationInterceptor>
                </destinationInterceptors>
                -->
                <!--
                By default, Amazon MQ optimizes for queues with fast consumers:
                Consumers are considered fast if they are able to keep up with the rate of messages generated by producers.
                Consumers are considered slow if a queue builds up a backlog of unacknowledged messages, potentially causing a decrease in producer throughput.
                To instruct Amazon MQ to optimize for queues with slow consumers, set the concurrentStoreAndDispatchQueues attribute to false.
                For more information, see https://docs.aws.amazon.com/amazon-mq/latest/developer-guide/ensuring-effective-amazon-mq-performance.html
                -->
                <!--
                <persistenceAdapter>
                  <kahaDB  concurrentStoreAndDispatchQueues="false"/>
                </persistenceAdapter>
                -->
                <destinationPolicy>
                  <policyMap>
                    <policyEntries>
                      <!--
                      gcInactiveDestinations is used to automatically purge inactive destinations
                      preventing them from unnecessarily using broker resources.

                      An 'inactive' destination is one that has no messages pending and no consumers connected.

                      For more information, see: http://activemq.apache.org/delete-inactive-destinations.html
                      -->
                      <policyEntry topic="&gt;" gcInactiveDestinations="true" inactiveTimoutBeforeGC="600000">
                        <!--
                        The constantPendingMessageLimitStrategy is used to prevent
                        slow topic consumers to block producers and affect other consumers
                        by limiting the number of messages that are retained

                        For more information, see: http://activemq.apache.org/slow-consumer-handling.html
                        -->
                        <pendingMessageLimitStrategy>
                          <constantPendingMessageLimitStrategy limit="1000"/>
                        </pendingMessageLimitStrategy>
                      </policyEntry>
                      <policyEntry queue="&gt;" gcInactiveDestinations="true" inactiveTimoutBeforeGC="600000" />
                      <!--
                      Destination policies let you configure a rich set of behaviors for your queues and topics.
                      For more information, see http://activemq.apache.org/per-destination-policies.html
                      -->
                      <!--
                      <policyEntry topic="FOO.&gt;">
                        <dispatchPolicy>
                          <roundRobinDispatchPolicy/>
                        </dispatchPolicy>
                        <subscriptionRecoveryPolicy>
                          <lastImageSubscriptionRecoveryPolicy/>
                        </subscriptionRecoveryPolicy>
                      </policyEntry>
                      <policyEntry advisoryForConsumed="true" tempTopic="true"/>
                      <policyEntry advisoryForConsumed="true" tempQueue="true"/>
                      -->
                    </policyEntries>
                  </policyMap>
                </destinationPolicy>
                <!--
                Typically, destinations are created automatically when they are used. Amazon MQ lets you create destinations when the broker is started.
                For more information, see http://activemq.apache.org/configure-startup-destinations.html
                -->
                <!--
                <destinations>
                  <queue physicalName="FOO.BAR"/>
                  <topic physicalName="SOME.TOPIC"/>
                </destinations>
                -->
                <!--
                You can control advanced ActiveMQ features using plugins.
                -->
                <plugins>
                  <!--
                  The Authorization plugin allows you to control the groups of users that are allowed to perform certain operations on your destinations.
                  For more information, see http://activemq.apache.org/security.html
                  -->
                  <!--
                  <authorizationPlugin>
                    <map>
                      <authorizationMap>
                        <authorizationEntries>
                          <authorizationEntry admin="guests,users" queue="GUEST.&gt;" read="guests" write="guests,users"/>
                          <authorizationEntry admin="guests,users" read="guests,users" topic="ActiveMQ.Advisory.&gt;" write="guests,users"/>
                        </authorizationEntries>
                        <tempDestinationAuthorizationEntry>
                          <tempDestinationAuthorizationEntry admin="tempDestinationAdmins" read="tempDestinationAdmins" write="tempDestinationAdmins"/>
                        </tempDestinationAuthorizationEntry>
                      </authorizationMap>
                    </map>
                  </authorizationPlugin>
                  -->
                  <!--
                  The Discarding DLQ plugin simplifies the configuration of your global dead-letter queue strategy.
                  You can take advantage of a more granular per-destination control by using destination policies.
                  For more information, see http://activemq.apache.org/message-redelivery-and-dlq-handling.html
                  -->
                  <!--
                  <discardingDLQBrokerPlugin dropAll="true" dropTemporaryQueues="true" dropTemporaryTopics="true"/>
                  -->
                  <!--
                  The Force Persistency Mode plugin can override the persistency mode set on messages.
                  -->
                  <!--
                  <forcePersistencyModeBrokerPlugin persistenceFlag="true"/>
                  -->
                  <!--
                  The Redelivery plugin extends the capabilities of destination policies with respect to message redelivery.
                  For more information, see http://activemq.apache.org/message-redelivery-and-dlq-handling.html
                  -->
                  <!--
                  <redeliveryPlugin fallbackToDeadLetter="true" sendToDlqIfMaxRetriesExceeded="true">
                    <redeliveryPolicyMap>
                      <redeliveryPolicyMap>
                        <redeliveryPolicyEntries>
                          <redeliveryPolicy maximumRedeliveries="4" queue="SpecialQueue" redeliveryDelay="10000"/>
                        </redeliveryPolicyEntries>
                        <defaultEntry>
                          <redeliveryPolicy initialRedeliveryDelay="5000" maximumRedeliveries="4" redeliveryDelay="10000"/>
                        </defaultEntry>
                      </redeliveryPolicyMap>
                    </redeliveryPolicyMap>
                  </redeliveryPlugin>
                  -->
                  <!--
                  The Statistics plugin lets you query broker or destination statistics by sending messages to the broker.
                  For more information, see http://activemq.apache.org/statisticsplugin.html
                  -->
                  <!--
                  <statisticsBrokerPlugin/>
                  -->
                  <!--
                  The Timestamping plugin lets the broker use server-side time instead of client-provided time for messages.
                  For more information, see http://activemq.apache.org/timestampplugin.html
                  -->
                  <!--
                  <timeStampingBrokerPlugin ttlCeiling="86400000" zeroExpirationOverride="86400000"/>
                  -->
                </plugins>
                <!--
                Network connectors let you connect brokers into networks of brokers.
                For more information, see Creating and Configuring an Amazon MQ Network of Brokers
                (https://docs.aws.amazon.com/amazon-mq/latest/developer-guide/amazon-mq-creating-configuring-network-of-brokers.html)
                in the Amazon MQ Developer Guide and also Networks of Brokers
                (http://activemq.apache.org/networks-of-brokers.html) in the ActiveMQ documentation.
                -->
                <!--
                
                 <networkConnectors>
                    <networkConnector userName="commonUser"
                                      name="myNetworkConnector"
                                      uri="masterslave:(
            - Fn::Select:
              - 0
              - Fn::GetAtt:
                - MQBroker
                - OpenWireEndpoints
            - |-
              )" />     
                </networkConnectors>     
                -->
              </broker>
      Description: Configuration for whelen broker
      EngineType: ACTIVEMQ
      EngineVersion: 5.16.2
      Name: WhelenConfiguration

  ConfigurationAssociation:
    Type: AWS::AmazonMQ::ConfigurationAssociation
    Properties:
      Broker:
        Ref: MQBroker
      Configuration:
        Id:
          Ref: WhelenConfiguration
        Revision:
          Fn::GetAtt:
          - WhelenConfiguration
          - Revision

  AllowUIAPIInvoke:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Sub AllowUIAPIInvoke-${CoreName}
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - 'lambda:InvokeFunction'
            Resource: !Sub 'arn:aws:lambda:us-east-1:${AWS::AccountId}:function:cdf-assetlibrary-stage-LambdaFunction*'

  LambdaSubmitBatchRole:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Sub LambdaSubmitBatchRole-${CoreName}
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              -  "lambda:UpdateEventSourceMapping"
              -  "lambda:GetEventSourceMapping"
              -  "lambda:ListEventSourceMappings"
              -  "lambda:CreateEventSourceMapping"
              -  "lambda:DeleteEventSourceMapping"
            Resource: "*"

          - Effect: Allow
            Action:
              -  "sqs:*"
            Resource: !Sub "arn:aws:sqs:us-east-1:${AWS::AccountId}:*"

          - Effect: Allow
            Action:
              -  "sns:*"
            Resource: !Sub "arn:aws:sns:us-east-1:${AWS::AccountId}:*"

          - Effect: Allow
            Action:
              -  "cloudwatch:*"
            Resource: !Sub "arn:aws:cloudwatch:us-east-1:${AWS::AccountId}:*"

  QueueJobCreateInfrastructure:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      ManagedPolicyName: !Sub QueueJobCreateInfrastructure-${CoreName}
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - 'lambda:InvokeFunction'
            Resource: !Sub 'arn:aws:lambda:us-east-1:${AWS::AccountId}:function:cdf-assetlibrary-stage-LambdaFunction*'

  BatchProcessingRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub BatchProcessingRole-${CoreName}
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - !Sub arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - !Ref 'AllowCDFAPIAccess'
        - !Ref 'AllowCDFAPIInvoke'
        - !Ref 'AllowUIAPIInvoke'
        - !Ref 'LambdaSubmitBatchRole'
        - !Ref 'QueueJobCreateInfrastructure'
        - !Sub arn:${AWS::Partition}:iam::aws:policy/AmazonSQSFullAccess
        - !Sub arn:${AWS::Partition}:iam::aws:policy/CloudWatchFullAccess
        - !Sub arn:${AWS::Partition}:iam::aws:policy/AmazonDynamoDBFullAccess
        - !Sub arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaRole

  APIHandlerRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub APIHandlerRole-${CoreName}
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - !Sub arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - !Ref 'AllowCDFAPIAccess'
        - !Ref 'AllowCDFAPIInvoke'
        - !Ref 'AllowUIAPIInvoke'
        - !Ref 'LambdaSubmitBatchRole'
        - !Ref 'QueueJobCreateInfrastructure'
        - !Sub arn:${AWS::Partition}:iam::aws:policy/AmazonSQSFullAccess
        - !Sub arn:${AWS::Partition}:iam::aws:policy/CloudWatchFullAccess
        - !Sub arn:${AWS::Partition}:iam::aws:policy/AmazonDynamoDBFullAccess
        - !Sub arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaRole

  ErrorQueue:
    Type: AWS::SQS::Queue
    Properties:
      MessageRetentionPeriod: 60
      QueueName: !Sub ErrorQueue-${CoreName}
      VisibilityTimeout: 60
      Tags: 
        - Key: Name
          Value: !Sub ErrorQueue-${CoreName}

  SQSQueue:
    Type: AWS::SQS::Queue
    Properties:
      MessageRetentionPeriod: 60
      QueueName: !Sub SQSQueue-${CoreName}
      VisibilityTimeout: 60
      RedrivePolicy: { "deadLetterTargetArn" : !GetAtt ErrorQueue.Arn, "maxReceiveCount" : 10 }
      Tags: 
        - Key: Name
          Value: !Sub SQSQueue-${CoreName}
      
  FIFOSQSQueue:
    Type: AWS::SQS::Queue
    Properties:
      FifoQueue: true
      MessageRetentionPeriod: 60
      QueueName: !Sub FIFOSQSQueue-${CoreName}.fifo
      VisibilityTimeout: 60
      Tags: 
        - Key: Name
          Value: !Sub FIFOSQSQueue-${CoreName}.fifo

  BatchSNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      ContentBasedDeduplication: false
      DisplayName: !Sub BatchSNSTopic-${CoreName}
      FifoTopic: true
      TopicName: !Sub BatchSNSTopic-${CoreName}.fifo
      Tags: 
        - Key: Name
          Value: !Sub BatchSNSTopic-${CoreName}

  BatchSQSTopicPolicy:
    Type: AWS::SQS::QueuePolicy
    Properties: 
      Queues:
        - !Ref SQSQueue
        - !Ref ErrorQueue
      PolicyDocument:
        Id: !Sub BatchSQSTopicPolicy-${CoreName}
        Statement: 
          - Sid: "SQS Policy"
            Effect: Allow
            Action:
              - sqs:*
            Resource: !Ref SQSQueue

  BatchSNSTopicPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      Topics: 
        - !Ref BatchSNSTopic
      PolicyDocument:
        Id: !Sub WhelenBatchSNSTopicPolicy-${CoreName}
        Statement:
        - Sid: "SNS Policy"
          Effect: Allow
          Principal:
            "AWS": "*"
          Action:
            - sns:GetTopicAttributes
            - sns:SetTopicAttributes
            - sns:AddPermission
            - sns:RemovePermission
            - sns:DeleteTopic
            - sns:Subscribe
            - sns:ListSubscriptionsByTopic
            - sns:Publish
          Resource: !Ref BatchSNSTopic

  BatchProcessing:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub BatchProcessing-${CoreName}
      Handler: Whelen-Batch-Processing.lambda_handler
      Runtime: python3.9
      CodeUri: ./../../Whelen/Lambdas/WhelenBatchProcessing/LambdaCode
      Description: "Whelen Batch processing"
      MemorySize: 128
      Timeout: 30
      Role: !GetAtt BatchProcessingRole.Arn
      Events:
        importvehiclesgetevent:
          Type: Api
          Properties:
            Auth:
              InvokeRole: AWS_IAM
            Method: get
            Path: /importvehicles
            RestApiId: !Ref WhelenAPIServerless
        importvehiclespostevent:
          Type: Api
          Properties:
            Auth:
              InvokeRole: AWS_IAM
            Method: post
            Path: /importvehicles
            RestApiId: !Ref WhelenAPIServerless
        importvehiclesdeleteevent:
          Type: Api
          Properties:
            Auth:
              InvokeRole: AWS_IAM
            Method: delete
            Path: /importvehicles
            RestApiId: !Ref WhelenAPIServerless
        changepreemptiongetevent:
          Type: Api
          Properties:
            Auth:
              InvokeRole: AWS_IAM
            Method: get
            Path: /changepreemption
            RestApiId: !Ref WhelenAPIServerless
        changepreemptionpostevent:
          Type: Api
          Properties:
            Auth:
              InvokeRole: AWS_IAM
            Method: post
            Path: /changepreemption
            RestApiId: !Ref WhelenAPIServerless
        changepreemptiondeleteevent:
          Type: Api
          Properties:
            Auth:
              InvokeRole: AWS_IAM
            Method: delete
            Path: /changepreemption
            RestApiId: !Ref WhelenAPIServerless
      Environment:
        Variables:
          CDF_URL: !Ref CDFAPIARN
          LAMBDA_HANDLER_ARN: !GetAtt APIHandler.Arn
          SNS_REPORT_TOPIC_ARN: !Ref BatchSNSTopic
          Whelen_SQS_Queue_Name: !Ref SQSQueue
          feature_persistence_url: !Ref FeaturePersistenceUrl

  APIHandler:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub APIHandler-${CoreName}
      Handler: Whelen-API-Handler.lambda_handler
      Runtime: python3.9
      CodeUri: ./../../Whelen/Lambdas/WhelenAPIHandler/LambdaCode/
      Description: "Whelen API Handler"
      MemorySize: 128
      Timeout: 30
      Role: !GetAtt APIHandlerRole.Arn
      Events:
        importvehiclesgetevent:
          Type: SQS
          Properties:
            Queue: !GetAtt FIFOSQSQueue.Arn
            BatchSize: 1
            FunctionResponseTypes: 
              - ReportBatchItemFailures
      Environment:
        Variables:
          CDF_URL: !Ref CDFAPIARN
          Whelen_SQS_Queue_Name: !GetAtt SQSQueue.QueueName
          feature_persistence_url: !Ref FeaturePersistenceUrl
          mac_address_api_url: !Ref MacgenApiUrl

  WhelenAPIServerless:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref Env
      Name: WhelenAPIServerless
      Description: WhelenAPIServerless API creation
      EndpointConfiguration:
        Type: REGIONAL
      DefinitionBody:
        swagger: "2.0"
        info:
          description: "Primarily used for importing whelen vehicles in CDF."
          version: "2022-04-13T19:08:55Z"
          title: "Whelen-API"
        basePath: "/dev"
        schemes:
        - "https"
        paths:
          /changepreemption:
            get:
              produces:
              - "application/json"
              parameters:
              - name: "queue_url"
                in: "query"
                required: true
                type: "string"
              - name: "type"
                in: "query"
                required: true
                type: "string"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
              security:
              - sigv4: []
              x-amazon-apigateway-integration:
                credentials: "arn:aws:iam::*:user/*"
                httpMethod: "POST"
                uri: !Sub arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/${BatchProcessing.Arn}/invocations         
                responses:
                  default:
                    statusCode: "200"
                passthroughBehavior: "when_no_match"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws_proxy"
            post:
              produces:
              - "application/json"
              responses:
                "202":
                  description: "202 response"
                  schema:
                    $ref: "#/definitions/Empty"
              security:
              - sigv4: []
              x-amazon-apigateway-integration:
                credentials: "arn:aws:iam::*:user/*"
                httpMethod: "POST"
                uri: !Sub arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/${BatchProcessing.Arn}/invocations
                responses:
                  default:
                    statusCode: "200"
                passthroughBehavior: "when_no_match"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws_proxy"
            delete:
              produces:
              - "application/json"
              parameters:
              - name: "queue_url"
                in: "query"
                required: true
                type: "string"
              - name: "type"
                in: "query"
                required: true
                type: "string"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
              security:
              - sigv4: []
              x-amazon-apigateway-integration:
                credentials: "arn:aws:iam::*:user/*"
                httpMethod: "POST"
                uri: !Sub arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/${BatchProcessing.Arn}/invocations
                responses:
                  default:
                    statusCode: "200"
                passthroughBehavior: "when_no_match"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws_proxy"
            options:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_match"
                type: "mock"
          /importvehicles:
            get:
              produces:
              - "application/json"
              parameters:
              - name: "queue_url"
                in: "query"
                required: true
                type: "string"
              - name: "status"
                in: "query"
                required: true
                type: "string"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
              security:
              - sigv4: []
              x-amazon-apigateway-integration:
                httpMethod: "POST"
                uri: !Sub arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/${BatchProcessing.Arn}/invocations
                responses:
                  default:
                    statusCode: "200"
                passthroughBehavior: "when_no_match"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws_proxy"
            post:
              produces:
              - "application/json"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
              security:
              - sigv4: []
              x-amazon-apigateway-integration:
                httpMethod: "POST"
                uri: !Sub arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/${BatchProcessing.Arn}/invocations
                responses:
                  default:
                    statusCode: "200"
                passthroughBehavior: "when_no_match"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws_proxy"
            delete:
              produces:
              - "application/json"
              parameters:
              - name: "queue_url"
                in: "query"
                required: true
                type: "string"
              - name: "status"
                in: "query"
                required: true
                type: "string"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
              security:
              - sigv4: []
              x-amazon-apigateway-integration:
                httpMethod: "POST"
                uri: !Sub arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/${BatchProcessing.Arn}/invocations
                responses:
                  default:
                    statusCode: "200"
                passthroughBehavior: "when_no_match"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws_proxy"
            options:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_match"
                type: "mock"
        securityDefinitions:
          sigv4:
            type: "apiKey"
            name: "Authorization"
            in: "header"
            x-amazon-apigateway-authtype: "awsSigv4"
        definitions:
          Empty:
            type: "object"
            title: "Empty Schema"

  ScalingRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ScalingRole-${CoreName}
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: application-autoscaling.amazonaws.com
            Action: sts:AssumeRole

  ScalingRolePolicy:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: !Sub ScalingRolePolicy-${CoreName}
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - application-autoscaling:*
              - dynamodb:DescribeTable
              - dynamodb:UpdateTable
              - cloudwatch:PutMetricAlarm
              - cloudwatch:DescribeAlarms
              - cloudwatch:GetMetricStatistics
              - cloudwatch:SetAlarmState
              - cloudwatch:DeleteAlarms
            Resource: '*'
      Roles:
        - !Ref ScalingRole

  WhelenAPIServerlessDeploy:
      Type: AWS::ApiGateway::Deployment
      Properties: 
        RestApiId: !Ref WhelenAPIServerless

  AgencyStateDynamoTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: "AgencyGUID"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "AgencyGUID"
          KeyType: "HASH"
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 10
      TableName: agency-states.whelen
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: false
      Tags:
        - Key: Name
          Value: AgencyStateDynamoTable

  # Lambdas
  CDFLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      CompatibleRuntimes:
        - python3.7
        - python3.8
      ContentUri: ./../../CDFAndIoT/Lambdas/LambdaLayers/CDFLambdaLayer/CDFLambdaLayer.zip
      Description: "Layer containing CDF library and dependencies"
      LayerName: !Sub CDFLayer-${CoreName}
      RetentionPolicy: Delete

# Whelen APIDeployment Lambda, Roles and Access policy and APIGateway 

  ApiDeploymentAccess:
    Type: "AWS::IAM::ManagedPolicy"
    Properties:
      ManagedPolicyName: !Sub ApiDeploymentAccess-${CoreName}
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "codepipeline:PutJobFailureResult"
              - "codepipeline:PutJobSuccessResult"
            Resource: "*"
          - Effect: Allow
            Action:
              - "apigateway:*"
            Resource: !Sub "arn:aws:apigateway:${AWS::Region}::/restapis/${WhelenAPIServerless}/*"

  APIDeploymentRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub APIDeploymentRole-${CoreName}
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - !Sub arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - !Ref "ApiDeploymentAccess"

  APIDeploymentLambda:
    Type: "AWS::Serverless::Function"
    Properties:
      FunctionName: !Sub APIDeployment-${CoreName}
      Handler: ApiDeployment.lambda_handler
      Runtime: python3.8
      CodeUri: ./../../CDFAndIoT/Lambdas/ApiDeployment/LambdaCode
      Description: "Deploy API Gateway"
      MemorySize: 128
      Timeout: 5
      Role: !GetAtt 'APIDeploymentRole.Arn'
      Layers:
        - !Ref CDFLayer
      Environment:
        Variables:
          STAGE_NAME: !Sub ${Env}
          REST_API_ID: !Ref WhelenAPIServerless

  TableWriteCapacityScalableTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties: 
      MaxCapacity: 10
      MinCapacity: 1
      ResourceId: table/agency-states.whelen
      RoleARN: !GetAtt ScalingRole.Arn
      ScalableDimension: dynamodb:table:WriteCapacityUnits
      ServiceNamespace: dynamodb

  TableReadCapacityScalableTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties: 
      MaxCapacity: 10
      MinCapacity: 1
      ResourceId: table/agency-states.whelen
      RoleARN: !GetAtt ScalingRole.Arn
      ScalableDimension: dynamodb:table:ReadCapacityUnits
      ServiceNamespace: dynamodb

  TableWriteScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Sub TableWriteScalingPolicy-${CoreName}
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref TableWriteCapacityScalableTarget
      TargetTrackingScalingPolicyConfiguration:
          TargetValue: 70
          ScaleInCooldown: 60
          ScaleOutCooldown: 60
          PredefinedMetricSpecification: 
            PredefinedMetricType: DynamoDBWriteCapacityUtilization

  TableReadScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Sub TableReadScalingPolicy-${CoreName}
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref TableReadCapacityScalableTarget
      TargetTrackingScalingPolicyConfiguration: 
          TargetValue: 70
          ScaleInCooldown: 60
          ScaleOutCooldown: 60
          PredefinedMetricSpecification: 
            PredefinedMetricType: DynamoDBReadCapacityUtilization